
F411_Mai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800f15c  0800f15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e8  0800f2e8  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2e8  0800f2e8  0001f2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2f0  0800f2f0  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2f0  0800f2f0  0001f2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2f4  0800f2f4  0001f2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800f2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e58  200003c4  0800f6bc  000203c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000721c  0800f6bc  0002721c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267d9  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d63  00000000  00000000  00046bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  0004c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc0  00000000  00000000  0004e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e213  00000000  00000000  00050348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002824e  00000000  00000000  0006e55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db0f  00000000  00000000  000967a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001342b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080d8  00000000  00000000  00134308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c4 	.word	0x200003c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f144 	.word	0x0800f144

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c8 	.word	0x200003c8
 80001dc:	0800f144 	.word	0x0800f144

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t RGB_data_DMA_buffer[970] = {0};
uint32_t RGB_Air_DMA_buffer[592] = {0};
uint32_t RST_buffer[240] = {0};

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);

}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <key_scan>:
	0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
	0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0xD9u, 0xE2u
};

void key_scan()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
	for(uint8_t i = 0;i<16;i++)
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	e019      	b.n	80005d8 <key_scan+0x40>
	{
		if(HAL_I2C_Mem_Read(&hi2c1,SENSOR_ADDR,KEY_ADDR[i],I2C_MEMADD_SIZE_8BIT,&mem_temp,1,100)== HAL_OK)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a31      	ldr	r2, [pc, #196]	; (800066c <key_scan+0xd4>)
 80005a8:	5cd3      	ldrb	r3, [r2, r3]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <key_scan+0xd8>)
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	216e      	movs	r1, #110	; 0x6e
 80005bc:	482d      	ldr	r0, [pc, #180]	; (8000674 <key_scan+0xdc>)
 80005be:	f002 fa13 	bl	80029e8 <HAL_I2C_Mem_Read>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d104      	bne.n	80005d2 <key_scan+0x3a>
		{
			key_status[i] = mem_temp;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4a29      	ldr	r2, [pc, #164]	; (8000670 <key_scan+0xd8>)
 80005cc:	7811      	ldrb	r1, [r2, #0]
 80005ce:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <key_scan+0xe0>)
 80005d0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i<16;i++)
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b0f      	cmp	r3, #15
 80005dc:	d9e2      	bls.n	80005a4 <key_scan+0xc>
		}
	}
	for(uint8_t i = 0;i<16;i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	e01a      	b.n	800061a <key_scan+0x82>
	{
		if(HAL_I2C_Mem_Read(&hi2c2,SENSOR_ADDR,KEY_ADDR[i],I2C_MEMADD_SIZE_8BIT,&mem_temp,1,100)==HAL_OK)
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	4a21      	ldr	r2, [pc, #132]	; (800066c <key_scan+0xd4>)
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <key_scan+0xd8>)
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	216e      	movs	r1, #110	; 0x6e
 80005fc:	481f      	ldr	r0, [pc, #124]	; (800067c <key_scan+0xe4>)
 80005fe:	f002 f9f3 	bl	80029e8 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <key_scan+0x7c>
		{
			key_status[i+16] = mem_temp;
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	3310      	adds	r3, #16
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <key_scan+0xd8>)
 800060e:	7811      	ldrb	r1, [r2, #0]
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <key_scan+0xe0>)
 8000612:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i<16;i++)
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	3301      	adds	r3, #1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d9e1      	bls.n	80005e4 <key_scan+0x4c>
		}
	}
	for(uint8_t i = 0;i<16;i++)
 8000620:	2300      	movs	r3, #0
 8000622:	717b      	strb	r3, [r7, #5]
 8000624:	e01a      	b.n	800065c <key_scan+0xc4>
	{
		if(HAL_I2C_Mem_Read(&hi2c3,SENSOR_ADDR,KEY_ADDR[i],I2C_MEMADD_SIZE_8BIT,&mem_temp,1,100)== HAL_OK)
 8000626:	797b      	ldrb	r3, [r7, #5]
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <key_scan+0xd4>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	b29a      	uxth	r2, r3
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9302      	str	r3, [sp, #8]
 8000632:	2301      	movs	r3, #1
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <key_scan+0xd8>)
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	216e      	movs	r1, #110	; 0x6e
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <key_scan+0xe8>)
 8000640:	f002 f9d2 	bl	80029e8 <HAL_I2C_Mem_Read>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d105      	bne.n	8000656 <key_scan+0xbe>
		{
			key_status[i+32] = mem_temp;
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	3320      	adds	r3, #32
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <key_scan+0xd8>)
 8000650:	7811      	ldrb	r1, [r2, #0]
 8000652:	4a09      	ldr	r2, [pc, #36]	; (8000678 <key_scan+0xe0>)
 8000654:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0;i<16;i++)
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	3301      	adds	r3, #1
 800065a:	717b      	strb	r3, [r7, #5]
 800065c:	797b      	ldrb	r3, [r7, #5]
 800065e:	2b0f      	cmp	r3, #15
 8000660:	d9e1      	bls.n	8000626 <key_scan+0x8e>
		}
	}
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000000 	.word	0x20000000
 8000670:	20000410 	.word	0x20000410
 8000674:	20000488 	.word	0x20000488
 8000678:	200003e0 	.word	0x200003e0
 800067c:	200004dc 	.word	0x200004dc
 8000680:	20000530 	.word	0x20000530

08000684 <Sensor_softRST>:

void Sensor_softRST(I2C_HandleTypeDef *hi2cx)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af04      	add	r7, sp, #16
 800068a:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmd = 0xff;
 800068c:	23ff      	movs	r3, #255	; 0xff
 800068e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2cx,SENSOR_ADDR,CTRL_CMD,I2C_MEMADD_SIZE_8BIT,&rst_cmd,1,100);
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	2301      	movs	r3, #1
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	f107 030f 	add.w	r3, r7, #15
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2286      	movs	r2, #134	; 0x86
 80006a2:	216e      	movs	r1, #110	; 0x6e
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f002 f8a5 	bl	80027f4 <HAL_I2C_Mem_Write>
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <Sensor_Cfg>:

void Sensor_Cfg(I2C_HandleTypeDef *hi2cx)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	6078      	str	r0, [r7, #4]
	uint8_t sensor_sys_status = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	73bb      	strb	r3, [r7, #14]
	uint8_t sensor_sys_version = 3;//当前传感器软件版本
 80006c0:	2303      	movs	r3, #3
 80006c2:	73fb      	strb	r3, [r7, #15]
	CY8CMBR3116_configuration[USER_DATA] = sensor_sys_version;
 80006c4:	4a36      	ldr	r2, [pc, #216]	; (80007a0 <Sensor_Cfg+0xec>)
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
	//HAL_I2C_Mem_Read(hi2cx,SENSOR_ADDR,SYSTEM_STATUS,I2C_MEMADD_SIZE_8BIT,&sensor_sys_status,1,100);
	HAL_I2C_Mem_Read(hi2cx,SENSOR_ADDR,USER_DATA,I2C_MEMADD_SIZE_8BIT,&sensor_sys_status,1,100);
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	9302      	str	r3, [sp, #8]
 80006d0:	2301      	movs	r3, #1
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	f107 030e 	add.w	r3, r7, #14
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2301      	movs	r3, #1
 80006dc:	227a      	movs	r2, #122	; 0x7a
 80006de:	216e      	movs	r1, #110	; 0x6e
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f002 f981 	bl	80029e8 <HAL_I2C_Mem_Read>
	if (sensor_sys_status != sensor_sys_version)
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	7bfa      	ldrb	r2, [r7, #15]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d053      	beq.n	8000796 <Sensor_Cfg+0xe2>
	{
		// 首先将配置数据和 CRC 值写入到 CY8CMBR3xxx 控制器寄存器内
		while(HAL_I2C_Mem_Write(hi2cx,SENSOR_ADDR,0x00,I2C_MEMADD_SIZE_8BIT,CY8CMBR3116_configuration,128,100)!=HAL_OK);
 80006ee:	bf00      	nop
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <Sensor_Cfg+0xec>)
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2301      	movs	r3, #1
 80006fe:	2200      	movs	r2, #0
 8000700:	216e      	movs	r1, #110	; 0x6e
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f002 f876 	bl	80027f4 <HAL_I2C_Mem_Write>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f0      	bne.n	80006f0 <Sensor_Cfg+0x3c>
	//	osDelay(100);
	//	while(1){
	//		CDC_Transmit(0, CRC_data, 2);
	//		osDelay(1000);
	//	}
		while(HAL_I2C_Mem_Write(hi2cx,SENSOR_ADDR,CONFIG_CRC,I2C_MEMADD_SIZE_8BIT,CRC_data,2,100)!=HAL_OK);
 800070e:	bf00      	nop
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2302      	movs	r3, #2
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <Sensor_Cfg+0xf0>)
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	227e      	movs	r2, #126	; 0x7e
 8000720:	216e      	movs	r1, #110	; 0x6e
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f002 f866 	bl	80027f4 <HAL_I2C_Mem_Write>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f0      	bne.n	8000710 <Sensor_Cfg+0x5c>
		// 将 CMD_OP_CODE 的数值 2 写入到CTRL_CMD (0x86)寄存器内后等待 220 ms，将配置数据保存到非易失性存储器内。
		uint8_t CMD_OP_CODE = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Mem_Write(hi2cx,SENSOR_ADDR,CTRL_CMD,I2C_MEMADD_SIZE_8BIT,&CMD_OP_CODE,1,100)!=HAL_OK);
 8000732:	bf00      	nop
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	2301      	movs	r3, #1
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	f107 030d 	add.w	r3, r7, #13
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2301      	movs	r3, #1
 8000744:	2286      	movs	r2, #134	; 0x86
 8000746:	216e      	movs	r1, #110	; 0x6e
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f002 f853 	bl	80027f4 <HAL_I2C_Mem_Write>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1ef      	bne.n	8000734 <Sensor_Cfg+0x80>
		osDelay(220);
 8000754:	20dc      	movs	r0, #220	; 0xdc
 8000756:	f00b fbcd 	bl	800bef4 <osDelay>
		// 再 读 取CTRL_CMD_STATUS (0x88)寄存器，以便检查配置数据是否成功被存储到非易失性存储器内
		uint8_t sensor_cmd_status = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	733b      	strb	r3, [r7, #12]
		while(HAL_I2C_Mem_Read(hi2cx,SENSOR_ADDR,CTRL_CMD_STATUS,I2C_MEMADD_SIZE_8BIT,&sensor_cmd_status,1,100) != HAL_OK){
 800075e:	bf00      	nop
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	9302      	str	r3, [sp, #8]
 8000764:	2301      	movs	r3, #1
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2301      	movs	r3, #1
 8000770:	2288      	movs	r2, #136	; 0x88
 8000772:	216e      	movs	r1, #110	; 0x6e
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 f937 	bl	80029e8 <HAL_I2C_Mem_Read>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00b      	beq.n	8000798 <Sensor_Cfg+0xe4>
			if (sensor_cmd_status == 0)
 8000780:	7b3b      	ldrb	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d103      	bne.n	800078e <Sensor_Cfg+0xda>
			{
				Sensor_softRST(hi2cx);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff7c 	bl	8000684 <Sensor_softRST>
				return;
 800078c:	e004      	b.n	8000798 <Sensor_Cfg+0xe4>
			}
			else
			{
				while(1)
				{
					Sensor_Cfg(hi2cx);//重新尝试刷入
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff90 	bl	80006b4 <Sensor_Cfg>
					return;
 8000794:	e000      	b.n	8000798 <Sensor_Cfg+0xe4>
		return;
		}
	}
	else
	{
		return;
 8000796:	bf00      	nop
	}

}
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000038 	.word	0x20000038
 80007a4:	20000034 	.word	0x20000034

080007a8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_DMA_Init+0xe8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a36      	ldr	r2, [pc, #216]	; (8000890 <MX_DMA_Init+0xe8>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_DMA_Init+0xe8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_DMA_Init+0xe8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <MX_DMA_Init+0xe8>)
 80007d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_DMA_Init+0xe8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_DMA_Init+0xec>)
 80007e8:	4a2b      	ldr	r2, [pc, #172]	; (8000898 <MX_DMA_Init+0xf0>)
 80007ea:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_DMA_Init+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_DMA_Init+0xec>)
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_DMA_Init+0xec>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_DMA_Init+0xec>)
 8000802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000806:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_DMA_Init+0xec>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_DMA_Init+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_DMA_Init+0xec>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_DMA_Init+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_DMA_Init+0xec>)
 8000822:	2204      	movs	r2, #4
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_DMA_Init+0xec>)
 8000828:	2203      	movs	r2, #3
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_DMA_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_DMA_Init+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000838:	4816      	ldr	r0, [pc, #88]	; (8000894 <MX_DMA_Init+0xec>)
 800083a:	f001 f9bb 	bl	8001bb4 <HAL_DMA_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 8000844:	f000 fca0 	bl	8001188 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2105      	movs	r1, #5
 800084c:	200b      	movs	r0, #11
 800084e:	f001 f987 	bl	8001b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000852:	200b      	movs	r0, #11
 8000854:	f001 f9a0 	bl	8001b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	200c      	movs	r0, #12
 800085e:	f001 f97f 	bl	8001b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000862:	200c      	movs	r0, #12
 8000864:	f001 f998 	bl	8001b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2105      	movs	r1, #5
 800086c:	200d      	movs	r0, #13
 800086e:	f001 f977 	bl	8001b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000872:	200d      	movs	r0, #13
 8000874:	f001 f990 	bl	8001b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	2010      	movs	r0, #16
 800087e:	f001 f96f 	bl	8001b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000882:	2010      	movs	r0, #16
 8000884:	f001 f988 	bl	8001b98 <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	20000414 	.word	0x20000414
 8000898:	40026410 	.word	0x40026410

0800089c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <MX_FREERTOS_Init+0x48>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <MX_FREERTOS_Init+0x4c>)
 80008a6:	f00b fa93 	bl	800bdd0 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_FREERTOS_Init+0x50>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80008b0:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <MX_FREERTOS_Init+0x54>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <MX_FREERTOS_Init+0x58>)
 80008b6:	f00b fa8b 	bl	800bdd0 <osThreadNew>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <MX_FREERTOS_Init+0x5c>)
 80008be:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <MX_FREERTOS_Init+0x60>)
 80008c2:	2100      	movs	r1, #0
 80008c4:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_FREERTOS_Init+0x64>)
 80008c6:	f00b fa83 	bl	800bdd0 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <MX_FREERTOS_Init+0x68>)
 80008ce:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <MX_FREERTOS_Init+0x6c>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_FREERTOS_Init+0x70>)
 80008d6:	f00b fa7b 	bl	800bdd0 <osThreadNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <MX_FREERTOS_Init+0x74>)
 80008de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800f204 	.word	0x0800f204
 80008e8:	08000915 	.word	0x08000915
 80008ec:	20000478 	.word	0x20000478
 80008f0:	0800f228 	.word	0x0800f228
 80008f4:	08000a31 	.word	0x08000a31
 80008f8:	2000047c 	.word	0x2000047c
 80008fc:	0800f24c 	.word	0x0800f24c
 8000900:	08000a49 	.word	0x08000a49
 8000904:	20000480 	.word	0x20000480
 8000908:	0800f270 	.word	0x0800f270
 800090c:	08000b11 	.word	0x08000b11
 8000910:	20000484 	.word	0x20000484

08000914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(8);
 800091c:	2008      	movs	r0, #8
 800091e:	f00b fae9 	bl	800bef4 <osDelay>
	Sensor_Cfg(&hi2c1);
 8000922:	483b      	ldr	r0, [pc, #236]	; (8000a10 <StartDefaultTask+0xfc>)
 8000924:	f7ff fec6 	bl	80006b4 <Sensor_Cfg>
	Sensor_Cfg(&hi2c2);
 8000928:	483a      	ldr	r0, [pc, #232]	; (8000a14 <StartDefaultTask+0x100>)
 800092a:	f7ff fec3 	bl	80006b4 <Sensor_Cfg>
	Sensor_Cfg(&hi2c3);
 800092e:	483a      	ldr	r0, [pc, #232]	; (8000a18 <StartDefaultTask+0x104>)
 8000930:	f7ff fec0 	bl	80006b4 <Sensor_Cfg>
	while(1)
	{
		osDelay(5);
 8000934:	2005      	movs	r0, #5
 8000936:	f00b fadd 	bl	800bef4 <osDelay>
		key_scan();
 800093a:	f7ff fe2d 	bl	8000598 <key_scan>
		char cmd_touch[9] = "(0000000)";
 800093e:	4a37      	ldr	r2, [pc, #220]	; (8000a1c <StartDefaultTask+0x108>)
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	ca07      	ldmia	r2, {r0, r1, r2}
 8000946:	c303      	stmia	r3!, {r0, r1}
 8000948:	701a      	strb	r2, [r3, #0]
		for(uint8_t j = 0;j<8;j++){
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]
 800094e:	e04f      	b.n	80009f0 <StartDefaultTask+0xdc>
			for(uint8_t i = 0;i<5;i++){
 8000950:	2300      	movs	r3, #0
 8000952:	75bb      	strb	r3, [r7, #22]
 8000954:	e046      	b.n	80009e4 <StartDefaultTask+0xd0>
				if(key_status[key_sheet[i+j*5]] > key_threshold){
 8000956:	7db9      	ldrb	r1, [r7, #22]
 8000958:	7dfa      	ldrb	r2, [r7, #23]
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	440b      	add	r3, r1
 8000962:	4a2f      	ldr	r2, [pc, #188]	; (8000a20 <StartDefaultTask+0x10c>)
 8000964:	5cd3      	ldrb	r3, [r2, r3]
 8000966:	461a      	mov	r2, r3
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <StartDefaultTask+0x110>)
 800096a:	5c9a      	ldrb	r2, [r3, r2]
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <StartDefaultTask+0x114>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d919      	bls.n	80009a8 <StartDefaultTask+0x94>
					cmd_touch[8-j] = cmd_touch[8-j] | (1 << (5-i));
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	f1c3 0308 	rsb	r3, r3, #8
 800097a:	3318      	adds	r3, #24
 800097c:	443b      	add	r3, r7
 800097e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000982:	b25a      	sxtb	r2, r3
 8000984:	7dbb      	ldrb	r3, [r7, #22]
 8000986:	f1c3 0305 	rsb	r3, r3, #5
 800098a:	2101      	movs	r1, #1
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	b25b      	sxtb	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b25a      	sxtb	r2, r3
 8000996:	7dfb      	ldrb	r3, [r7, #23]
 8000998:	f1c3 0308 	rsb	r3, r3, #8
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	3318      	adds	r3, #24
 80009a0:	443b      	add	r3, r7
 80009a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80009a6:	e01a      	b.n	80009de <StartDefaultTask+0xca>
				}else{
					cmd_touch[8-j] = cmd_touch[8-j] & ~(1 << (5-i));
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	f1c3 0308 	rsb	r3, r3, #8
 80009ae:	3318      	adds	r3, #24
 80009b0:	443b      	add	r3, r7
 80009b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	7dbb      	ldrb	r3, [r7, #22]
 80009ba:	f1c3 0305 	rsb	r3, r3, #5
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	4013      	ands	r3, r2
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	f1c3 0308 	rsb	r3, r3, #8
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	3318      	adds	r3, #24
 80009d8:	443b      	add	r3, r7
 80009da:	f803 2c0c 	strb.w	r2, [r3, #-12]
			for(uint8_t i = 0;i<5;i++){
 80009de:	7dbb      	ldrb	r3, [r7, #22]
 80009e0:	3301      	adds	r3, #1
 80009e2:	75bb      	strb	r3, [r7, #22]
 80009e4:	7dbb      	ldrb	r3, [r7, #22]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d9b5      	bls.n	8000956 <StartDefaultTask+0x42>
		for(uint8_t j = 0;j<8;j++){
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
 80009ec:	3301      	adds	r3, #1
 80009ee:	75fb      	strb	r3, [r7, #23]
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b07      	cmp	r3, #7
 80009f4:	d9ac      	bls.n	8000950 <StartDefaultTask+0x3c>
				}
			}
		}
		if(touch_scan_flag){
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <StartDefaultTask+0x118>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d09a      	beq.n	8000934 <StartDefaultTask+0x20>
			CDC_Transmit(0, cmd_touch, 9);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2209      	movs	r2, #9
 8000a04:	4619      	mov	r1, r3
 8000a06:	2000      	movs	r0, #0
 8000a08:	f008 fc98 	bl	800933c <CDC_Transmit>
	{
 8000a0c:	e792      	b.n	8000934 <StartDefaultTask+0x20>
 8000a0e:	bf00      	nop
 8000a10:	20000488 	.word	0x20000488
 8000a14:	200004dc 	.word	0x200004dc
 8000a18:	20000530 	.word	0x20000530
 8000a1c:	0800f180 	.word	0x0800f180
 8000a20:	20000010 	.word	0x20000010
 8000a24:	200003e0 	.word	0x200003e0
 8000a28:	20000033 	.word	0x20000033
 8000a2c:	20000474 	.word	0x20000474

08000a30 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	osDelay(1000);
 8000a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3c:	f00b fa5a 	bl	800bef4 <osDelay>

  /* USER CODE END StartTask02 */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
//	uint8_t led_flag = 0;
//	uint8_t led_flag_len = 0;
  for(;;)
  {
	osDelay(5);
 8000a50:	2005      	movs	r0, #5
 8000a52:	f00b fa4f 	bl	800bef4 <osDelay>
	if (rxLen0 != 0){
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <StartTask03+0xb4>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f8      	beq.n	8000a50 <StartTask03+0x8>
		//maitouch
		if(rxBuffer0[0] == 0x7B){
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <StartTask03+0xb8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b7b      	cmp	r3, #123	; 0x7b
 8000a64:	d1f4      	bne.n	8000a50 <StartTask03+0x8>
			char cmd_tmp[6] = "(RSET)";
 8000a66:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <StartTask03+0xbc>)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a70:	6018      	str	r0, [r3, #0]
 8000a72:	3304      	adds	r3, #4
 8000a74:	8019      	strh	r1, [r3, #0]
			switch (rxBuffer0[1]){
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <StartTask03+0xb8>)
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	2b53      	cmp	r3, #83	; 0x53
 8000a7c:	d006      	beq.n	8000a8c <StartTask03+0x44>
 8000a7e:	2b53      	cmp	r3, #83	; 0x53
 8000a80:	dc39      	bgt.n	8000af6 <StartTask03+0xae>
 8000a82:	2b48      	cmp	r3, #72	; 0x48
 8000a84:	d005      	beq.n	8000a92 <StartTask03+0x4a>
 8000a86:	2b52      	cmp	r3, #82	; 0x52
 8000a88:	d006      	beq.n	8000a98 <StartTask03+0x50>
						//todo
						memcpy(cmd_tmp+1,rxBuffer0+1,4);
						CDC_Transmit(0,cmd_tmp,6);
					}
				default:
					break;
 8000a8a:	e034      	b.n	8000af6 <StartTask03+0xae>
					touch_scan_flag = 1;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <StartTask03+0xc0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
					touch_scan_flag = 0;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <StartTask03+0xc0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
					if(rxBuffer0[3] == 0x45){
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <StartTask03+0xb8>)
 8000a9a:	78db      	ldrb	r3, [r3, #3]
 8000a9c:	2b45      	cmp	r3, #69	; 0x45
 8000a9e:	d107      	bne.n	8000ab0 <StartTask03+0x68>
						CDC_Transmit(0,cmd_tmp,6);
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f008 fc47 	bl	800933c <CDC_Transmit>
					break;
 8000aae:	e022      	b.n	8000af6 <StartTask03+0xae>
					}else if(rxBuffer0[3] == 0x72){
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <StartTask03+0xb8>)
 8000ab2:	78db      	ldrb	r3, [r3, #3]
 8000ab4:	2b72      	cmp	r3, #114	; 0x72
 8000ab6:	d10d      	bne.n	8000ad4 <StartTask03+0x8c>
						memcpy(cmd_tmp+1,rxBuffer0+1,4);
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <StartTask03+0xc4>)
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	601a      	str	r2, [r3, #0]
						CDC_Transmit(0,cmd_tmp,6);
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	2206      	movs	r2, #6
 8000aca:	4619      	mov	r1, r3
 8000acc:	2000      	movs	r0, #0
 8000ace:	f008 fc35 	bl	800933c <CDC_Transmit>
					break;
 8000ad2:	e010      	b.n	8000af6 <StartTask03+0xae>
					}else if(rxBuffer0[3] == 0x6b){
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <StartTask03+0xb8>)
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	2b6b      	cmp	r3, #107	; 0x6b
 8000ada:	d10c      	bne.n	8000af6 <StartTask03+0xae>
						memcpy(cmd_tmp+1,rxBuffer0+1,4);
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <StartTask03+0xc4>)
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	601a      	str	r2, [r3, #0]
						CDC_Transmit(0,cmd_tmp,6);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2206      	movs	r2, #6
 8000aee:	4619      	mov	r1, r3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f008 fc23 	bl	800933c <CDC_Transmit>
					break;
 8000af6:	bf00      	nop
	osDelay(5);
 8000af8:	e7aa      	b.n	8000a50 <StartTask03+0x8>
 8000afa:	bf00      	nop
 8000afc:	20000704 	.word	0x20000704
 8000b00:	20000644 	.word	0x20000644
 8000b04:	0800f18c 	.word	0x0800f18c
 8000b08:	20000474 	.word	0x20000474
 8000b0c:	20000645 	.word	0x20000645

08000b10 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
//	    	}
//	    }
//	    //�?????启DMA传输刷灯
//		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)RGB_data_DMA_buffer, 970);
//		HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)RGB_Air_DMA_buffer, 592);
		osDelay(50);
 8000b18:	2032      	movs	r0, #50	; 0x32
 8000b1a:	f00b f9eb 	bl	800bef4 <osDelay>
//	  }
  /* USER CODE END StartTask04 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a36      	ldr	r2, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_GPIO_Init+0x118>)
 8000bb6:	f001 fc9b 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0x118>)
 8000bd4:	f001 fb08 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bd8:	23fe      	movs	r3, #254	; 0xfe
 8000bda:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4816      	ldr	r0, [pc, #88]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bec:	f001 fafc 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_GPIO_Init+0x120>)
 8000c04:	f001 faf0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <MX_GPIO_Init+0x120>)
 8000c1e:	f001 fae3 	bl	80021e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	2017      	movs	r0, #23
 8000c28:	f000 ff9a 	bl	8001b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c2c:	2017      	movs	r0, #23
 8000c2e:	f000 ffb3 	bl	8001b98 <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400

08000c4c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <MX_I2C1_Init+0x58>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c8a:	f001 fc6f 	bl	800256c <HAL_I2C_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c94:	f000 fa78 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000488 	.word	0x20000488
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	00061a80 	.word	0x00061a80

08000ca8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MX_I2C2_Init+0x54>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_I2C2_Init+0x58>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_I2C2_Init+0x50>)
 8000ce6:	f001 fc41 	bl	800256c <HAL_I2C_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 fa4a 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200004dc 	.word	0x200004dc
 8000cfc:	40005800 	.word	0x40005800
 8000d00:	000186a0 	.word	0x000186a0

08000d04 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C3_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_I2C3_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2C3_Init+0x50>)
 8000d42:	f001 fc13 	bl	800256c <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 fa1c 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000530 	.word	0x20000530
 8000d58:	40005c00 	.word	0x40005c00
 8000d5c:	00061a80 	.word	0x00061a80

08000d60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4aa4      	ldr	r2, [pc, #656]	; (8001010 <HAL_I2C_MspInit+0x2b0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d16d      	bne.n	8000e5e <HAL_I2C_MspInit+0xfe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	4ba3      	ldr	r3, [pc, #652]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4aa2      	ldr	r2, [pc, #648]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4ba0      	ldr	r3, [pc, #640]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db0:	2304      	movs	r3, #4
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db8:	4619      	mov	r1, r3
 8000dba:	4897      	ldr	r0, [pc, #604]	; (8001018 <HAL_I2C_MspInit+0x2b8>)
 8000dbc:	f001 fa14 	bl	80021e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	4b93      	ldr	r3, [pc, #588]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a92      	ldr	r2, [pc, #584]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b90      	ldr	r3, [pc, #576]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000ddc:	4b8f      	ldr	r3, [pc, #572]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000dde:	4a90      	ldr	r2, [pc, #576]	; (8001020 <HAL_I2C_MspInit+0x2c0>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000de2:	4b8e      	ldr	r3, [pc, #568]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b8c      	ldr	r3, [pc, #560]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b8a      	ldr	r3, [pc, #552]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b89      	ldr	r3, [pc, #548]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfe:	4b87      	ldr	r3, [pc, #540]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e04:	4b85      	ldr	r3, [pc, #532]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000e0a:	4b84      	ldr	r3, [pc, #528]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e12:	4b82      	ldr	r3, [pc, #520]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e18:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1a:	4b80      	ldr	r3, [pc, #512]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e20:	487e      	ldr	r0, [pc, #504]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e22:	f000 fec7 	bl	8001bb4 <HAL_DMA_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8000e2c:	f000 f9ac 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a7a      	ldr	r2, [pc, #488]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
 8000e36:	4a79      	ldr	r2, [pc, #484]	; (800101c <HAL_I2C_MspInit+0x2bc>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2105      	movs	r1, #5
 8000e40:	201f      	movs	r0, #31
 8000e42:	f000 fe8d 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e46:	201f      	movs	r0, #31
 8000e48:	f000 fea6 	bl	8001b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2105      	movs	r1, #5
 8000e50:	2020      	movs	r0, #32
 8000e52:	f000 fe85 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e56:	2020      	movs	r0, #32
 8000e58:	f000 fe9e 	bl	8001b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000e5c:	e0d3      	b.n	8001006 <HAL_I2C_MspInit+0x2a6>
  else if(i2cHandle->Instance==I2C2)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a70      	ldr	r2, [pc, #448]	; (8001024 <HAL_I2C_MspInit+0x2c4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13d      	bne.n	8000ee4 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	4b69      	ldr	r3, [pc, #420]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a68      	ldr	r2, [pc, #416]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b66      	ldr	r3, [pc, #408]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e96:	2304      	movs	r3, #4
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	485d      	ldr	r0, [pc, #372]	; (8001018 <HAL_I2C_MspInit+0x2b8>)
 8000ea2:	f001 f9a1 	bl	80021e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eaa:	2312      	movs	r3, #18
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000eb6:	2309      	movs	r3, #9
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4855      	ldr	r0, [pc, #340]	; (8001018 <HAL_I2C_MspInit+0x2b8>)
 8000ec2:	f001 f991 	bl	80021e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b52      	ldr	r3, [pc, #328]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a51      	ldr	r2, [pc, #324]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
}
 8000ee2:	e090      	b.n	8001006 <HAL_I2C_MspInit+0x2a6>
  else if(i2cHandle->Instance==I2C3)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <HAL_I2C_MspInit+0x2c8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f040 808b 	bne.w	8001006 <HAL_I2C_MspInit+0x2a6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	4b47      	ldr	r3, [pc, #284]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4b40      	ldr	r3, [pc, #256]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4839      	ldr	r0, [pc, #228]	; (800102c <HAL_I2C_MspInit+0x2cc>)
 8000f46:	f001 f94f 	bl	80021e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	482c      	ldr	r0, [pc, #176]	; (8001018 <HAL_I2C_MspInit+0x2b8>)
 8000f66:	f001 f93f 	bl	80021e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <HAL_I2C_MspInit+0x2b4>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000f88:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <HAL_I2C_MspInit+0x2d4>)
 8000f8a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000f8e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f92:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_CIRCULAR;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fbe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fc2:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8000fca:	4819      	ldr	r0, [pc, #100]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fcc:	f000 fdf2 	bl	8001bb4 <HAL_DMA_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_I2C_MspInit+0x27a>
      Error_Handler();
 8000fd6:	f000 f8d7 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fde:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_I2C_MspInit+0x2d0>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2105      	movs	r1, #5
 8000fea:	2048      	movs	r0, #72	; 0x48
 8000fec:	f000 fdb8 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000ff0:	2048      	movs	r0, #72	; 0x48
 8000ff2:	f000 fdd1 	bl	8001b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	2049      	movs	r0, #73	; 0x49
 8000ffc:	f000 fdb0 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001000:	2049      	movs	r0, #73	; 0x49
 8001002:	f000 fdc9 	bl	8001b98 <HAL_NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40005400 	.word	0x40005400
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	20000584 	.word	0x20000584
 8001020:	40026010 	.word	0x40026010
 8001024:	40005800 	.word	0x40005800
 8001028:	40005c00 	.word	0x40005c00
 800102c:	40020000 	.word	0x40020000
 8001030:	200005e4 	.word	0x200005e4
 8001034:	40026040 	.word	0x40026040

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f000 fc72 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f828 	bl	8001094 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
 __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <main+0x58>)
 8001046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <main+0x58>)
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	6713      	str	r3, [r2, #112]	; 0x70
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <main+0x58>)
 8001052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <main+0x58>)
 8001056:	f023 0304 	bic.w	r3, r3, #4
 800105a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f7ff fd64 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001060:	f7ff fba2 	bl	80007a8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001064:	f7ff fdf2 	bl	8000c4c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001068:	f7ff fe4c 	bl	8000d04 <MX_I2C3_Init>
  MX_USB_OTG_FS_PCD_Init();
 800106c:	f000 fbae 	bl	80017cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001070:	f000 f9f8 	bl	8001464 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001074:	f000 fa4e 	bl	8001514 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001078:	f7ff fe16 	bl	8000ca8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800107c:	f007 ffe8 	bl	8009050 <MX_USB_DEVICE_Init>
  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
  //HAL_TIM_Base_Start_IT(&htim5);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001080:	f00a fe5c 	bl	800bd3c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001084:	f7ff fc0a 	bl	800089c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001088:	f00a fe7c 	bl	800bd84 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108c:	e7fe      	b.n	800108c <main+0x54>
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00d fbd2 	bl	800e84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <SystemClock_Config+0xc8>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a26      	ldr	r2, [pc, #152]	; (800115c <SystemClock_Config+0xc8>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <SystemClock_Config+0xc8>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <SystemClock_Config+0xcc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a20      	ldr	r2, [pc, #128]	; (8001160 <SystemClock_Config+0xcc>)
 80010de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <SystemClock_Config+0xcc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001102:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001104:	2319      	movs	r3, #25
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001108:	23c0      	movs	r3, #192	; 0xc0
 800110a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4618      	mov	r0, r3
 800111a:	f005 f93f 	bl	800639c <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001124:	f000 f830 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2103      	movs	r1, #3
 8001144:	4618      	mov	r0, r3
 8001146:	f005 fba1 	bl	800688c <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001150:	f000 f81a 	bl	8001188 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3750      	adds	r7, #80	; 0x50
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f000 fbf7 	bl	8001968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40010000 	.word	0x40010000

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_MspInit+0x54>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_MspInit+0x54>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x54>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_MspInit+0x54>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_MspInit+0x54>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_MspInit+0x54>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	210f      	movs	r1, #15
 80011d6:	f06f 0001 	mvn.w	r0, #1
 80011da:	f000 fcc1 	bl	8001b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_InitTick+0xd0>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	4a2d      	ldr	r2, [pc, #180]	; (80012bc <HAL_InitTick+0xd0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6453      	str	r3, [r2, #68]	; 0x44
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_InitTick+0xd0>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f005 fd12 	bl	8006c4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001228:	f005 fcfc 	bl	8006c24 <HAL_RCC_GetPCLK2Freq>
 800122c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <HAL_InitTick+0xd4>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	3b01      	subs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_InitTick+0xd8>)
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_InitTick+0xdc>)
 8001240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_InitTick+0xd8>)
 8001244:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001248:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_InitTick+0xd8>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_InitTick+0xd8>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_InitTick+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_InitTick+0xd8>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001262:	4818      	ldr	r0, [pc, #96]	; (80012c4 <HAL_InitTick+0xd8>)
 8001264:	f005 fd24 	bl	8006cb0 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800126e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11b      	bne.n	80012ae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <HAL_InitTick+0xd8>)
 8001278:	f005 fd74 	bl	8006d64 <HAL_TIM_Base_Start_IT>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001286:	2b00      	cmp	r3, #0
 8001288:	d111      	bne.n	80012ae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800128a:	2019      	movs	r0, #25
 800128c:	f000 fc84 	bl	8001b98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d808      	bhi.n	80012a8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001296:	2200      	movs	r2, #0
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2019      	movs	r0, #25
 800129c:	f000 fc60 	bl	8001b60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_InitTick+0xe0>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e002      	b.n	80012ae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	431bde83 	.word	0x431bde83
 80012c4:	20000708 	.word	0x20000708
 80012c8:	40010000 	.word	0x40010000
 80012cc:	200000bc 	.word	0x200000bc

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA1_Stream0_IRQHandler+0x10>)
 8001302:	f000 fd27 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000584 	.word	0x20000584

08001310 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA1_Stream1_IRQHandler+0x10>)
 8001316:	f000 fd1d 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200007e4 	.word	0x200007e4

08001324 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA1_Stream2_IRQHandler+0x10>)
 800132a:	f000 fd13 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200005e4 	.word	0x200005e4

08001338 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <DMA1_Stream5_IRQHandler+0x10>)
 800133e:	f000 fd09 	bl	8001d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000844 	.word	0x20000844

0800134c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001350:	2080      	movs	r0, #128	; 0x80
 8001352:	f001 f8e7 	bl	8002524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001362:	f005 fdb0 	bl	8006ec6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000708 	.word	0x20000708

08001370 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <I2C1_EV_IRQHandler+0x10>)
 8001376:	f001 fd5d 	bl	8002e34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000488 	.word	0x20000488

08001384 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <I2C1_ER_IRQHandler+0x10>)
 800138a:	f001 fec4 	bl	8003116 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000488 	.word	0x20000488

08001398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <OTG_FS_IRQHandler+0x10>)
 800139e:	f003 fecf 	bl	8005140 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200008a4 	.word	0x200008a4

080013ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <I2C3_EV_IRQHandler+0x10>)
 80013b2:	f001 fd3f 	bl	8002e34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000530 	.word	0x20000530

080013c0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <I2C3_ER_IRQHandler+0x10>)
 80013c6:	f001 fea6 	bl	8003116 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000530 	.word	0x20000530

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f00d f9ea 	bl	800e7dc <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20020000 	.word	0x20020000
 8001434:	00000400 	.word	0x00000400
 8001438:	20000750 	.word	0x20000750
 800143c:	20007220 	.word	0x20007220

08001440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch3_up;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_TIM2_Init+0xac>)
 8001488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_TIM2_Init+0xac>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_TIM2_Init+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_TIM2_Init+0xac>)
 800149c:	2277      	movs	r2, #119	; 0x77
 800149e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_TIM2_Init+0xac>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_TIM2_Init+0xac>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ac:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_TIM2_Init+0xac>)
 80014ae:	f005 fcbb 	bl	8006e28 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014b8:	f7ff fe66 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	4619      	mov	r1, r3
 80014ca:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM2_Init+0xac>)
 80014cc:	f006 f8f0 	bl	80076b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80014d6:	f7ff fe57 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM2_Init+0xac>)
 80014f2:	f005 fdf1 	bl	80070d8 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80014fc:	f7ff fe44 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM2_Init+0xac>)
 8001502:	f000 f903 	bl	800170c <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000754 	.word	0x20000754

08001514 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_TIM4_Init+0xac>)
 8001538:	4a22      	ldr	r2, [pc, #136]	; (80015c4 <MX_TIM4_Init+0xb0>)
 800153a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM4_Init+0xac>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_TIM4_Init+0xac>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_TIM4_Init+0xac>)
 800154a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_TIM4_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_TIM4_Init+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800155c:	4818      	ldr	r0, [pc, #96]	; (80015c0 <MX_TIM4_Init+0xac>)
 800155e:	f005 fc63 	bl	8006e28 <HAL_TIM_PWM_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001568:	f7ff fe0e 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4619      	mov	r1, r3
 800157a:	4811      	ldr	r0, [pc, #68]	; (80015c0 <MX_TIM4_Init+0xac>)
 800157c:	f006 f898 	bl	80076b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001586:	f7ff fdff 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	; 0x60
 800158c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM4_Init+0xac>)
 80015a2:	f005 fd99 	bl	80070d8 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80015ac:	f7ff fdec 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM4_Init+0xac>)
 80015b2:	f000 f8ab 	bl	800170c <HAL_TIM_MspPostInit>

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000079c 	.word	0x2000079c
 80015c4:	40000800 	.word	0x40000800

080015c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d8:	d174      	bne.n	80016c4 <HAL_TIM_PWM_MspInit+0xfc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_TIM_PWM_MspInit+0x12c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <HAL_TIM_PWM_MspInit+0x12c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_TIM_PWM_MspInit+0x12c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 80015f8:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_TIM_PWM_MspInit+0x134>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 80015fe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001602:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 8001612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001616:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800161a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800161e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 8001622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001626:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 800163a:	482f      	ldr	r0, [pc, #188]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800163c:	f000 faba 	bl	8001bb4 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001646:	f7ff fd9f 	bl	8001188 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001650:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800165a:	621a      	str	r2, [r3, #32]
 800165c:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <HAL_TIM_PWM_MspInit+0x130>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 8001664:	4a27      	ldr	r2, [pc, #156]	; (8001704 <HAL_TIM_PWM_MspInit+0x13c>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 800166a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800166e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 800167e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001682:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 8001686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80016a6:	4816      	ldr	r0, [pc, #88]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 80016a8:	f000 fa84 	bl	8001bb4 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_TIM_PWM_MspInit+0xee>
    {
      Error_Handler();
 80016b2:	f7ff fd69 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
 80016bc:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_TIM_PWM_MspInit+0x138>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80016c2:	e012      	b.n	80016ea <HAL_TIM_PWM_MspInit+0x122>
  else if(tim_pwmHandle->Instance==TIM4)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_TIM_PWM_MspInit+0x140>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10d      	bne.n	80016ea <HAL_TIM_PWM_MspInit+0x122>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_TIM_PWM_MspInit+0x12c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_TIM_PWM_MspInit+0x12c>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_TIM_PWM_MspInit+0x12c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	200007e4 	.word	0x200007e4
 80016fc:	40026028 	.word	0x40026028
 8001700:	20000844 	.word	0x20000844
 8001704:	40026088 	.word	0x40026088
 8001708:	40000800 	.word	0x40000800

0800170c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	d11e      	bne.n	800176c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_TIM_MspPostInit+0xb0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <HAL_TIM_MspPostInit+0xb0>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_TIM_MspPostInit+0xb0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174a:	2301      	movs	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175a:	2301      	movs	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4816      	ldr	r0, [pc, #88]	; (80017c0 <HAL_TIM_MspPostInit+0xb4>)
 8001766:	f000 fd3f 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800176a:	e022      	b.n	80017b2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_TIM_MspPostInit+0xb8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d11d      	bne.n	80017b2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_TIM_MspPostInit+0xb0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_TIM_MspPostInit+0xb0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_MspPostInit+0xb0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <HAL_TIM_MspPostInit+0xbc>)
 80017ae:	f000 fd1b 	bl	80021e8 <HAL_GPIO_Init>
}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40000800 	.word	0x40000800
 80017c8:	40020400 	.word	0x40020400

080017cc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017da:	2204      	movs	r2, #4
 80017dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e0:	2202      	movs	r2, #2
 80017e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ec:	2202      	movs	r2, #2
 80017ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001810:	f003 fb46 	bl	8004ea0 <HAL_PCD_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800181a:	f7ff fcb5 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200008a4 	.word	0x200008a4

08001828 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001848:	d13a      	bne.n	80018c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001866:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001878:	230a      	movs	r3, #10
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <HAL_PCD_MspInit+0xa4>)
 8001884:	f000 fcb0 	bl	80021e8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 800188e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001892:	6353      	str	r3, [r2, #52]	; 0x34
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	6453      	str	r3, [r2, #68]	; 0x44
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_PCD_MspInit+0xa0>)
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2105      	movs	r1, #5
 80018b4:	2043      	movs	r0, #67	; 0x43
 80018b6:	f000 f953 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80018ba:	2043      	movs	r0, #67	; 0x43
 80018bc:	f000 f96c 	bl	8001b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fa:	f7ff fda1 	bl	8001440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f00c ff73 	bl	800e7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fb99 	bl	8001038 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8001914:	0800f2f8 	.word	0x0800f2f8
  ldr r2, =_sbss
 8001918:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 800191c:	2000721c 	.word	0x2000721c

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f8fc 	bl	8001b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f7ff fc4a 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fc1c 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200000c0 	.word	0x200000c0
 800198c:	20000db0 	.word	0x20000db0

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000db0 	.word	0x20000db0

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000c0 	.word	0x200000c0

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff4c 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b72:	f7ff ff61 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	6978      	ldr	r0, [r7, #20]
 8001b7e:	f7ff ffb1 	bl	8001ae4 <NVIC_EncodePriority>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff80 	bl	8001a90 <__NVIC_SetPriority>
}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff54 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fee6 	bl	8001990 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e099      	b.n	8001d04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf0:	e00f      	b.n	8001c12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bf2:	f7ff fecd 	bl	8001990 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d908      	bls.n	8001c12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e078      	b.n	8001d04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e8      	bne.n	8001bf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <HAL_DMA_Init+0x158>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d107      	bne.n	8001c7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4313      	orrs	r3, r2
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f023 0307 	bic.w	r3, r3, #7
 8001c92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d117      	bne.n	8001cd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fa19 	bl	80020f0 <DMA_CheckFifoParam>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e016      	b.n	8001d04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f9d0 	bl	8002084 <DMA_CalcBaseAndBitshift>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	223f      	movs	r2, #63	; 0x3f
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	f010803f 	.word	0xf010803f

08001d10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d004      	beq.n	8001d2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00c      	b.n	8001d48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2205      	movs	r2, #5
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d60:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <HAL_DMA_IRQHandler+0x248>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a8e      	ldr	r2, [pc, #568]	; (8001fa0 <HAL_DMA_IRQHandler+0x24c>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0a9b      	lsrs	r3, r3, #10
 8001d6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2208      	movs	r2, #8
 8001d80:	409a      	lsls	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01a      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	2208      	movs	r2, #8
 8001dae:	409a      	lsls	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d012      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2201      	movs	r2, #1
 8001de4:	409a      	lsls	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d012      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2204      	movs	r2, #4
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f043 0204 	orr.w	r2, r3, #4
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e30:	2210      	movs	r2, #16
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d043      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d03c      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2210      	movs	r2, #16
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d018      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d108      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d024      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
 8001e82:	e01f      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
 8001e94:	e016      	b.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0208 	bic.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2220      	movs	r2, #32
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 808f 	beq.w	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8087 	beq.w	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2220      	movs	r2, #32
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b05      	cmp	r3, #5
 8001efc:	d136      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0216 	bic.w	r2, r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d103      	bne.n	8001f2e <HAL_DMA_IRQHandler+0x1da>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0208 	bic.w	r2, r2, #8
 8001f3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	223f      	movs	r2, #63	; 0x3f
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d07e      	beq.n	8002060 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
        }
        return;
 8001f6a:	e079      	b.n	8002060 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01d      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10d      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d031      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
 8001f98:	e02c      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
 8001f9a:	bf00      	nop
 8001f9c:	200000b8 	.word	0x200000b8
 8001fa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	4798      	blx	r3
 8001fb4:	e01e      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0210 	bic.w	r2, r2, #16
 8001fd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d032      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d022      	beq.n	800204e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2205      	movs	r2, #5
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	d307      	bcc.n	800203c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f2      	bne.n	8002020 <HAL_DMA_IRQHandler+0x2cc>
 800203a:	e000      	b.n	800203e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800203c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
 800205e:	e000      	b.n	8002062 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002060:	bf00      	nop
    }
  }
}
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002076:	b2db      	uxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3b10      	subs	r3, #16
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800209e:	4a13      	ldr	r2, [pc, #76]	; (80020ec <DMA_CalcBaseAndBitshift+0x68>)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d909      	bls.n	80020c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ba:	f023 0303 	bic.w	r3, r3, #3
 80020be:	1d1a      	adds	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
 80020c4:	e007      	b.n	80020d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	aaaaaaab 	.word	0xaaaaaaab
 80020ec:	0800f2ac 	.word	0x0800f2ac

080020f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11f      	bne.n	800214a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d856      	bhi.n	80021be <DMA_CheckFifoParam+0xce>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <DMA_CheckFifoParam+0x28>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002129 	.word	0x08002129
 800211c:	0800213b 	.word	0x0800213b
 8002120:	08002129 	.word	0x08002129
 8002124:	080021bf 	.word	0x080021bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d046      	beq.n	80021c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002138:	e043      	b.n	80021c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002142:	d140      	bne.n	80021c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002148:	e03d      	b.n	80021c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002152:	d121      	bne.n	8002198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d837      	bhi.n	80021ca <DMA_CheckFifoParam+0xda>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <DMA_CheckFifoParam+0x70>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002177 	.word	0x08002177
 8002168:	08002171 	.word	0x08002171
 800216c:	08002189 	.word	0x08002189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e030      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d025      	beq.n	80021ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002186:	e022      	b.n	80021ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002190:	d11f      	bne.n	80021d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002196:	e01c      	b.n	80021d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d903      	bls.n	80021a6 <DMA_CheckFifoParam+0xb6>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d003      	beq.n	80021ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a4:	e018      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      break;
 80021aa:	e015      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00e      	beq.n	80021d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e00b      	b.n	80021d6 <DMA_CheckFifoParam+0xe6>
      break;
 80021be:	bf00      	nop
 80021c0:	e00a      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e008      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e006      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e004      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e002      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
    }
  } 
  
  return status; 
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e159      	b.n	80024b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8148 	bne.w	80024b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d005      	beq.n	800223a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	2b02      	cmp	r3, #2
 8002238:	d130      	bne.n	800229c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0201 	and.w	r2, r3, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d017      	beq.n	80022d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d123      	bne.n	800232c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	08da      	lsrs	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a2 	beq.w	80024b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_GPIO_Init+0x2e8>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_GPIO_Init+0x2e8>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <HAL_GPIO_Init+0x2e8>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x2ec>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a49      	ldr	r2, [pc, #292]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x202>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a48      	ldr	r2, [pc, #288]	; (80024dc <HAL_GPIO_Init+0x2f4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x1fe>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a47      	ldr	r2, [pc, #284]	; (80024e0 <HAL_GPIO_Init+0x2f8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x1fa>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a46      	ldr	r2, [pc, #280]	; (80024e4 <HAL_GPIO_Init+0x2fc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x1f6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <HAL_GPIO_Init+0x300>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x1f2>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e008      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023da:	2307      	movs	r3, #7
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023de:	2303      	movs	r3, #3
 80023e0:	e004      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x204>
 80023ea:	2300      	movs	r3, #0
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f002 0203 	and.w	r2, r2, #3
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	4093      	lsls	r3, r2
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fc:	4935      	ldr	r1, [pc, #212]	; (80024d4 <HAL_GPIO_Init+0x2ec>)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_GPIO_Init+0x304>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242e:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_GPIO_Init+0x304>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_GPIO_Init+0x304>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <HAL_GPIO_Init+0x304>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <HAL_GPIO_Init+0x304>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002482:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_GPIO_Init+0x304>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_GPIO_Init+0x304>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_GPIO_Init+0x304>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b0f      	cmp	r3, #15
 80024bc:	f67f aea2 	bls.w	8002204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40013800 	.word	0x40013800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40020800 	.word	0x40020800
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800250c:	e003      	b.n	8002516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f806 	bl	8002554 <HAL_GPIO_EXTI_Callback>
  }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e12b      	b.n	80027d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fbe4 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d0:	f004 fb14 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 80025d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a81      	ldr	r2, [pc, #516]	; (80027e0 <HAL_I2C_Init+0x274>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d807      	bhi.n	80025f0 <HAL_I2C_Init+0x84>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a80      	ldr	r2, [pc, #512]	; (80027e4 <HAL_I2C_Init+0x278>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	bf94      	ite	ls
 80025e8:	2301      	movls	r3, #1
 80025ea:	2300      	movhi	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e006      	b.n	80025fe <HAL_I2C_Init+0x92>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a7d      	ldr	r2, [pc, #500]	; (80027e8 <HAL_I2C_Init+0x27c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0e7      	b.n	80027d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4a78      	ldr	r2, [pc, #480]	; (80027ec <HAL_I2C_Init+0x280>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a6a      	ldr	r2, [pc, #424]	; (80027e0 <HAL_I2C_Init+0x274>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d802      	bhi.n	8002640 <HAL_I2C_Init+0xd4>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	e009      	b.n	8002654 <HAL_I2C_Init+0xe8>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	4a69      	ldr	r2, [pc, #420]	; (80027f0 <HAL_I2C_Init+0x284>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	3301      	adds	r3, #1
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	495c      	ldr	r1, [pc, #368]	; (80027e0 <HAL_I2C_Init+0x274>)
 8002670:	428b      	cmp	r3, r1
 8002672:	d819      	bhi.n	80026a8 <HAL_I2C_Init+0x13c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e59      	subs	r1, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002688:	400b      	ands	r3, r1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_I2C_Init+0x138>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e59      	subs	r1, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fbb1 f3f3 	udiv	r3, r1, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a2:	e051      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 80026a4:	2304      	movs	r3, #4
 80026a6:	e04f      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d111      	bne.n	80026d4 <HAL_I2C_Init+0x168>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e012      	b.n	80026fa <HAL_I2C_Init+0x18e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	0099      	lsls	r1, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Init+0x196>
 80026fe:	2301      	movs	r3, #1
 8002700:	e022      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10e      	bne.n	8002728 <HAL_I2C_Init+0x1bc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1e58      	subs	r0, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	440b      	add	r3, r1
 8002718:	fbb0 f3f3 	udiv	r3, r0, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002726:	e00f      	b.n	8002748 <HAL_I2C_Init+0x1dc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	6809      	ldr	r1, [r1, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002776:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6911      	ldr	r1, [r2, #16]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	430b      	orrs	r3, r1
 800278a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	000186a0 	.word	0x000186a0
 80027e4:	001e847f 	.word	0x001e847f
 80027e8:	003d08ff 	.word	0x003d08ff
 80027ec:	431bde83 	.word	0x431bde83
 80027f0:	10624dd3 	.word	0x10624dd3

080027f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4603      	mov	r3, r0
 8002804:	817b      	strh	r3, [r7, #10]
 8002806:	460b      	mov	r3, r1
 8002808:	813b      	strh	r3, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800280e:	f7ff f8bf 	bl	8001990 <HAL_GetTick>
 8002812:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b20      	cmp	r3, #32
 800281e:	f040 80d9 	bne.w	80029d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2319      	movs	r3, #25
 8002828:	2201      	movs	r2, #1
 800282a:	496d      	ldr	r1, [pc, #436]	; (80029e0 <HAL_I2C_Mem_Write+0x1ec>)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f002 f90d 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
 800283a:	e0cc      	b.n	80029d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_I2C_Mem_Write+0x56>
 8002846:	2302      	movs	r3, #2
 8002848:	e0c5      	b.n	80029d6 <HAL_I2C_Mem_Write+0x1e2>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d007      	beq.n	8002870 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2221      	movs	r2, #33	; 0x21
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a3a      	ldr	r2, [r7, #32]
 800289a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_I2C_Mem_Write+0x1f0>)
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b2:	88f8      	ldrh	r0, [r7, #6]
 80028b4:	893a      	ldrh	r2, [r7, #8]
 80028b6:	8979      	ldrh	r1, [r7, #10]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	4603      	mov	r3, r0
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f001 fe9c 	bl	8004600 <I2C_RequestMemoryWrite>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d052      	beq.n	8002974 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e081      	b.n	80029d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f002 f98e 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d11b      	bne.n	8002974 <HAL_I2C_Mem_Write+0x180>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1aa      	bne.n	80028d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f002 f97a 	bl	8004c7a <I2C_WaitOnBTFFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e016      	b.n	80029d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	00100002 	.word	0x00100002
 80029e4:	ffff0000 	.word	0xffff0000

080029e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08c      	sub	sp, #48	; 0x30
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a02:	f7fe ffc5 	bl	8001990 <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	f040 8208 	bne.w	8002e26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2319      	movs	r3, #25
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	497b      	ldr	r1, [pc, #492]	; (8002c0c <HAL_I2C_Mem_Read+0x224>)
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f002 f813 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e1fb      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Mem_Read+0x56>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e1f4      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d007      	beq.n	8002a64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2222      	movs	r2, #34	; 0x22
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2240      	movs	r2, #64	; 0x40
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_I2C_Mem_Read+0x228>)
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa6:	88f8      	ldrh	r0, [r7, #6]
 8002aa8:	893a      	ldrh	r2, [r7, #8]
 8002aaa:	8979      	ldrh	r1, [r7, #10]
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f001 fe38 	bl	800472c <I2C_RequestMemoryRead>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1b0      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d113      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e184      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d11b      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e164      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d11b      	bne.n	8002b76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	e144      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b8c:	e138      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	f200 80f1 	bhi.w	8002d7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d123      	bne.n	8002be8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f002 f8db 	bl	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e139      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002be6:	e10b      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d14e      	bne.n	8002c8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <HAL_I2C_Mem_Read+0x22c>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f001 ff26 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e10e      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
 8002c0a:	bf00      	nop
 8002c0c:	00100002 	.word	0x00100002
 8002c10:	ffff0000 	.word	0xffff0000
 8002c14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c8c:	e0b8      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	2200      	movs	r2, #0
 8002c96:	4966      	ldr	r1, [pc, #408]	; (8002e30 <HAL_I2C_Mem_Read+0x448>)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f001 fed7 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0bf      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	494f      	ldr	r1, [pc, #316]	; (8002e30 <HAL_I2C_Mem_Read+0x448>)
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f001 fea9 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e091      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d78:	e042      	b.n	8002e00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f001 ffee 	bl	8004d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e04c      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d118      	bne.n	8002e00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f aec2 	bne.w	8002b8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00010004 	.word	0x00010004

08002e34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d003      	beq.n	8002e6c <HAL_I2C_EV_IRQHandler+0x38>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	f040 80c1 	bne.w	8002fee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e8c:	d003      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x62>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_EV_IRQHandler+0x66>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x68>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f000 8132 	beq.w	8003106 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x92>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	0a5b      	lsrs	r3, r3, #9
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f001 ffd6 	bl	8004e6a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fd83 	bl	80039ca <I2C_Master_SB>
 8002ec4:	e092      	b.n	8002fec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	0a5b      	lsrs	r3, r3, #9
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fdf9 	bl	8003ad6 <I2C_Master_ADD10>
 8002ee4:	e082      	b.n	8002fec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0xd2>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	0a5b      	lsrs	r3, r3, #9
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fe13 	bl	8003b2a <I2C_Master_ADDR>
 8002f04:	e072      	b.n	8002fec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d03b      	beq.n	8002f8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	f000 80f3 	beq.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	09db      	lsrs	r3, r3, #7
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <HAL_I2C_EV_IRQHandler+0x11c>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	0a9b      	lsrs	r3, r3, #10
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_I2C_EV_IRQHandler+0x11c>
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f9f3 	bl	8003334 <I2C_MasterTransmit_TXE>
 8002f4e:	e04d      	b.n	8002fec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80d6 	beq.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	0a5b      	lsrs	r3, r3, #9
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80cf 	beq.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f6c:	7bbb      	ldrb	r3, [r7, #14]
 8002f6e:	2b21      	cmp	r3, #33	; 0x21
 8002f70:	d103      	bne.n	8002f7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa7a 	bl	800346c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f78:	e0c7      	b.n	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	f040 80c4 	bne.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fae8 	bl	8003558 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f88:	e0bf      	b.n	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f98:	f000 80b7 	beq.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00f      	beq.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x194>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	0a9b      	lsrs	r3, r3, #10
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x194>
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fb5d 	bl	8003680 <I2C_MasterReceive_RXNE>
 8002fc6:	e011      	b.n	8002fec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 809a 	beq.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	0a5b      	lsrs	r3, r3, #9
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8093 	beq.w	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fc06 	bl	80037f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fea:	e08e      	b.n	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fec:	e08d      	b.n	800310a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e007      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x20e>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00c      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003038:	69b9      	ldr	r1, [r7, #24]
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 ffc4 	bl	8003fc8 <I2C_Slave_ADDR>
 8003040:	e066      	b.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x22e>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	0a5b      	lsrs	r3, r3, #9
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fffe 	bl	800405c <I2C_Slave_STOPF>
 8003060:	e056      	b.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003062:	7bbb      	ldrb	r3, [r7, #14]
 8003064:	2b21      	cmp	r3, #33	; 0x21
 8003066:	d002      	beq.n	800306e <HAL_I2C_EV_IRQHandler+0x23a>
 8003068:	7bbb      	ldrb	r3, [r7, #14]
 800306a:	2b29      	cmp	r3, #41	; 0x29
 800306c:	d125      	bne.n	80030ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	09db      	lsrs	r3, r3, #7
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00f      	beq.n	800309a <HAL_I2C_EV_IRQHandler+0x266>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	0a9b      	lsrs	r3, r3, #10
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_I2C_EV_IRQHandler+0x266>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 feda 	bl	8003e4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003098:	e039      	b.n	800310e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d033      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x2da>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02d      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 ff07 	bl	8003ec6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b8:	e029      	b.n	800310e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00f      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	0a9b      	lsrs	r3, r3, #10
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 ff12 	bl	8003f08 <I2C_SlaveReceive_RXNE>
 80030e4:	e014      	b.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0a5b      	lsrs	r3, r3, #9
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 ff40 	bl	8003f84 <I2C_SlaveReceive_BTF>
 8003104:	e004      	b.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003106:	bf00      	nop
 8003108:	e002      	b.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310a:	bf00      	nop
 800310c:	e000      	b.n	8003110 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800310e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b08a      	sub	sp, #40	; 0x28
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800312e:	2300      	movs	r3, #0
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003138:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <HAL_I2C_ER_IRQHandler+0x4e>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003162:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	0a5b      	lsrs	r3, r3, #9
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00e      	beq.n	800318e <HAL_I2C_ER_IRQHandler+0x78>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800318c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	0a9b      	lsrs	r3, r3, #10
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d03f      	beq.n	800321a <HAL_I2C_ER_IRQHandler+0x104>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d039      	beq.n	800321a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80031a6:	7efb      	ldrb	r3, [r7, #27]
 80031a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80031c0:	7ebb      	ldrb	r3, [r7, #26]
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d112      	bne.n	80031ec <HAL_I2C_ER_IRQHandler+0xd6>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10f      	bne.n	80031ec <HAL_I2C_ER_IRQHandler+0xd6>
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	2b21      	cmp	r3, #33	; 0x21
 80031d0:	d008      	beq.n	80031e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b29      	cmp	r3, #41	; 0x29
 80031d6:	d005      	beq.n	80031e4 <HAL_I2C_ER_IRQHandler+0xce>
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b28      	cmp	r3, #40	; 0x28
 80031dc:	d106      	bne.n	80031ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b21      	cmp	r3, #33	; 0x21
 80031e2:	d103      	bne.n	80031ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f001 f869 	bl	80042bc <I2C_Slave_AF>
 80031ea:	e016      	b.n	800321a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031fe:	7efb      	ldrb	r3, [r7, #27]
 8003200:	2b10      	cmp	r3, #16
 8003202:	d002      	beq.n	800320a <HAL_I2C_ER_IRQHandler+0xf4>
 8003204:	7efb      	ldrb	r3, [r7, #27]
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d107      	bne.n	800321a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	0adb      	lsrs	r3, r3, #11
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00e      	beq.n	8003244 <HAL_I2C_ER_IRQHandler+0x12e>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003242:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 f8a0 	bl	800439c <I2C_ITError>
  }
}
 800325c:	bf00      	nop
 800325e:	3728      	adds	r7, #40	; 0x28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
 80032c0:	4613      	mov	r3, r2
 80032c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d150      	bne.n	80033fc <I2C_MasterTransmit_TXE+0xc8>
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d14d      	bne.n	80033fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b08      	cmp	r3, #8
 8003364:	d01d      	beq.n	80033a2 <I2C_MasterTransmit_TXE+0x6e>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b20      	cmp	r3, #32
 800336a:	d01a      	beq.n	80033a2 <I2C_MasterTransmit_TXE+0x6e>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003372:	d016      	beq.n	80033a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003382:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2211      	movs	r2, #17
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff62 	bl	8003264 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033a0:	e060      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b40      	cmp	r3, #64	; 0x40
 80033da:	d107      	bne.n	80033ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff7d 	bl	80032e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ea:	e03b      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff35 	bl	8003264 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fa:	e033      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b21      	cmp	r3, #33	; 0x21
 8003400:	d005      	beq.n	800340e <I2C_MasterTransmit_TXE+0xda>
 8003402:	7bbb      	ldrb	r3, [r7, #14]
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d12d      	bne.n	8003464 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b22      	cmp	r3, #34	; 0x22
 800340c:	d12a      	bne.n	8003464 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003426:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003428:	e01c      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d103      	bne.n	800343e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f88e 	bl	8003558 <I2C_MemoryTransmit_TXE_BTF>
}
 800343c:	e012      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003462:	e7ff      	b.n	8003464 <I2C_MasterTransmit_TXE+0x130>
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b21      	cmp	r3, #33	; 0x21
 8003484:	d164      	bne.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d012      	beq.n	80034b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034b4:	e04c      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d01d      	beq.n	80034f8 <I2C_MasterTransmit_BTF+0x8c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d01a      	beq.n	80034f8 <I2C_MasterTransmit_BTF+0x8c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d016      	beq.n	80034f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2211      	movs	r2, #17
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff feb7 	bl	8003264 <HAL_I2C_MasterTxCpltCallback>
}
 80034f6:	e02b      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003506:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d107      	bne.n	8003542 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fed2 	bl	80032e4 <HAL_I2C_MemTxCpltCallback>
}
 8003540:	e006      	b.n	8003550 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fe8a 	bl	8003264 <HAL_I2C_MasterTxCpltCallback>
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11d      	bne.n	80035ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10b      	bne.n	8003590 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	b2da      	uxtb	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	1c9a      	adds	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800358e:	e073      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	b29b      	uxth	r3, r3
 8003596:	121b      	asrs	r3, r3, #8
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035aa:	e065      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10b      	bne.n	80035cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035ca:	e055      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d151      	bne.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b22      	cmp	r3, #34	; 0x22
 80035d8:	d10d      	bne.n	80035f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035f4:	e040      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b21      	cmp	r3, #33	; 0x21
 8003604:	d112      	bne.n	800362c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800362a:	e025      	b.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d120      	bne.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d11d      	bne.n	8003678 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800364a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fe36 	bl	80032e4 <HAL_I2C_MemTxCpltCallback>
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b22      	cmp	r3, #34	; 0x22
 8003692:	f040 80ac 	bne.w	80037ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d921      	bls.n	80036e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	f040 808c 	bne.w	80037ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036e6:	e082      	b.n	80037ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d075      	beq.n	80037dc <I2C_MasterReceive_RXNE+0x15c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d002      	beq.n	80036fc <I2C_MasterReceive_RXNE+0x7c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d16f      	bne.n	80037dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 fafd 	bl	8004cfc <I2C_WaitOnSTOPRequestThroughIT>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d142      	bne.n	800378e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003726:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d10a      	bne.n	8003778 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fdc1 	bl	80032f8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003776:	e03a      	b.n	80037ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2212      	movs	r2, #18
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fd76 	bl	8003278 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800378c:	e02f      	b.n	80037ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800379c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fd99 	bl	800330c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037da:	e008      	b.n	80037ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	605a      	str	r2, [r3, #4]
}
 80037ec:	e7ff      	b.n	80037ee <I2C_MasterReceive_RXNE+0x16e>
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b04      	cmp	r3, #4
 800380c:	d11b      	bne.n	8003846 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003844:	e0bd      	b.n	80039c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d129      	bne.n	80038a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d00a      	beq.n	800387c <I2C_MasterReceive_BTF+0x86>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d007      	beq.n	800387c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038a2:	e08e      	b.n	80039c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d176      	bne.n	800399c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d002      	beq.n	80038ba <I2C_MasterReceive_BTF+0xc4>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d108      	bne.n	80038cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e019      	b.n	8003900 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d002      	beq.n	80038d8 <I2C_MasterReceive_BTF+0xe2>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d108      	bne.n	80038ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e00a      	b.n	8003900 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d007      	beq.n	8003900 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800395a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d10a      	bne.n	8003986 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fcba 	bl	80032f8 <HAL_I2C_MemRxCpltCallback>
}
 8003984:	e01d      	b.n	80039c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2212      	movs	r2, #18
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fc6f 	bl	8003278 <HAL_I2C_MasterRxCpltCallback>
}
 800399a:	e012      	b.n	80039c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d117      	bne.n	8003a0e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039f8:	e067      	b.n	8003aca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]
}
 8003a0c:	e05d      	b.n	8003aca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a16:	d133      	bne.n	8003a80 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b21      	cmp	r3, #33	; 0x21
 8003a22:	d109      	bne.n	8003a38 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	e008      	b.n	8003a4a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <I2C_Master_SB+0x92>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d032      	beq.n	8003aca <I2C_Master_SB+0x100>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02d      	beq.n	8003aca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7c:	605a      	str	r2, [r3, #4]
}
 8003a7e:	e024      	b.n	8003aca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10e      	bne.n	8003aa6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	11db      	asrs	r3, r3, #7
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0306 	and.w	r3, r3, #6
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f063 030f 	orn	r3, r3, #15
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]
}
 8003aa4:	e011      	b.n	8003aca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10d      	bne.n	8003aca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	11db      	asrs	r3, r3, #7
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0306 	and.w	r3, r3, #6
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f063 030e 	orn	r3, r3, #14
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <I2C_Master_ADD10+0x26>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d108      	bne.n	8003b0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <I2C_Master_ADD10+0x48>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1c:	605a      	str	r2, [r3, #4]
  }
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b091      	sub	sp, #68	; 0x44
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b22      	cmp	r3, #34	; 0x22
 8003b52:	f040 8169 	bne.w	8003e28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <I2C_Master_ADDR+0x54>
 8003b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d10b      	bne.n	8003b7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b66:	2300      	movs	r3, #0
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	e160      	b.n	8003e40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11d      	bne.n	8003bc2 <I2C_Master_ADDR+0x98>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b8e:	d118      	bne.n	8003bc2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003bc0:	e13e      	b.n	8003e40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e115      	b.n	8003e20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	f040 808a 	bne.w	8003d14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c06:	d137      	bne.n	8003c78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c26:	d113      	bne.n	8003c50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	e0e7      	b.n	8003e20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c50:	2300      	movs	r3, #0
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e0d3      	b.n	8003e20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d02e      	beq.n	8003cdc <I2C_Master_ADDR+0x1b2>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d02b      	beq.n	8003cdc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	2b12      	cmp	r3, #18
 8003c88:	d102      	bne.n	8003c90 <I2C_Master_ADDR+0x166>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d125      	bne.n	8003cdc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d00e      	beq.n	8003cb4 <I2C_Master_ADDR+0x18a>
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d00b      	beq.n	8003cb4 <I2C_Master_ADDR+0x18a>
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d008      	beq.n	8003cb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e007      	b.n	8003cc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	e0a1      	b.n	8003e20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e085      	b.n	8003e20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d14d      	bne.n	8003dba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d016      	beq.n	8003d52 <I2C_Master_ADDR+0x228>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d013      	beq.n	8003d52 <I2C_Master_ADDR+0x228>
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d010      	beq.n	8003d52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e007      	b.n	8003d62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d70:	d117      	bne.n	8003da2 <I2C_Master_ADDR+0x278>
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d78:	d00b      	beq.n	8003d92 <I2C_Master_ADDR+0x268>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d008      	beq.n	8003d92 <I2C_Master_ADDR+0x268>
 8003d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d005      	beq.n	8003d92 <I2C_Master_ADDR+0x268>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d002      	beq.n	8003d92 <I2C_Master_ADDR+0x268>
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d107      	bne.n	8003da2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003da0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	e032      	b.n	8003e20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd8:	d117      	bne.n	8003e0a <I2C_Master_ADDR+0x2e0>
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de0:	d00b      	beq.n	8003dfa <I2C_Master_ADDR+0x2d0>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d008      	beq.n	8003dfa <I2C_Master_ADDR+0x2d0>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d005      	beq.n	8003dfa <I2C_Master_ADDR+0x2d0>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d002      	beq.n	8003dfa <I2C_Master_ADDR+0x2d0>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d107      	bne.n	8003e0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e26:	e00b      	b.n	8003e40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
}
 8003e3e:	e7ff      	b.n	8003e40 <I2C_Master_ADDR+0x316>
 8003e40:	bf00      	nop
 8003e42:	3744      	adds	r7, #68	; 0x44
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02b      	beq.n	8003ebe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d114      	bne.n	8003ebe <I2C_SlaveTransmit_TXE+0x72>
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b29      	cmp	r3, #41	; 0x29
 8003e98:	d111      	bne.n	8003ebe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2221      	movs	r2, #33	; 0x21
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2228      	movs	r2, #40	; 0x28
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff f9e7 	bl	800328c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d011      	beq.n	8003efc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02c      	beq.n	8003f7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d114      	bne.n	8003f7c <I2C_SlaveReceive_RXNE+0x74>
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b2a      	cmp	r3, #42	; 0x2a
 8003f56:	d111      	bne.n	8003f7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2222      	movs	r2, #34	; 0x22
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2228      	movs	r2, #40	; 0x28
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff f992 	bl	80032a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe2:	2b28      	cmp	r3, #40	; 0x28
 8003fe4:	d127      	bne.n	8004036 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	09db      	lsrs	r3, r3, #7
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	81bb      	strh	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004028:	89ba      	ldrh	r2, [r7, #12]
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff f940 	bl	80032b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004034:	e00e      	b.n	8004054 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800407a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b8:	d172      	bne.n	80041a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b22      	cmp	r3, #34	; 0x22
 80040be:	d002      	beq.n	80040c6 <I2C_Slave_STOPF+0x6a>
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b2a      	cmp	r3, #42	; 0x2a
 80040c4:	d135      	bne.n	8004132 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd ffb2 	bl	8002068 <HAL_DMA_GetState>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d049      	beq.n	800419e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	4a69      	ldr	r2, [pc, #420]	; (80042b4 <I2C_Slave_STOPF+0x258>)
 8004110:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd fdfa 	bl	8001d10 <HAL_DMA_Abort_IT>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03d      	beq.n	800419e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800412c:	4610      	mov	r0, r2
 800412e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004130:	e035      	b.n	800419e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004164:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd ff7c 	bl	8002068 <HAL_DMA_GetState>
 8004170:	4603      	mov	r3, r0
 8004172:	2b01      	cmp	r3, #1
 8004174:	d014      	beq.n	80041a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	4a4e      	ldr	r2, [pc, #312]	; (80042b4 <I2C_Slave_STOPF+0x258>)
 800417c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd fdc4 	bl	8001d10 <HAL_DMA_Abort_IT>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004198:	4610      	mov	r0, r2
 800419a:	4798      	blx	r3
 800419c:	e000      	b.n	80041a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800419e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03e      	beq.n	8004228 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d112      	bne.n	80041de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d112      	bne.n	8004212 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f043 0204 	orr.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8b3 	bl	800439c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004236:	e039      	b.n	80042ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b2a      	cmp	r3, #42	; 0x2a
 800423c:	d109      	bne.n	8004252 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2228      	movs	r2, #40	; 0x28
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff f827 	bl	80032a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b28      	cmp	r3, #40	; 0x28
 800425c:	d111      	bne.n	8004282 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <I2C_Slave_STOPF+0x25c>)
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff f828 	bl	80032d0 <HAL_I2C_ListenCpltCallback>
}
 8004280:	e014      	b.n	80042ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	2b22      	cmp	r3, #34	; 0x22
 8004288:	d002      	beq.n	8004290 <I2C_Slave_STOPF+0x234>
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b22      	cmp	r3, #34	; 0x22
 800428e:	d10d      	bne.n	80042ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe fffa 	bl	80032a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	080048fd 	.word	0x080048fd
 80042b8:	ffff0000 	.word	0xffff0000

080042bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d002      	beq.n	80042de <I2C_Slave_AF+0x22>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d129      	bne.n	8004332 <I2C_Slave_AF+0x76>
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b28      	cmp	r3, #40	; 0x28
 80042e2:	d126      	bne.n	8004332 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <I2C_Slave_AF+0xdc>)
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004302:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe ffd0 	bl	80032d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004330:	e02e      	b.n	8004390 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b21      	cmp	r3, #33	; 0x21
 8004336:	d126      	bne.n	8004386 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a17      	ldr	r2, [pc, #92]	; (8004398 <I2C_Slave_AF+0xdc>)
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2221      	movs	r2, #33	; 0x21
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004362:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800436c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fe ff84 	bl	800328c <HAL_I2C_SlaveTxCpltCallback>
}
 8004384:	e004      	b.n	8004390 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800438e:	615a      	str	r2, [r3, #20]
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	ffff0000 	.word	0xffff0000

0800439c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d002      	beq.n	80043c0 <I2C_ITError+0x24>
 80043ba:	7bbb      	ldrb	r3, [r7, #14]
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d10a      	bne.n	80043d6 <I2C_ITError+0x3a>
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b22      	cmp	r3, #34	; 0x22
 80043c4:	d107      	bne.n	80043d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043dc:	2b28      	cmp	r3, #40	; 0x28
 80043de:	d107      	bne.n	80043f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2228      	movs	r2, #40	; 0x28
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043ee:	e015      	b.n	800441c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fe:	d00a      	beq.n	8004416 <I2C_ITError+0x7a>
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b60      	cmp	r3, #96	; 0x60
 8004404:	d007      	beq.n	8004416 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442a:	d162      	bne.n	80044f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d020      	beq.n	800448c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	4a6a      	ldr	r2, [pc, #424]	; (80045f8 <I2C_ITError+0x25c>)
 8004450:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fc5a 	bl	8001d10 <HAL_DMA_Abort_IT>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8089 	beq.w	8004576 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004486:	4610      	mov	r0, r2
 8004488:	4798      	blx	r3
 800448a:	e074      	b.n	8004576 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	4a59      	ldr	r2, [pc, #356]	; (80045f8 <I2C_ITError+0x25c>)
 8004492:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fc39 	bl	8001d10 <HAL_DMA_Abort_IT>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d068      	beq.n	8004576 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d10b      	bne.n	80044ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
 80044f0:	e041      	b.n	8004576 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b60      	cmp	r3, #96	; 0x60
 80044fc:	d125      	bne.n	800454a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d10b      	bne.n	8004532 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fe feec 	bl	8003320 <HAL_I2C_AbortCpltCallback>
 8004548:	e015      	b.n	8004576 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d10b      	bne.n	8004570 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fe fecb 	bl	800330c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10e      	bne.n	80045a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d113      	bne.n	80045f0 <I2C_ITError+0x254>
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b28      	cmp	r3, #40	; 0x28
 80045cc:	d110      	bne.n	80045f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <I2C_ITError+0x260>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fe fe70 	bl	80032d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	080048fd 	.word	0x080048fd
 80045fc:	ffff0000 	.word	0xffff0000

08004600 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004628:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2200      	movs	r2, #0
 8004632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fa08 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004650:	d103      	bne.n	800465a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e05f      	b.n	800471e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	6a3a      	ldr	r2, [r7, #32]
 8004672:	492d      	ldr	r1, [pc, #180]	; (8004728 <I2C_RequestMemoryWrite+0x128>)
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fa40 	bl	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e04c      	b.n	800471e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	6a39      	ldr	r1, [r7, #32]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 faaa 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d107      	bne.n	80046c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e02b      	b.n	800471e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046cc:	893b      	ldrh	r3, [r7, #8]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e021      	b.n	800471c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e8:	6a39      	ldr	r1, [r7, #32]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fa84 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d107      	bne.n	800470e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e005      	b.n	800471e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004712:	893b      	ldrh	r3, [r7, #8]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	00010002 	.word	0x00010002

0800472c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2200      	movs	r2, #0
 800476e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f96a 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478c:	d103      	bne.n	8004796 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0aa      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800479a:	897b      	ldrh	r3, [r7, #10]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	4952      	ldr	r1, [pc, #328]	; (80048f8 <I2C_RequestMemoryRead+0x1cc>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f9a2 	bl	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e097      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	6a39      	ldr	r1, [r7, #32]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fa0c 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d107      	bne.n	80047fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e076      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004808:	893b      	ldrh	r3, [r7, #8]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	611a      	str	r2, [r3, #16]
 8004812:	e021      	b.n	8004858 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004814:	893b      	ldrh	r3, [r7, #8]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	b29b      	uxth	r3, r3
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	6a39      	ldr	r1, [r7, #32]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f9e6 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b04      	cmp	r3, #4
 8004838:	d107      	bne.n	800484a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e050      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800484e:	893b      	ldrh	r3, [r7, #8]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	6a39      	ldr	r1, [r7, #32]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f9cb 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e035      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004892:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	2200      	movs	r2, #0
 800489c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f8d3 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00d      	beq.n	80048c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d103      	bne.n	80048c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e013      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048c8:	897b      	ldrh	r3, [r7, #10]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	4906      	ldr	r1, [pc, #24]	; (80048f8 <I2C_RequestMemoryRead+0x1cc>)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f90b 	bl	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	00010002 	.word	0x00010002

080048fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004916:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <I2C_DMAAbort+0x148>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	4a4a      	ldr	r2, [pc, #296]	; (8004a48 <I2C_DMAAbort+0x14c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0a1a      	lsrs	r2, r3, #8
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00da      	lsls	r2, r3, #3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0220 	orr.w	r2, r3, #32
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004942:	e00a      	b.n	800495a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3b01      	subs	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004958:	d0ea      	beq.n	8004930 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	2200      	movs	r2, #0
 8004968:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	2200      	movs	r2, #0
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004988:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499c:	2200      	movs	r2, #0
 800499e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	2200      	movs	r2, #0
 80049ae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b60      	cmp	r3, #96	; 0x60
 80049ca:	d10e      	bne.n	80049ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	f7fe fc9c 	bl	8003320 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049e8:	e027      	b.n	8004a3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f0:	2b28      	cmp	r3, #40	; 0x28
 80049f2:	d117      	bne.n	8004a24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2228      	movs	r2, #40	; 0x28
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a22:	e007      	b.n	8004a34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a34:	6978      	ldr	r0, [r7, #20]
 8004a36:	f7fe fc69 	bl	800330c <HAL_I2C_ErrorCallback>
}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200000b8 	.word	0x200000b8
 8004a48:	14f8b589 	.word	0x14f8b589

08004a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5c:	e025      	b.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d021      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fc ff93 	bl	8001990 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e023      	b.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10d      	bne.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	43da      	mvns	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	e00c      	b.n	8004aea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d0b6      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b08:	e051      	b.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d123      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e046      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d021      	beq.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fc ff11 	bl	8001990 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d116      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f043 0220 	orr.w	r2, r3, #32
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e020      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10c      	bne.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bf14      	ite	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	2300      	moveq	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	e00b      	b.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d18d      	bne.n	8004b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c04:	e02d      	b.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f900 	bl	8004e0c <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e02d      	b.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d021      	beq.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fc feb7 	bl	8001990 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d116      	bne.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e007      	b.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6c:	2b80      	cmp	r3, #128	; 0x80
 8004c6e:	d1ca      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c86:	e02d      	b.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f8bf 	bl	8004e0c <I2C_IsAcknowledgeFailed>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e02d      	b.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d021      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fc fe76 	bl	8001990 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d1ca      	bne.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0a1a      	lsrs	r2, r3, #8
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0220 	orr.w	r2, r3, #32
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e008      	b.n	8004d4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d48:	d0e9      	beq.n	8004d1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	200000b8 	.word	0x200000b8
 8004d5c:	14f8b589 	.word	0x14f8b589

08004d60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d6c:	e042      	b.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d119      	bne.n	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0210 	mvn.w	r2, #16
 8004d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e029      	b.n	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db0:	f7fc fdee 	bl	8001990 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e007      	b.n	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d1b5      	bne.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d11b      	bne.n	8004e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f043 0204 	orr.w	r2, r3, #4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e7a:	d103      	bne.n	8004e84 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e82:	e007      	b.n	8004e94 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e8c:	d102      	bne.n	8004e94 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2208      	movs	r2, #8
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	b08f      	sub	sp, #60	; 0x3c
 8004ea4:	af0a      	add	r7, sp, #40	; 0x28
 8004ea6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e10f      	b.n	80050d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fc fcab 	bl	8001828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f002 fd74 	bl	80079de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	687e      	ldr	r6, [r7, #4]
 8004efe:	466d      	mov	r5, sp
 8004f00:	f106 0410 	add.w	r4, r6, #16
 8004f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f14:	1d33      	adds	r3, r6, #4
 8004f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f18:	6838      	ldr	r0, [r7, #0]
 8004f1a:	f002 fc4b 	bl	80077b4 <USB_CoreInit>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0d0      	b.n	80050d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fd62 	bl	8007a00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	e04a      	b.n	8004fd8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	333d      	adds	r3, #61	; 0x3d
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	333c      	adds	r3, #60	; 0x3c
 8004f66:	7bfa      	ldrb	r2, [r7, #15]
 8004f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f6a:	7bfa      	ldrb	r2, [r7, #15]
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	b298      	uxth	r0, r3
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3344      	adds	r3, #68	; 0x44
 8004f7e:	4602      	mov	r2, r0
 8004f80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f82:	7bfa      	ldrb	r2, [r7, #15]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3340      	adds	r3, #64	; 0x40
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f96:	7bfa      	ldrb	r2, [r7, #15]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	3348      	adds	r3, #72	; 0x48
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	334c      	adds	r3, #76	; 0x4c
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3354      	adds	r3, #84	; 0x54
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3af      	bcc.n	8004f42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e044      	b.n	8005072 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	3301      	adds	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d3b5      	bcc.n	8004fe8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	687e      	ldr	r6, [r7, #4]
 8005084:	466d      	mov	r5, sp
 8005086:	f106 0410 	add.w	r4, r6, #16
 800508a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800508c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800508e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005096:	e885 0003 	stmia.w	r5, {r0, r1}
 800509a:	1d33      	adds	r3, r6, #4
 800509c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800509e:	6838      	ldr	r0, [r7, #0]
 80050a0:	f002 fcfa 	bl	8007a98 <USB_DevInit>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e00d      	b.n	80050d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f003 fe49 	bl	8008d62 <USB_DevDisconnect>

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_PCD_Start+0x1c>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e020      	b.n	8005138 <HAL_PCD_Start+0x5e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	2b01      	cmp	r3, #1
 8005104:	d109      	bne.n	800511a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800510a:	2b01      	cmp	r3, #1
 800510c:	d005      	beq.n	800511a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f002 fc4c 	bl	80079bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f003 fdf9 	bl	8008d20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b08d      	sub	sp, #52	; 0x34
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f003 feb7 	bl	8008eca <USB_GetMode>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 848a 	bne.w	8005a78 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f003 fe1b 	bl	8008da4 <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8480 	beq.w	8005a76 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f003 fe08 	bl	8008da4 <USB_ReadInterrupts>
 8005194:	4603      	mov	r3, r0
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d107      	bne.n	80051ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f002 0202 	and.w	r2, r2, #2
 80051ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fdf6 	bl	8008da4 <USB_ReadInterrupts>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d161      	bne.n	8005286 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0210 	bic.w	r2, r2, #16
 80051d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 020f 	and.w	r2, r3, #15
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	3304      	adds	r3, #4
 80051f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	0c5b      	lsrs	r3, r3, #17
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d124      	bne.n	8005248 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d035      	beq.n	8005276 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	6a38      	ldr	r0, [r7, #32]
 800521e:	f003 fc2d 	bl	8008a7c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800522e:	441a      	add	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005240:	441a      	add	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
 8005246:	e016      	b.n	8005276 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	0c5b      	lsrs	r3, r3, #17
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2b06      	cmp	r3, #6
 8005252:	d110      	bne.n	8005276 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800525a:	2208      	movs	r2, #8
 800525c:	4619      	mov	r1, r3
 800525e:	6a38      	ldr	r0, [r7, #32]
 8005260:	f003 fc0c 	bl	8008a7c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005270:	441a      	add	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0210 	orr.w	r2, r2, #16
 8005284:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f003 fd8a 	bl	8008da4 <USB_ReadInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005296:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800529a:	f040 80a7 	bne.w	80053ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f003 fd8f 	bl	8008dca <USB_ReadDevAllOutEpInterrupt>
 80052ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052ae:	e099      	b.n	80053e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 808e 	beq.w	80053d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f003 fdb3 	bl	8008e32 <USB_ReadDevOutEPInterrupt>
 80052cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	2301      	movs	r3, #1
 80052e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80052ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fec3 	bl	8006078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	2308      	movs	r3, #8
 800530c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800530e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 ff99 	bl	8006248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	2310      	movs	r3, #16
 8005330:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d030      	beq.n	800539e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d109      	bne.n	800535c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800535a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	3304      	adds	r3, #4
 8005370:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	78db      	ldrb	r3, [r3, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d108      	bne.n	800538c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	b2db      	uxtb	r3, r3
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f006 fa98 	bl	800b8bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	461a      	mov	r2, r3
 800539a:	2302      	movs	r3, #2
 800539c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2320      	movs	r3, #32
 80053b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	461a      	mov	r2, r3
 80053d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	3301      	adds	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f47f af62 	bne.w	80052b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f003 fcd7 	bl	8008da4 <USB_ReadInterrupts>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005400:	f040 80db 	bne.w	80055ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f003 fcf8 	bl	8008dfe <USB_ReadDevAllInEpInterrupt>
 800540e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005414:	e0cd      	b.n	80055b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80c2 	beq.w	80055a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f003 fd1e 	bl	8008e6e <USB_ReadDevInEPInterrupt>
 8005432:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d057      	beq.n	80054ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	2201      	movs	r2, #1
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	43db      	mvns	r3, r3
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545e:	4013      	ands	r3, r2
 8005460:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	2301      	movs	r3, #1
 8005472:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d132      	bne.n	80054e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	334c      	adds	r3, #76	; 0x4c
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4403      	add	r3, r0
 800549c:	3348      	adds	r3, #72	; 0x48
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4419      	add	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4403      	add	r3, r0
 80054b0:	334c      	adds	r3, #76	; 0x4c
 80054b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d113      	bne.n	80054e2 <HAL_PCD_IRQHandler+0x3a2>
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	3354      	adds	r3, #84	; 0x54
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d108      	bne.n	80054e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054da:	461a      	mov	r2, r3
 80054dc:	2101      	movs	r1, #1
 80054de:	f003 fd25 	bl	8008f2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f006 f962 	bl	800b7b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	461a      	mov	r2, r3
 8005506:	2308      	movs	r3, #8
 8005508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	461a      	mov	r2, r3
 8005522:	2310      	movs	r3, #16
 8005524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	461a      	mov	r2, r3
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800554c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800554e:	6a38      	ldr	r0, [r7, #32]
 8005550:	f002 fc06 	bl	8007d60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	3338      	adds	r3, #56	; 0x38
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	4413      	add	r3, r2
 8005564:	3304      	adds	r3, #4
 8005566:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	78db      	ldrb	r3, [r3, #3]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d108      	bne.n	8005582 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	b2db      	uxtb	r3, r3
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f006 f9af 	bl	800b8e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	461a      	mov	r2, r3
 8005590:	2302      	movs	r3, #2
 8005592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800559e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fcdb 	bl	8005f5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	3301      	adds	r3, #1
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af2e 	bne.w	8005416 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f003 fbf0 	bl	8008da4 <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ce:	d122      	bne.n	8005616 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d108      	bne.n	8005600 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055f6:	2100      	movs	r1, #0
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fec3 	bl	8006384 <HAL_PCDEx_LPM_Callback>
 80055fe:	e002      	b.n	8005606 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f006 f94d 	bl	800b8a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f003 fbc2 	bl	8008da4 <USB_ReadInterrupts>
 8005620:	4603      	mov	r3, r0
 8005622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562a:	d112      	bne.n	8005652 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d102      	bne.n	8005642 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f006 f909 	bl	800b854 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005650:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f003 fba4 	bl	8008da4 <USB_ReadInterrupts>
 800565c:	4603      	mov	r3, r0
 800565e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	f040 80b7 	bne.w	80057d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2110      	movs	r1, #16
 8005684:	4618      	mov	r0, r3
 8005686:	f002 fb6b 	bl	8007d60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568e:	e046      	b.n	800571e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	461a      	mov	r2, r3
 800569e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005716:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	3301      	adds	r3, #1
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005724:	429a      	cmp	r2, r3
 8005726:	d3b3      	bcc.n	8005690 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005736:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800573a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	2b00      	cmp	r3, #0
 8005742:	d016      	beq.n	8005772 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005754:	f043 030b 	orr.w	r3, r3, #11
 8005758:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576a:	f043 030b 	orr.w	r3, r3, #11
 800576e:	6453      	str	r3, [r2, #68]	; 0x44
 8005770:	e015      	b.n	800579e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005784:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005788:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005798:	f043 030b 	orr.w	r3, r3, #11
 800579c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057c2:	461a      	mov	r2, r3
 80057c4:	f003 fbb2 	bl	8008f2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f003 fae1 	bl	8008da4 <USB_ReadInterrupts>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ec:	d124      	bne.n	8005838 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f003 fb77 	bl	8008ee6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f002 fb2c 	bl	8007e5a <USB_GetDevSpeed>
 8005802:	4603      	mov	r3, r0
 8005804:	461a      	mov	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681c      	ldr	r4, [r3, #0]
 800580e:	f001 f9e9 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8005812:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	4620      	mov	r0, r4
 800581e:	f002 f82b 	bl	8007878 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f005 ffed 	bl	800b802 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005836:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fab1 	bl	8008da4 <USB_ReadInterrupts>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b08      	cmp	r3, #8
 800584a:	d10a      	bne.n	8005862 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f005 ffca 	bl	800b7e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f002 0208 	and.w	r2, r2, #8
 8005860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f003 fa9c 	bl	8008da4 <USB_ReadInterrupts>
 800586c:	4603      	mov	r3, r0
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b80      	cmp	r3, #128	; 0x80
 8005874:	d122      	bne.n	80058bc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005882:	2301      	movs	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	e014      	b.n	80058b2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb27 	bl	8005efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	3301      	adds	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3e5      	bcc.n	8005888 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f003 fa6f 	bl	8008da4 <USB_ReadInterrupts>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d0:	d13b      	bne.n	800594a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058d2:	2301      	movs	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
 80058d6:	e02b      	b.n	8005930 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	3340      	adds	r3, #64	; 0x40
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d115      	bne.n	800592a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80058fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005900:	2b00      	cmp	r3, #0
 8005902:	da12      	bge.n	800592a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	333f      	adds	r3, #63	; 0x3f
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fae8 	bl	8005efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	3301      	adds	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	429a      	cmp	r2, r3
 8005938:	d3ce      	bcc.n	80058d8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f003 fa28 	bl	8008da4 <USB_ReadInterrupts>
 8005954:	4603      	mov	r3, r0
 8005956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800595a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800595e:	d155      	bne.n	8005a0c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005960:	2301      	movs	r3, #1
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
 8005964:	e045      	b.n	80059f2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d12e      	bne.n	80059ec <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800598e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005990:	2b00      	cmp	r3, #0
 8005992:	da2b      	bge.n	80059ec <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80059a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d121      	bne.n	80059ec <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059e8:	6053      	str	r3, [r2, #4]
            break;
 80059ea:	e007      	b.n	80059fc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	3301      	adds	r3, #1
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d3b4      	bcc.n	8005966 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f003 f9c7 	bl	8008da4 <USB_ReadInterrupts>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d10a      	bne.n	8005a38 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f005 ff6e 	bl	800b904 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 f9b1 	bl	8008da4 <USB_ReadInterrupts>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d115      	bne.n	8005a78 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f005 ff5e 	bl	800b920 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	e000      	b.n	8005a78 <HAL_PCD_IRQHandler+0x938>
      return;
 8005a76:	bf00      	nop
    }
  }
}
 8005a78:	3734      	adds	r7, #52	; 0x34
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}

08005a7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_PCD_SetAddress+0x1a>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e013      	b.n	8005ac0 <HAL_PCD_SetAddress+0x42>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f003 f90f 	bl	8008cd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	70fb      	strb	r3, [r7, #3]
 8005ada:	460b      	mov	r3, r1
 8005adc:	803b      	strh	r3, [r7, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	da0f      	bge.n	8005b0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	3338      	adds	r3, #56	; 0x38
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	3304      	adds	r3, #4
 8005b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	705a      	strb	r2, [r3, #1]
 8005b0c:	e00f      	b.n	8005b2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b3a:	883a      	ldrh	r2, [r7, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	78ba      	ldrb	r2, [r7, #2]
 8005b44:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b58:	78bb      	ldrb	r3, [r7, #2]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d102      	bne.n	8005b64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_PCD_EP_Open+0xaa>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e00e      	b.n	8005b90 <HAL_PCD_EP_Open+0xc8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 f98f 	bl	8007ea4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da0f      	bge.n	8005bcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	f003 020f 	and.w	r2, r3, #15
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	3338      	adds	r3, #56	; 0x38
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	705a      	strb	r2, [r3, #1]
 8005bca:	e00f      	b.n	8005bec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	3304      	adds	r3, #4
 8005be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_PCD_EP_Close+0x6e>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e00e      	b.n	8005c24 <HAL_PCD_EP_Close+0x8c>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68f9      	ldr	r1, [r7, #12]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f002 f9cd 	bl	8007fb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	f003 020f 	and.w	r2, r3, #15
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	3304      	adds	r3, #4
 8005c54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2200      	movs	r2, #0
 8005c66:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c6e:	7afb      	ldrb	r3, [r7, #11]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d102      	bne.n	8005c88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c88:	7afb      	ldrb	r3, [r7, #11]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	f002 fcac 	bl	80085fc <USB_EP0StartXfer>
 8005ca4:	e008      	b.n	8005cb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	f002 fa5a 	bl	800816c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	f003 020f 	and.w	r2, r3, #15
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005ce4:	681b      	ldr	r3, [r3, #0]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d02:	7afb      	ldrb	r3, [r7, #11]
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	3338      	adds	r3, #56	; 0x38
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	3304      	adds	r3, #4
 8005d18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d32:	7afb      	ldrb	r3, [r7, #11]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d102      	bne.n	8005d4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6979      	ldr	r1, [r7, #20]
 8005d64:	f002 fc4a 	bl	80085fc <USB_EP0StartXfer>
 8005d68:	e008      	b.n	8005d7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	f002 f9f8 	bl	800816c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d901      	bls.n	8005da4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e050      	b.n	8005e46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da0f      	bge.n	8005dcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	f003 020f 	and.w	r2, r3, #15
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	3338      	adds	r3, #56	; 0x38
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	705a      	strb	r2, [r3, #1]
 8005dca:	e00d      	b.n	8005de8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4413      	add	r3, r2
 8005dde:	3304      	adds	r3, #4
 8005de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_PCD_EP_SetStall+0x82>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e01e      	b.n	8005e46 <HAL_PCD_EP_SetStall+0xc0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f002 fe88 	bl	8008b2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	b2d9      	uxtb	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e36:	461a      	mov	r2, r3
 8005e38:	f003 f878 	bl	8008f2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d901      	bls.n	8005e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e042      	b.n	8005ef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da0f      	bge.n	8005e94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	f003 020f 	and.w	r2, r3, #15
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	3338      	adds	r3, #56	; 0x38
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	3304      	adds	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	705a      	strb	r2, [r3, #1]
 8005e92:	e00f      	b.n	8005eb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3304      	adds	r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_PCD_EP_ClrStall+0x86>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e00e      	b.n	8005ef2 <HAL_PCD_EP_ClrStall+0xa4>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f002 fe90 	bl	8008c08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da0c      	bge.n	8005f28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 020f 	and.w	r2, r3, #15
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	3338      	adds	r3, #56	; 0x38
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4413      	add	r3, r2
 8005f22:	3304      	adds	r3, #4
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e00c      	b.n	8005f42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3304      	adds	r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f002 fcaf 	bl	80088ac <USB_EPStopXfer>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f52:	7afb      	ldrb	r3, [r7, #11]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	3338      	adds	r3, #56	; 0x38
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	3304      	adds	r3, #4
 8005f82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1a      	ldr	r2, [r3, #32]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d901      	bls.n	8005f94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e06c      	b.n	800606e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d902      	bls.n	8005fb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fb8:	e02b      	b.n	8006012 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d902      	bls.n	8005fd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3303      	adds	r3, #3
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6919      	ldr	r1, [r3, #16]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	6978      	ldr	r0, [r7, #20]
 8005ff6:	f002 fd03 	bl	8008a00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	441a      	add	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1a      	ldr	r2, [r3, #32]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	441a      	add	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	b29b      	uxth	r3, r3
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d809      	bhi.n	800603c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006030:	429a      	cmp	r2, r3
 8006032:	d203      	bcs.n	800603c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1be      	bne.n	8005fba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	429a      	cmp	r2, r3
 8006046:	d811      	bhi.n	800606c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	2201      	movs	r2, #1
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	43db      	mvns	r3, r3
 8006062:	6939      	ldr	r1, [r7, #16]
 8006064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006068:	4013      	ands	r3, r2
 800606a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	333c      	adds	r3, #60	; 0x3c
 8006090:	3304      	adds	r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d17b      	bne.n	80061a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4a61      	ldr	r2, [pc, #388]	; (8006240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	f240 80b9 	bls.w	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80b3 	beq.w	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	461a      	mov	r2, r3
 80060dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e0:	6093      	str	r3, [r2, #8]
 80060e2:	e0a7      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	2320      	movs	r3, #32
 80060fe:	6093      	str	r3, [r2, #8]
 8006100:	e098      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 8093 	bne.w	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4a4b      	ldr	r2, [pc, #300]	; (8006240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d90f      	bls.n	8006136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	461a      	mov	r2, r3
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	6093      	str	r3, [r2, #8]
 8006134:	e07e      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	0159      	lsls	r1, r3, #5
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	440b      	add	r3, r1
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d114      	bne.n	8006198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006180:	461a      	mov	r2, r3
 8006182:	2101      	movs	r1, #1
 8006184:	f002 fed2 	bl	8008f2c <USB_EP0_OutStart>
 8006188:	e006      	b.n	8006198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f005 faec 	bl	800b77c <HAL_PCD_DataOutStageCallback>
 80061a4:	e046      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4a26      	ldr	r2, [pc, #152]	; (8006244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d124      	bne.n	80061f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	461a      	mov	r2, r3
 80061c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ca:	6093      	str	r3, [r2, #8]
 80061cc:	e032      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	2320      	movs	r3, #32
 80061e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f005 fac3 	bl	800b77c <HAL_PCD_DataOutStageCallback>
 80061f6:	e01d      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d114      	bne.n	8006228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006220:	461a      	mov	r2, r3
 8006222:	2100      	movs	r1, #0
 8006224:	f002 fe82 	bl	8008f2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f005 faa4 	bl	800b77c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	4f54300a 	.word	0x4f54300a
 8006244:	4f54310a 	.word	0x4f54310a

08006248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	333c      	adds	r3, #60	; 0x3c
 8006260:	3304      	adds	r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d90e      	bls.n	800629c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f005 fa5b 	bl	800b758 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d90c      	bls.n	80062c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d108      	bne.n	80062c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062bc:	461a      	mov	r2, r3
 80062be:	2101      	movs	r1, #1
 80062c0:	f002 fe34 	bl	8008f2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	4f54300a 	.word	0x4f54300a

080062d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
 80062e0:	4613      	mov	r3, r2
 80062e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d107      	bne.n	8006302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80062f2:	883b      	ldrh	r3, [r7, #0]
 80062f4:	0419      	lsls	r1, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006300:	e028      	b.n	8006354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	e00d      	b.n	8006332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	3340      	adds	r3, #64	; 0x40
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	3301      	adds	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	3b01      	subs	r3, #1
 8006338:	429a      	cmp	r2, r3
 800633a:	d3ec      	bcc.n	8006316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800633c:	883b      	ldrh	r3, [r7, #0]
 800633e:	0418      	lsls	r0, r3, #16
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	3b01      	subs	r3, #1
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4302      	orrs	r2, r0
 800634c:	3340      	adds	r3, #64	; 0x40
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	887a      	ldrh	r2, [r7, #2]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e267      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d075      	beq.n	80064a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ba:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d00c      	beq.n	80063e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063c6:	4b85      	ldr	r3, [pc, #532]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d112      	bne.n	80063f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d2:	4b82      	ldr	r3, [pc, #520]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063de:	d10b      	bne.n	80063f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e0:	4b7e      	ldr	r3, [pc, #504]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d05b      	beq.n	80064a4 <HAL_RCC_OscConfig+0x108>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d157      	bne.n	80064a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e242      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d106      	bne.n	8006410 <HAL_RCC_OscConfig+0x74>
 8006402:	4b76      	ldr	r3, [pc, #472]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a75      	ldr	r2, [pc, #468]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e01d      	b.n	800644c <HAL_RCC_OscConfig+0xb0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006418:	d10c      	bne.n	8006434 <HAL_RCC_OscConfig+0x98>
 800641a:	4b70      	ldr	r3, [pc, #448]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6f      	ldr	r2, [pc, #444]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4b6d      	ldr	r3, [pc, #436]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6c      	ldr	r2, [pc, #432]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e00b      	b.n	800644c <HAL_RCC_OscConfig+0xb0>
 8006434:	4b69      	ldr	r3, [pc, #420]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a68      	ldr	r2, [pc, #416]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 800643a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4b66      	ldr	r3, [pc, #408]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a65      	ldr	r2, [pc, #404]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fb fa9c 	bl	8001990 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800645c:	f7fb fa98 	bl	8001990 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	; 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e207      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646e:	4b5b      	ldr	r3, [pc, #364]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0xc0>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fb fa88 	bl	8001990 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006484:	f7fb fa84 	bl	8001990 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b64      	cmp	r3, #100	; 0x64
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e1f3      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006496:	4b51      	ldr	r3, [pc, #324]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0xe8>
 80064a2:	e000      	b.n	80064a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d063      	beq.n	800657a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b2:	4b4a      	ldr	r3, [pc, #296]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064be:	4b47      	ldr	r3, [pc, #284]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d11c      	bne.n	8006504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ca:	4b44      	ldr	r3, [pc, #272]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d116      	bne.n	8006504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d6:	4b41      	ldr	r3, [pc, #260]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_RCC_OscConfig+0x152>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d001      	beq.n	80064ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e1c7      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	4b3b      	ldr	r3, [pc, #236]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4937      	ldr	r1, [pc, #220]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006502:	e03a      	b.n	800657a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d020      	beq.n	800654e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800650c:	4b34      	ldr	r3, [pc, #208]	; (80065e0 <HAL_RCC_OscConfig+0x244>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006512:	f7fb fa3d 	bl	8001990 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651a:	f7fb fa39 	bl	8001990 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e1a8      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652c:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006538:	4b28      	ldr	r3, [pc, #160]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4925      	ldr	r1, [pc, #148]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]
 800654c:	e015      	b.n	800657a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <HAL_RCC_OscConfig+0x244>)
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fb fa1c 	bl	8001990 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800655c:	f7fb fa18 	bl	8001990 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e187      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800656e:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f0      	bne.n	800655c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d036      	beq.n	80065f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800658e:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <HAL_RCC_OscConfig+0x248>)
 8006590:	2201      	movs	r2, #1
 8006592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006594:	f7fb f9fc 	bl	8001990 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800659c:	f7fb f9f8 	bl	8001990 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e167      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ae:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCC_OscConfig+0x240>)
 80065b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x200>
 80065ba:	e01b      	b.n	80065f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <HAL_RCC_OscConfig+0x248>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c2:	f7fb f9e5 	bl	8001990 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c8:	e00e      	b.n	80065e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ca:	f7fb f9e1 	bl	8001990 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d907      	bls.n	80065e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e150      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
 80065dc:	40023800 	.word	0x40023800
 80065e0:	42470000 	.word	0x42470000
 80065e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e8:	4b88      	ldr	r3, [pc, #544]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80065ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ea      	bne.n	80065ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8097 	beq.w	8006730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006606:	4b81      	ldr	r3, [pc, #516]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10f      	bne.n	8006632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	4b7d      	ldr	r3, [pc, #500]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	4a7c      	ldr	r2, [pc, #496]	; (800680c <HAL_RCC_OscConfig+0x470>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006620:	6413      	str	r3, [r2, #64]	; 0x40
 8006622:	4b7a      	ldr	r3, [pc, #488]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662e:	2301      	movs	r3, #1
 8006630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	4b77      	ldr	r3, [pc, #476]	; (8006810 <HAL_RCC_OscConfig+0x474>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d118      	bne.n	8006670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800663e:	4b74      	ldr	r3, [pc, #464]	; (8006810 <HAL_RCC_OscConfig+0x474>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a73      	ldr	r2, [pc, #460]	; (8006810 <HAL_RCC_OscConfig+0x474>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664a:	f7fb f9a1 	bl	8001990 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006652:	f7fb f99d 	bl	8001990 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e10c      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006664:	4b6a      	ldr	r3, [pc, #424]	; (8006810 <HAL_RCC_OscConfig+0x474>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <HAL_RCC_OscConfig+0x2ea>
 8006678:	4b64      	ldr	r3, [pc, #400]	; (800680c <HAL_RCC_OscConfig+0x470>)
 800667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667c:	4a63      	ldr	r2, [pc, #396]	; (800680c <HAL_RCC_OscConfig+0x470>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6713      	str	r3, [r2, #112]	; 0x70
 8006684:	e01c      	b.n	80066c0 <HAL_RCC_OscConfig+0x324>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b05      	cmp	r3, #5
 800668c:	d10c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x30c>
 800668e:	4b5f      	ldr	r3, [pc, #380]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	4a5e      	ldr	r2, [pc, #376]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	6713      	str	r3, [r2, #112]	; 0x70
 800669a:	4b5c      	ldr	r3, [pc, #368]	; (800680c <HAL_RCC_OscConfig+0x470>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669e:	4a5b      	ldr	r2, [pc, #364]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	6713      	str	r3, [r2, #112]	; 0x70
 80066a6:	e00b      	b.n	80066c0 <HAL_RCC_OscConfig+0x324>
 80066a8:	4b58      	ldr	r3, [pc, #352]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ac:	4a57      	ldr	r2, [pc, #348]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	6713      	str	r3, [r2, #112]	; 0x70
 80066b4:	4b55      	ldr	r3, [pc, #340]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	4a54      	ldr	r2, [pc, #336]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80066ba:	f023 0304 	bic.w	r3, r3, #4
 80066be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c8:	f7fb f962 	bl	8001990 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ce:	e00a      	b.n	80066e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d0:	f7fb f95e 	bl	8001990 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f241 3288 	movw	r2, #5000	; 0x1388
 80066de:	4293      	cmp	r3, r2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e0cb      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e6:	4b49      	ldr	r3, [pc, #292]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ee      	beq.n	80066d0 <HAL_RCC_OscConfig+0x334>
 80066f2:	e014      	b.n	800671e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f4:	f7fb f94c 	bl	8001990 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fa:	e00a      	b.n	8006712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fc:	f7fb f948 	bl	8001990 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	f241 3288 	movw	r2, #5000	; 0x1388
 800670a:	4293      	cmp	r3, r2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e0b5      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006712:	4b3e      	ldr	r3, [pc, #248]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1ee      	bne.n	80066fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006724:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	4a38      	ldr	r2, [pc, #224]	; (800680c <HAL_RCC_OscConfig+0x470>)
 800672a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800672e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80a1 	beq.w	800687c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800673a:	4b34      	ldr	r3, [pc, #208]	; (800680c <HAL_RCC_OscConfig+0x470>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b08      	cmp	r3, #8
 8006744:	d05c      	beq.n	8006800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d141      	bne.n	80067d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <HAL_RCC_OscConfig+0x478>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006754:	f7fb f91c 	bl	8001990 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675c:	f7fb f918 	bl	8001990 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e087      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676e:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x470>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	019b      	lsls	r3, r3, #6
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	3b01      	subs	r3, #1
 8006794:	041b      	lsls	r3, r3, #16
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	061b      	lsls	r3, r3, #24
 800679e:	491b      	ldr	r1, [pc, #108]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067a4:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <HAL_RCC_OscConfig+0x478>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fb f8f1 	bl	8001990 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fb f8ed 	bl	8001990 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e05c      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c4:	4b11      	ldr	r3, [pc, #68]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x416>
 80067d0:	e054      	b.n	800687c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <HAL_RCC_OscConfig+0x478>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fb f8da 	bl	8001990 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fb f8d6 	bl	8001990 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e045      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <HAL_RCC_OscConfig+0x470>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x444>
 80067fe:	e03d      	b.n	800687c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d107      	bne.n	8006818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e038      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
 800680c:	40023800 	.word	0x40023800
 8006810:	40007000 	.word	0x40007000
 8006814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <HAL_RCC_OscConfig+0x4ec>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d028      	beq.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d121      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d11a      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006848:	4013      	ands	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800684e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006850:	4293      	cmp	r3, r2
 8006852:	d111      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	3b01      	subs	r3, #1
 8006862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006864:	429a      	cmp	r2, r3
 8006866:	d107      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800

0800688c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0cc      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a0:	4b68      	ldr	r3, [pc, #416]	; (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d90c      	bls.n	80068c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ae:	4b65      	ldr	r3, [pc, #404]	; (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b6:	4b63      	ldr	r3, [pc, #396]	; (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0b8      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d020      	beq.n	8006916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e0:	4b59      	ldr	r3, [pc, #356]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f8:	4b53      	ldr	r3, [pc, #332]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a52      	ldr	r2, [pc, #328]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006904:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	494d      	ldr	r1, [pc, #308]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d044      	beq.n	80069ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	4b47      	ldr	r3, [pc, #284]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d119      	bne.n	800696a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e07f      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d003      	beq.n	800694a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006946:	2b03      	cmp	r3, #3
 8006948:	d107      	bne.n	800695a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800694a:	4b3f      	ldr	r3, [pc, #252]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e06f      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695a:	4b3b      	ldr	r3, [pc, #236]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e067      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800696a:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f023 0203 	bic.w	r2, r3, #3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4934      	ldr	r1, [pc, #208]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800697c:	f7fb f808 	bl	8001990 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006982:	e00a      	b.n	800699a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006984:	f7fb f804 	bl	8001990 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e04f      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699a:	4b2b      	ldr	r3, [pc, #172]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 020c 	and.w	r2, r3, #12
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d1eb      	bne.n	8006984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ac:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d20c      	bcs.n	80069d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ba:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c2:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e032      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e0:	4b19      	ldr	r3, [pc, #100]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4916      	ldr	r1, [pc, #88]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069fe:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	490e      	ldr	r1, [pc, #56]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a12:	f000 f821 	bl	8006a58 <HAL_RCC_GetSysClockFreq>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	490a      	ldr	r1, [pc, #40]	; (8006a4c <HAL_RCC_ClockConfig+0x1c0>)
 8006a24:	5ccb      	ldrb	r3, [r1, r3]
 8006a26:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2a:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <HAL_RCC_ClockConfig+0x1c8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fa fbda 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40023c00 	.word	0x40023c00
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	0800f294 	.word	0x0800f294
 8006a50:	200000b8 	.word	0x200000b8
 8006a54:	200000bc 	.word	0x200000bc

08006a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a5c:	b090      	sub	sp, #64	; 0x40
 8006a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
 8006a64:	2300      	movs	r3, #0
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a68:	2300      	movs	r3, #0
 8006a6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a70:	4b59      	ldr	r3, [pc, #356]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 030c 	and.w	r3, r3, #12
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d00d      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0x40>
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	f200 80a1 	bhi.w	8006bc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x34>
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d003      	beq.n	8006a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a8a:	e09b      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a8c:	4b53      	ldr	r3, [pc, #332]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8006a8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006a90:	e09b      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a92:	4b53      	ldr	r3, [pc, #332]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a96:	e098      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a98:	4b4f      	ldr	r3, [pc, #316]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aa2:	4b4d      	ldr	r3, [pc, #308]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d028      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aae:	4b4a      	ldr	r3, [pc, #296]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	099b      	lsrs	r3, r3, #6
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4b47      	ldr	r3, [pc, #284]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ac4:	fb03 f201 	mul.w	r2, r3, r1
 8006ac8:	2300      	movs	r3, #0
 8006aca:	fb00 f303 	mul.w	r3, r0, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	4a43      	ldr	r2, [pc, #268]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8006ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad8:	460a      	mov	r2, r1
 8006ada:	62ba      	str	r2, [r7, #40]	; 0x28
 8006adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ade:	4413      	add	r3, r2
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	61fa      	str	r2, [r7, #28]
 8006aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006af2:	f7f9 fbc5 	bl	8000280 <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4613      	mov	r3, r2
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afe:	e053      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b00:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	099b      	lsrs	r3, r3, #6
 8006b06:	2200      	movs	r2, #0
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	617a      	str	r2, [r7, #20]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b12:	f04f 0b00 	mov.w	fp, #0
 8006b16:	4652      	mov	r2, sl
 8006b18:	465b      	mov	r3, fp
 8006b1a:	f04f 0000 	mov.w	r0, #0
 8006b1e:	f04f 0100 	mov.w	r1, #0
 8006b22:	0159      	lsls	r1, r3, #5
 8006b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b28:	0150      	lsls	r0, r2, #5
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	ebb2 080a 	subs.w	r8, r2, sl
 8006b32:	eb63 090b 	sbc.w	r9, r3, fp
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b4a:	ebb2 0408 	subs.w	r4, r2, r8
 8006b4e:	eb63 0509 	sbc.w	r5, r3, r9
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	00eb      	lsls	r3, r5, #3
 8006b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b60:	00e2      	lsls	r2, r4, #3
 8006b62:	4614      	mov	r4, r2
 8006b64:	461d      	mov	r5, r3
 8006b66:	eb14 030a 	adds.w	r3, r4, sl
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	eb45 030b 	adc.w	r3, r5, fp
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b7e:	4629      	mov	r1, r5
 8006b80:	028b      	lsls	r3, r1, #10
 8006b82:	4621      	mov	r1, r4
 8006b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b88:	4621      	mov	r1, r4
 8006b8a:	028a      	lsls	r2, r1, #10
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	2200      	movs	r2, #0
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	60fa      	str	r2, [r7, #12]
 8006b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b9c:	f7f9 fb70 	bl	8000280 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006bc2:	e002      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3740      	adds	r7, #64	; 0x40
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	00f42400 	.word	0x00f42400
 8006be0:	017d7840 	.word	0x017d7840

08006be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	200000b8 	.word	0x200000b8

08006bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c00:	f7ff fff0 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0a9b      	lsrs	r3, r3, #10
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	; (8006c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	0800f2a4 	.word	0x0800f2a4

08006c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c28:	f7ff ffdc 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	0b5b      	lsrs	r3, r3, #13
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	4903      	ldr	r1, [pc, #12]	; (8006c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c3a:	5ccb      	ldrb	r3, [r1, r3]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40023800 	.word	0x40023800
 8006c48:	0800f2a4 	.word	0x0800f2a4

08006c4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	220f      	movs	r2, #15
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c5c:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 0203 	and.w	r2, r3, #3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c68:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c80:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	08db      	lsrs	r3, r3, #3
 8006c86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <HAL_RCC_GetClockConfig+0x60>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0207 	and.w	r2, r3, #7
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40023c00 	.word	0x40023c00

08006cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e041      	b.n	8006d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f839 	bl	8006d4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f000 fad2 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d001      	beq.n	8006d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e044      	b.n	8006e06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d013      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1a      	ldr	r2, [pc, #104]	; (8006e18 <HAL_TIM_Base_Start_IT+0xb4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <HAL_TIM_Base_Start_IT+0xb8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <HAL_TIM_Base_Start_IT+0xbc>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <HAL_TIM_Base_Start_IT+0xc0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d111      	bne.n	8006df4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b06      	cmp	r3, #6
 8006de0:	d010      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0201 	orr.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df2:	e007      	b.n	8006e04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800
 8006e20:	40000c00 	.word	0x40000c00
 8006e24:	40014000 	.word	0x40014000

08006e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e041      	b.n	8006ebe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fa fbba 	bl	80015c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f000 fa16 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d122      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d11b      	bne.n	8006f22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f06f 0202 	mvn.w	r2, #2
 8006ef2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9b1 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006f0e:	e005      	b.n	8006f1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9a3 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7f9 fb34 	bl	8000584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d122      	bne.n	8006f76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d11b      	bne.n	8006f76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f06f 0204 	mvn.w	r2, #4
 8006f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f987 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006f62:	e005      	b.n	8006f70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f979 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7f9 fb0a 	bl	8000584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d122      	bne.n	8006fca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d11b      	bne.n	8006fca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f06f 0208 	mvn.w	r2, #8
 8006f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f95d 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 8006fb6:	e005      	b.n	8006fc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f94f 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7f9 fae0 	bl	8000584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b10      	cmp	r3, #16
 8006fd6:	d122      	bne.n	800701e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0310 	and.w	r3, r3, #16
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d11b      	bne.n	800701e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f06f 0210 	mvn.w	r2, #16
 8006fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f933 	bl	8007270 <HAL_TIM_IC_CaptureCallback>
 800700a:	e005      	b.n	8007018 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f925 	bl	800725c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7f9 fab6 	bl	8000584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b01      	cmp	r3, #1
 800702a:	d10e      	bne.n	800704a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b01      	cmp	r3, #1
 8007038:	d107      	bne.n	800704a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f06f 0201 	mvn.w	r2, #1
 8007042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fa f88d 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007054:	2b80      	cmp	r3, #128	; 0x80
 8007056:	d10e      	bne.n	8007076 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d107      	bne.n	8007076 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800706e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb95 	bl	80077a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b40      	cmp	r3, #64	; 0x40
 8007082:	d10e      	bne.n	80070a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b40      	cmp	r3, #64	; 0x40
 8007090:	d107      	bne.n	80070a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800709a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8f1 	bl	8007284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d10e      	bne.n	80070ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d107      	bne.n	80070ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f06f 0220 	mvn.w	r2, #32
 80070c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb5f 	bl	800778c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e0ae      	b.n	8007254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b0c      	cmp	r3, #12
 8007102:	f200 809f 	bhi.w	8007244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007141 	.word	0x08007141
 8007110:	08007245 	.word	0x08007245
 8007114:	08007245 	.word	0x08007245
 8007118:	08007245 	.word	0x08007245
 800711c:	08007181 	.word	0x08007181
 8007120:	08007245 	.word	0x08007245
 8007124:	08007245 	.word	0x08007245
 8007128:	08007245 	.word	0x08007245
 800712c:	080071c3 	.word	0x080071c3
 8007130:	08007245 	.word	0x08007245
 8007134:	08007245 	.word	0x08007245
 8007138:	08007245 	.word	0x08007245
 800713c:	08007203 	.word	0x08007203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f926 	bl	8007398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0204 	bic.w	r2, r2, #4
 800716a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	691a      	ldr	r2, [r3, #16]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	619a      	str	r2, [r3, #24]
      break;
 800717e:	e064      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 f96c 	bl	8007464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800719a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6999      	ldr	r1, [r3, #24]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	021a      	lsls	r2, r3, #8
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	619a      	str	r2, [r3, #24]
      break;
 80071c0:	e043      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f9b7 	bl	800753c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0208 	orr.w	r2, r2, #8
 80071dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0204 	bic.w	r2, r2, #4
 80071ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69d9      	ldr	r1, [r3, #28]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	61da      	str	r2, [r3, #28]
      break;
 8007200:	e023      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fa01 	bl	8007610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800721c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800722c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69d9      	ldr	r1, [r3, #28]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	021a      	lsls	r2, r3, #8
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	61da      	str	r2, [r3, #28]
      break;
 8007242:	e002      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
      break;
 8007248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a34      	ldr	r2, [pc, #208]	; (800737c <TIM_Base_SetConfig+0xe4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00f      	beq.n	80072d0 <TIM_Base_SetConfig+0x38>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d00b      	beq.n	80072d0 <TIM_Base_SetConfig+0x38>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a31      	ldr	r2, [pc, #196]	; (8007380 <TIM_Base_SetConfig+0xe8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d007      	beq.n	80072d0 <TIM_Base_SetConfig+0x38>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a30      	ldr	r2, [pc, #192]	; (8007384 <TIM_Base_SetConfig+0xec>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_Base_SetConfig+0x38>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2f      	ldr	r2, [pc, #188]	; (8007388 <TIM_Base_SetConfig+0xf0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d108      	bne.n	80072e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a25      	ldr	r2, [pc, #148]	; (800737c <TIM_Base_SetConfig+0xe4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01b      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f0:	d017      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_Base_SetConfig+0xe8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_Base_SetConfig+0xec>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00f      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <TIM_Base_SetConfig+0xf0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00b      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1f      	ldr	r2, [pc, #124]	; (800738c <TIM_Base_SetConfig+0xf4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d007      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <TIM_Base_SetConfig+0xf8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d003      	beq.n	8007322 <TIM_Base_SetConfig+0x8a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <TIM_Base_SetConfig+0xfc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d108      	bne.n	8007334 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a08      	ldr	r2, [pc, #32]	; (800737c <TIM_Base_SetConfig+0xe4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d103      	bne.n	8007368 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	615a      	str	r2, [r3, #20]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40014000 	.word	0x40014000
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800

08007398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0201 	bic.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 0302 	bic.w	r3, r3, #2
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <TIM_OC1_SetConfig+0xc8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d10c      	bne.n	800740e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0308 	bic.w	r3, r3, #8
 80073fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f023 0304 	bic.w	r3, r3, #4
 800740c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a13      	ldr	r2, [pc, #76]	; (8007460 <TIM_OC1_SetConfig+0xc8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d111      	bne.n	800743a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800741c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	40010000 	.word	0x40010000

08007464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f023 0210 	bic.w	r2, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f023 0320 	bic.w	r3, r3, #32
 80074ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <TIM_OC2_SetConfig+0xd4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d10d      	bne.n	80074e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a15      	ldr	r2, [pc, #84]	; (8007538 <TIM_OC2_SetConfig+0xd4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d113      	bne.n	8007510 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000

0800753c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a1d      	ldr	r2, [pc, #116]	; (800760c <TIM_OC3_SetConfig+0xd0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10d      	bne.n	80075b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a14      	ldr	r2, [pc, #80]	; (800760c <TIM_OC3_SetConfig+0xd0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d113      	bne.n	80075e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	621a      	str	r2, [r3, #32]
}
 8007600:	bf00      	nop
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40010000 	.word	0x40010000

08007610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800765a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	031b      	lsls	r3, r3, #12
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a10      	ldr	r2, [pc, #64]	; (80076ac <TIM_OC4_SetConfig+0x9c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d109      	bne.n	8007684 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000

080076b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e050      	b.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d018      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d013      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a18      	ldr	r2, [pc, #96]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a16      	ldr	r2, [pc, #88]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a15      	ldr	r2, [pc, #84]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10c      	bne.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4313      	orrs	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40000400 	.word	0x40000400
 8007780:	40000800 	.word	0x40000800
 8007784:	40000c00 	.word	0x40000c00
 8007788:	40014000 	.word	0x40014000

0800778c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077b4:	b084      	sub	sp, #16
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	f107 001c 	add.w	r0, r7, #28
 80077c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d122      	bne.n	8007812 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d105      	bne.n	8007806 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fbee 	bl	8008fe8 <USB_CoreReset>
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
 8007810:	e01a      	b.n	8007848 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fbe2 	bl	8008fe8 <USB_CoreReset>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
 800783a:	e005      	b.n	8007848 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	2b01      	cmp	r3, #1
 800784c:	d10b      	bne.n	8007866 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f043 0206 	orr.w	r2, r3, #6
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f043 0220 	orr.w	r2, r3, #32
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007866:	7bfb      	ldrb	r3, [r7, #15]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007872:	b004      	add	sp, #16
 8007874:	4770      	bx	lr
	...

08007878 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d165      	bne.n	8007958 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4a41      	ldr	r2, [pc, #260]	; (8007994 <USB_SetTurnaroundTime+0x11c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d906      	bls.n	80078a2 <USB_SetTurnaroundTime+0x2a>
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4a40      	ldr	r2, [pc, #256]	; (8007998 <USB_SetTurnaroundTime+0x120>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d202      	bcs.n	80078a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800789c:	230f      	movs	r3, #15
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e062      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4a3c      	ldr	r2, [pc, #240]	; (8007998 <USB_SetTurnaroundTime+0x120>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d306      	bcc.n	80078b8 <USB_SetTurnaroundTime+0x40>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4a3b      	ldr	r2, [pc, #236]	; (800799c <USB_SetTurnaroundTime+0x124>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d202      	bcs.n	80078b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80078b2:	230e      	movs	r3, #14
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e057      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4a38      	ldr	r2, [pc, #224]	; (800799c <USB_SetTurnaroundTime+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d306      	bcc.n	80078ce <USB_SetTurnaroundTime+0x56>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4a37      	ldr	r2, [pc, #220]	; (80079a0 <USB_SetTurnaroundTime+0x128>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d202      	bcs.n	80078ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80078c8:	230d      	movs	r3, #13
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e04c      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4a33      	ldr	r2, [pc, #204]	; (80079a0 <USB_SetTurnaroundTime+0x128>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d306      	bcc.n	80078e4 <USB_SetTurnaroundTime+0x6c>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4a32      	ldr	r2, [pc, #200]	; (80079a4 <USB_SetTurnaroundTime+0x12c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d802      	bhi.n	80078e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078de:	230c      	movs	r3, #12
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e041      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a2f      	ldr	r2, [pc, #188]	; (80079a4 <USB_SetTurnaroundTime+0x12c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d906      	bls.n	80078fa <USB_SetTurnaroundTime+0x82>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a2e      	ldr	r2, [pc, #184]	; (80079a8 <USB_SetTurnaroundTime+0x130>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d802      	bhi.n	80078fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078f4:	230b      	movs	r3, #11
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e036      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	4a2a      	ldr	r2, [pc, #168]	; (80079a8 <USB_SetTurnaroundTime+0x130>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d906      	bls.n	8007910 <USB_SetTurnaroundTime+0x98>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	4a29      	ldr	r2, [pc, #164]	; (80079ac <USB_SetTurnaroundTime+0x134>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d802      	bhi.n	8007910 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800790a:	230a      	movs	r3, #10
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	e02b      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4a26      	ldr	r2, [pc, #152]	; (80079ac <USB_SetTurnaroundTime+0x134>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d906      	bls.n	8007926 <USB_SetTurnaroundTime+0xae>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4a25      	ldr	r2, [pc, #148]	; (80079b0 <USB_SetTurnaroundTime+0x138>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d202      	bcs.n	8007926 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007920:	2309      	movs	r3, #9
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e020      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	4a21      	ldr	r2, [pc, #132]	; (80079b0 <USB_SetTurnaroundTime+0x138>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d306      	bcc.n	800793c <USB_SetTurnaroundTime+0xc4>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4a20      	ldr	r2, [pc, #128]	; (80079b4 <USB_SetTurnaroundTime+0x13c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d802      	bhi.n	800793c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007936:	2308      	movs	r3, #8
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e015      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <USB_SetTurnaroundTime+0x13c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d906      	bls.n	8007952 <USB_SetTurnaroundTime+0xda>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4a1c      	ldr	r2, [pc, #112]	; (80079b8 <USB_SetTurnaroundTime+0x140>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d202      	bcs.n	8007952 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800794c:	2307      	movs	r3, #7
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e00a      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007952:	2306      	movs	r3, #6
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	e007      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d102      	bne.n	8007964 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800795e:	2309      	movs	r3, #9
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e001      	b.n	8007968 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007964:	2309      	movs	r3, #9
 8007966:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007980:	431a      	orrs	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	00d8acbf 	.word	0x00d8acbf
 8007998:	00e4e1c0 	.word	0x00e4e1c0
 800799c:	00f42400 	.word	0x00f42400
 80079a0:	01067380 	.word	0x01067380
 80079a4:	011a499f 	.word	0x011a499f
 80079a8:	01312cff 	.word	0x01312cff
 80079ac:	014ca43f 	.word	0x014ca43f
 80079b0:	016e3600 	.word	0x016e3600
 80079b4:	01a6ab1f 	.word	0x01a6ab1f
 80079b8:	01e84800 	.word	0x01e84800

080079bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f043 0201 	orr.w	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f023 0201 	bic.w	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d115      	bne.n	8007a4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a2e:	2001      	movs	r0, #1
 8007a30:	f7f9 ffba 	bl	80019a8 <HAL_Delay>
      ms++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 fa45 	bl	8008eca <USB_GetMode>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d01e      	beq.n	8007a84 <USB_SetCurrentMode+0x84>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b31      	cmp	r3, #49	; 0x31
 8007a4a:	d9f0      	bls.n	8007a2e <USB_SetCurrentMode+0x2e>
 8007a4c:	e01a      	b.n	8007a84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d115      	bne.n	8007a80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a60:	2001      	movs	r0, #1
 8007a62:	f7f9 ffa1 	bl	80019a8 <HAL_Delay>
      ms++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fa2c 	bl	8008eca <USB_GetMode>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <USB_SetCurrentMode+0x84>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b31      	cmp	r3, #49	; 0x31
 8007a7c:	d9f0      	bls.n	8007a60 <USB_SetCurrentMode+0x60>
 8007a7e:	e001      	b.n	8007a84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e005      	b.n	8007a90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b32      	cmp	r3, #50	; 0x32
 8007a88:	d101      	bne.n	8007a8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a98:	b084      	sub	sp, #16
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	e009      	b.n	8007acc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	3340      	adds	r3, #64	; 0x40
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b0e      	cmp	r3, #14
 8007ad0:	d9f2      	bls.n	8007ab8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11c      	bne.n	8007b12 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae6:	f043 0302 	orr.w	r3, r3, #2
 8007aea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8007b10:	e00b      	b.n	8007b2a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b30:	461a      	mov	r2, r3
 8007b32:	2300      	movs	r3, #0
 8007b34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b44:	461a      	mov	r2, r3
 8007b46:	680b      	ldr	r3, [r1, #0]
 8007b48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10c      	bne.n	8007b6a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d104      	bne.n	8007b60 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f965 	bl	8007e28 <USB_SetDevSpeed>
 8007b5e:	e008      	b.n	8007b72 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f960 	bl	8007e28 <USB_SetDevSpeed>
 8007b68:	e003      	b.n	8007b72 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b6a:	2103      	movs	r1, #3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f95b 	bl	8007e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b72:	2110      	movs	r1, #16
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8f3 	bl	8007d60 <USB_FlushTxFifo>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f91f 	bl	8007dc8 <USB_FlushRxFifo>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	e043      	b.n	8007c46 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd4:	d118      	bne.n	8007c08 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	461a      	mov	r2, r3
 8007bea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	e013      	b.n	8007c1a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e008      	b.n	8007c1a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	461a      	mov	r2, r3
 8007c16:	2300      	movs	r3, #0
 8007c18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c26:	461a      	mov	r2, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	3301      	adds	r3, #1
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d3b7      	bcc.n	8007bbe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	e043      	b.n	8007cdc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6a:	d118      	bne.n	8007c9e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	e013      	b.n	8007cb0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	461a      	mov	r2, r3
 8007c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e008      	b.n	8007cb0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	461a      	mov	r2, r3
 8007cac:	2300      	movs	r3, #0
 8007cae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d3b7      	bcc.n	8007c54 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f043 0210 	orr.w	r2, r3, #16
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <USB_DevInit+0x2c4>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	f043 0208 	orr.w	r2, r3, #8
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d107      	bne.n	8007d4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d44:	f043 0304 	orr.w	r3, r3, #4
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d58:	b004      	add	sp, #16
 8007d5a:	4770      	bx	lr
 8007d5c:	803c3800 	.word	0x803c3800

08007d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4a13      	ldr	r2, [pc, #76]	; (8007dc4 <USB_FlushTxFifo+0x64>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e01b      	b.n	8007db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	daf2      	bge.n	8007d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	019b      	lsls	r3, r3, #6
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <USB_FlushTxFifo+0x64>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d901      	bls.n	8007daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e006      	b.n	8007db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0320 	and.w	r3, r3, #32
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d0f0      	beq.n	8007d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	00030d40 	.word	0x00030d40

08007dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4a11      	ldr	r2, [pc, #68]	; (8007e24 <USB_FlushRxFifo+0x5c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d901      	bls.n	8007de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e018      	b.n	8007e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	daf2      	bge.n	8007dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2210      	movs	r2, #16
 8007df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a08      	ldr	r2, [pc, #32]	; (8007e24 <USB_FlushRxFifo+0x5c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d901      	bls.n	8007e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e006      	b.n	8007e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d0f0      	beq.n	8007df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	00030d40 	.word	0x00030d40

08007e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	68f9      	ldr	r1, [r7, #12]
 8007e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b087      	sub	sp, #28
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 0306 	and.w	r3, r3, #6
 8007e72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]
 8007e7e:	e00a      	b.n	8007e96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d002      	beq.n	8007e8c <USB_GetDevSpeed+0x32>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b06      	cmp	r3, #6
 8007e8a:	d102      	bne.n	8007e92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	75fb      	strb	r3, [r7, #23]
 8007e90:	e001      	b.n	8007e96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e92:	230f      	movs	r3, #15
 8007e94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d13a      	bne.n	8007f36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	69da      	ldr	r2, [r3, #28]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d155      	bne.n	8007fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	059b      	lsls	r3, r3, #22
 8007f1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	e036      	b.n	8007fa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3c:	69da      	ldr	r2, [r3, #28]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	2101      	movs	r1, #1
 8007f48:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f54:	4313      	orrs	r3, r2
 8007f56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d11a      	bne.n	8007fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	791b      	ldrb	r3, [r3, #4]
 8007f88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d161      	bne.n	8008094 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe6:	d11f      	bne.n	8008028 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008006:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 030f 	and.w	r3, r3, #15
 8008038:	2101      	movs	r1, #1
 800803a:	fa01 f303 	lsl.w	r3, r1, r3
 800803e:	b29b      	uxth	r3, r3
 8008040:	43db      	mvns	r3, r3
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008048:	4013      	ands	r3, r2
 800804a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	2101      	movs	r1, #1
 800805e:	fa01 f303 	lsl.w	r3, r1, r3
 8008062:	b29b      	uxth	r3, r3
 8008064:	43db      	mvns	r3, r3
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800806c:	4013      	ands	r3, r2
 800806e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	0159      	lsls	r1, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	440b      	add	r3, r1
 8008086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808a:	4619      	mov	r1, r3
 800808c:	4b35      	ldr	r3, [pc, #212]	; (8008164 <USB_DeactivateEndpoint+0x1b0>)
 800808e:	4013      	ands	r3, r2
 8008090:	600b      	str	r3, [r1, #0]
 8008092:	e060      	b.n	8008156 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080aa:	d11f      	bne.n	80080ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	2101      	movs	r1, #1
 80080fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	43db      	mvns	r3, r3
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800810c:	4013      	ands	r3, r2
 800810e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 030f 	and.w	r3, r3, #15
 8008120:	2101      	movs	r1, #1
 8008122:	fa01 f303 	lsl.w	r3, r1, r3
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	43db      	mvns	r3, r3
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008130:	4013      	ands	r3, r2
 8008132:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	0159      	lsls	r1, r3, #5
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	440b      	add	r3, r1
 800814a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814e:	4619      	mov	r1, r3
 8008150:	4b05      	ldr	r3, [pc, #20]	; (8008168 <USB_DeactivateEndpoint+0x1b4>)
 8008152:	4013      	ands	r3, r2
 8008154:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	ec337800 	.word	0xec337800
 8008168:	eff37800 	.word	0xeff37800

0800816c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	; 0x28
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b01      	cmp	r3, #1
 800818a:	f040 815c 	bne.w	8008446 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d132      	bne.n	80081fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f4:	0cdb      	lsrs	r3, r3, #19
 80081f6:	04db      	lsls	r3, r3, #19
 80081f8:	6113      	str	r3, [r2, #16]
 80081fa:	e074      	b.n	80082e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008216:	0cdb      	lsrs	r3, r3, #19
 8008218:	04db      	lsls	r3, r3, #19
 800821a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008236:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800823a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800823e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6999      	ldr	r1, [r3, #24]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	440b      	add	r3, r1
 8008258:	1e59      	subs	r1, r3, #1
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008262:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008264:	4b9d      	ldr	r3, [pc, #628]	; (80084dc <USB_EPStartXfer+0x370>)
 8008266:	400b      	ands	r3, r1
 8008268:	69b9      	ldr	r1, [r7, #24]
 800826a:	0148      	lsls	r0, r1, #5
 800826c:	69f9      	ldr	r1, [r7, #28]
 800826e:	4401      	add	r1, r0
 8008270:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008274:	4313      	orrs	r3, r2
 8008276:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	691a      	ldr	r2, [r3, #16]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800828e:	69b9      	ldr	r1, [r7, #24]
 8008290:	0148      	lsls	r0, r1, #5
 8008292:	69f9      	ldr	r1, [r7, #28]
 8008294:	4401      	add	r1, r0
 8008296:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800829a:	4313      	orrs	r3, r2
 800829c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	791b      	ldrb	r3, [r3, #4]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d11f      	bne.n	80082e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80082c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	0151      	lsls	r1, r2, #5
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	440a      	add	r2, r1
 80082dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d14b      	bne.n	8008384 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	461a      	mov	r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	791b      	ldrb	r3, [r3, #4]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d128      	bne.n	8008362 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d110      	bne.n	8008342 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e00f      	b.n	8008362 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800835c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008360:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	440a      	add	r2, r1
 8008378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	e133      	b.n	80085ec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	4413      	add	r3, r2
 800838c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	0151      	lsls	r1, r2, #5
 8008396:	69fa      	ldr	r2, [r7, #28]
 8008398:	440a      	add	r2, r1
 800839a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800839e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	791b      	ldrb	r3, [r3, #4]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d015      	beq.n	80083d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 811b 	beq.w	80085ec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	2101      	movs	r1, #1
 80083c8:	fa01 f303 	lsl.w	r3, r1, r3
 80083cc:	69f9      	ldr	r1, [r7, #28]
 80083ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083d2:	4313      	orrs	r3, r2
 80083d4:	634b      	str	r3, [r1, #52]	; 0x34
 80083d6:	e109      	b.n	80085ec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d110      	bne.n	800840a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	e00f      	b.n	800842a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	0151      	lsls	r1, r2, #5
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	440a      	add	r2, r1
 8008420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008428:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6919      	ldr	r1, [r3, #16]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781a      	ldrb	r2, [r3, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	b298      	uxth	r0, r3
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4603      	mov	r3, r0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fade 	bl	8008a00 <USB_WritePacket>
 8008444:	e0d2      	b.n	80085ec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008460:	0cdb      	lsrs	r3, r3, #19
 8008462:	04db      	lsls	r3, r3, #19
 8008464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	0151      	lsls	r1, r2, #5
 8008478:	69fa      	ldr	r2, [r7, #28]
 800847a:	440a      	add	r2, r1
 800847c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008488:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d126      	bne.n	80084e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084a8:	69b9      	ldr	r1, [r7, #24]
 80084aa:	0148      	lsls	r0, r1, #5
 80084ac:	69f9      	ldr	r1, [r7, #28]
 80084ae:	4401      	add	r1, r0
 80084b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084b4:	4313      	orrs	r3, r2
 80084b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	0151      	lsls	r1, r2, #5
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	440a      	add	r2, r1
 80084ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084d6:	6113      	str	r3, [r2, #16]
 80084d8:	e03a      	b.n	8008550 <USB_EPStartXfer+0x3e4>
 80084da:	bf00      	nop
 80084dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	699a      	ldr	r2, [r3, #24]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	1e5a      	subs	r2, r3, #1
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	8afa      	ldrh	r2, [r7, #22]
 80084fc:	fb03 f202 	mul.w	r2, r3, r2
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	8afb      	ldrh	r3, [r7, #22]
 8008514:	04d9      	lsls	r1, r3, #19
 8008516:	4b38      	ldr	r3, [pc, #224]	; (80085f8 <USB_EPStartXfer+0x48c>)
 8008518:	400b      	ands	r3, r1
 800851a:	69b9      	ldr	r1, [r7, #24]
 800851c:	0148      	lsls	r0, r1, #5
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	4401      	add	r1, r0
 8008522:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008526:	4313      	orrs	r3, r2
 8008528:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008540:	69b9      	ldr	r1, [r7, #24]
 8008542:	0148      	lsls	r0, r1, #5
 8008544:	69f9      	ldr	r1, [r7, #28]
 8008546:	4401      	add	r1, r0
 8008548:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800854c:	4313      	orrs	r3, r2
 800854e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10d      	bne.n	8008572 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d009      	beq.n	8008572 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6919      	ldr	r1, [r3, #16]
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856e:	460a      	mov	r2, r1
 8008570:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	791b      	ldrb	r3, [r3, #4]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d128      	bne.n	80085cc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008586:	2b00      	cmp	r3, #0
 8008588:	d110      	bne.n	80085ac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e00f      	b.n	80085cc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	0151      	lsls	r1, r2, #5
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	440a      	add	r2, r1
 80085e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	1ff80000 	.word	0x1ff80000

080085fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	2b01      	cmp	r3, #1
 800861a:	f040 80ce 	bne.w	80087ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d132      	bne.n	800868c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008644:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	015a      	lsls	r2, r3, #5
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	440a      	add	r2, r1
 8008680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008684:	0cdb      	lsrs	r3, r3, #19
 8008686:	04db      	lsls	r3, r3, #19
 8008688:	6113      	str	r3, [r2, #16]
 800868a:	e04e      	b.n	800872a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a6:	0cdb      	lsrs	r3, r3, #19
 80086a8:	04db      	lsls	r3, r3, #19
 80086aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	699a      	ldr	r2, [r3, #24]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d903      	bls.n	80086e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	0151      	lsls	r1, r2, #5
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	440a      	add	r2, r1
 80086fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008710:	691a      	ldr	r2, [r3, #16]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800871a:	6939      	ldr	r1, [r7, #16]
 800871c:	0148      	lsls	r0, r1, #5
 800871e:	6979      	ldr	r1, [r7, #20]
 8008720:	4401      	add	r1, r0
 8008722:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008726:	4313      	orrs	r3, r2
 8008728:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d11e      	bne.n	800876e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008744:	461a      	mov	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	0151      	lsls	r1, r2, #5
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	440a      	add	r2, r1
 8008762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008766:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	e097      	b.n	800889e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	440a      	add	r2, r1
 8008784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008788:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800878c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 8083 	beq.w	800889e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	2101      	movs	r1, #1
 80087aa:	fa01 f303 	lsl.w	r3, r1, r3
 80087ae:	6979      	ldr	r1, [r7, #20]
 80087b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087b4:	4313      	orrs	r3, r2
 80087b6:	634b      	str	r3, [r1, #52]	; 0x34
 80087b8:	e071      	b.n	800889e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d4:	0cdb      	lsrs	r3, r3, #19
 80087d6:	04db      	lsls	r3, r3, #19
 80087d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800884c:	6939      	ldr	r1, [r7, #16]
 800884e:	0148      	lsls	r0, r1, #5
 8008850:	6979      	ldr	r1, [r7, #20]
 8008852:	4401      	add	r1, r0
 8008854:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008858:	4313      	orrs	r3, r2
 800885a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d10d      	bne.n	800887e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6919      	ldr	r1, [r3, #16]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887a:	460a      	mov	r2, r1
 800887c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008898:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800889c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d14a      	bne.n	8008960 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e2:	f040 8086 	bne.w	80089f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	7812      	ldrb	r2, [r2, #0]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008908:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800892c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f242 7210 	movw	r2, #10000	; 0x2710
 800893a:	4293      	cmp	r3, r2
 800893c:	d902      	bls.n	8008944 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
          break;
 8008942:	e056      	b.n	80089f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800895c:	d0e7      	beq.n	800892e <USB_EPStopXfer+0x82>
 800895e:	e048      	b.n	80089f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008978:	d13b      	bne.n	80089f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	0151      	lsls	r1, r2, #5
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	440a      	add	r2, r1
 8008994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008998:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800899c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	0151      	lsls	r1, r2, #5
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	440a      	add	r2, r1
 80089b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d902      	bls.n	80089d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	75fb      	strb	r3, [r7, #23]
          break;
 80089d6:	e00c      	b.n	80089f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f0:	d0e7      	beq.n	80089c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b089      	sub	sp, #36	; 0x24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	460b      	mov	r3, r1
 8008a10:	71fb      	strb	r3, [r7, #7]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d123      	bne.n	8008a6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a26:	88bb      	ldrh	r3, [r7, #4]
 8008a28:	3303      	adds	r3, #3
 8008a2a:	089b      	lsrs	r3, r3, #2
 8008a2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	e018      	b.n	8008a66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	031a      	lsls	r2, r3, #12
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a40:	461a      	mov	r2, r3
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	3301      	adds	r3, #1
 8008a52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	3301      	adds	r3, #1
 8008a58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	3301      	adds	r3, #1
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3e2      	bcc.n	8008a34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3724      	adds	r7, #36	; 0x24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b08b      	sub	sp, #44	; 0x2c
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	089b      	lsrs	r3, r3, #2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	623b      	str	r3, [r7, #32]
 8008aa6:	e014      	b.n	8008ad2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	3301      	adds	r3, #1
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	3301      	adds	r3, #1
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	623b      	str	r3, [r7, #32]
 8008ad2:	6a3a      	ldr	r2, [r7, #32]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d3e6      	bcc.n	8008aa8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ada:	8bfb      	ldrh	r3, [r7, #30]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01e      	beq.n	8008b1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aea:	461a      	mov	r2, r3
 8008aec:	f107 0310 	add.w	r3, r7, #16
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	fa22 f303 	lsr.w	r3, r2, r3
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	701a      	strb	r2, [r3, #0]
      i++;
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	3301      	adds	r3, #1
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b12:	8bfb      	ldrh	r3, [r7, #30]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b18:	8bfb      	ldrh	r3, [r7, #30]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1ea      	bne.n	8008af4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	372c      	adds	r7, #44	; 0x2c
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	785b      	ldrb	r3, [r3, #1]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d12c      	bne.n	8008ba2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	db12      	blt.n	8008b80 <USB_EPSetStall+0x54>
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00f      	beq.n	8008b80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e02b      	b.n	8008bfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	db12      	blt.n	8008bda <USB_EPSetStall+0xae>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00f      	beq.n	8008bda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d128      	bne.n	8008c76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	791b      	ldrb	r3, [r3, #4]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d003      	beq.n	8008c54 <USB_EPClearStall+0x4c>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	791b      	ldrb	r3, [r3, #4]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d138      	bne.n	8008cc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	e027      	b.n	8008cc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	0151      	lsls	r1, r2, #5
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	440a      	add	r2, r1
 8008c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	791b      	ldrb	r3, [r3, #4]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d003      	beq.n	8008ca6 <USB_EPClearStall+0x9e>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	791b      	ldrb	r3, [r3, #4]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d10f      	bne.n	8008cc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	0151      	lsls	r1, r2, #5
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	440a      	add	r2, r1
 8008cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008cf6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d4e:	f023 0302 	bic.w	r3, r3, #2
 8008d52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d7c:	f023 0303 	bic.w	r3, r3, #3
 8008d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d90:	f043 0302 	orr.w	r3, r3, #2
 8008d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	4013      	ands	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	4013      	ands	r3, r2
 8008dec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	0c1b      	lsrs	r3, r3, #16
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b085      	sub	sp, #20
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	b29b      	uxth	r3, r3
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e60:	68bb      	ldr	r3, [r7, #8]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b087      	sub	sp, #28
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9e:	01db      	lsls	r3, r3, #7
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f04:	f023 0307 	bic.w	r3, r3, #7
 8008f08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	460b      	mov	r3, r1
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	333c      	adds	r3, #60	; 0x3c
 8008f42:	3304      	adds	r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4a26      	ldr	r2, [pc, #152]	; (8008fe4 <USB_EP0_OutStart+0xb8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d90a      	bls.n	8008f66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f60:	d101      	bne.n	8008f66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e037      	b.n	8008fd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f94:	f043 0318 	orr.w	r3, r3, #24
 8008f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fae:	7afb      	ldrb	r3, [r7, #11]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d10f      	bne.n	8008fd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fba:	461a      	mov	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	4f54300a 	.word	0x4f54300a

08008fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4a13      	ldr	r2, [pc, #76]	; (800904c <USB_CoreReset+0x64>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e01b      	b.n	800903e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	daf2      	bge.n	8008ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f043 0201 	orr.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3301      	adds	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a09      	ldr	r2, [pc, #36]	; (800904c <USB_CoreReset+0x64>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d901      	bls.n	8009030 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e006      	b.n	800903e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b01      	cmp	r3, #1
 800903a:	d0f0      	beq.n	800901e <USB_CoreReset+0x36>

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	00030d40 	.word	0x00030d40

08009050 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8009054:	f001 f90e 	bl	800a274 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8009058:	2200      	movs	r2, #0
 800905a:	4912      	ldr	r1, [pc, #72]	; (80090a4 <MX_USB_DEVICE_Init+0x54>)
 800905c:	4812      	ldr	r0, [pc, #72]	; (80090a8 <MX_USB_DEVICE_Init+0x58>)
 800905e:	f001 f9cb 	bl	800a3f8 <USBD_Init>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8009068:	f7f8 f88e 	bl	8001188 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800906c:	490f      	ldr	r1, [pc, #60]	; (80090ac <MX_USB_DEVICE_Init+0x5c>)
 800906e:	480e      	ldr	r0, [pc, #56]	; (80090a8 <MX_USB_DEVICE_Init+0x58>)
 8009070:	f001 f9ee 	bl	800a450 <USBD_RegisterClass>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800907a:	f7f8 f885 	bl	8001188 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800907e:	490c      	ldr	r1, [pc, #48]	; (80090b0 <MX_USB_DEVICE_Init+0x60>)
 8009080:	4809      	ldr	r0, [pc, #36]	; (80090a8 <MX_USB_DEVICE_Init+0x58>)
 8009082:	f000 fe2d 	bl	8009ce0 <USBD_CDC_ACM_RegisterInterface>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800908c:	f7f8 f87c 	bl	8001188 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8009090:	4805      	ldr	r0, [pc, #20]	; (80090a8 <MX_USB_DEVICE_Init+0x58>)
 8009092:	f001 fa1b 	bl	800a4cc <USBD_Start>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800909c:	f7f8 f874 	bl	8001188 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090a0:	bf00      	nop
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	200000d8 	.word	0x200000d8
 80090a8:	20000db4 	.word	0x20000db4
 80090ac:	20000310 	.word	0x20000310
 80090b0:	200000c4 	.word	0x200000c4

080090b4 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	01db      	lsls	r3, r3, #7
 80090c2:	4a06      	ldr	r2, [pc, #24]	; (80090dc <CDC_Init+0x28>)
 80090c4:	441a      	add	r2, r3
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	4905      	ldr	r1, [pc, #20]	; (80090e0 <CDC_Init+0x2c>)
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fe42 	bl	8009d54 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 80090d0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200010d0 	.word	0x200010d0
 80090e0:	20000db4 	.word	0x20000db4

080090e4 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 80090ee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	603a      	str	r2, [r7, #0]
 8009104:	461a      	mov	r2, r3
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
 800910a:	460b      	mov	r3, r1
 800910c:	71bb      	strb	r3, [r7, #6]
 800910e:	4613      	mov	r3, r2
 8009110:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8009112:	79bb      	ldrb	r3, [r7, #6]
 8009114:	2b23      	cmp	r3, #35	; 0x23
 8009116:	f200 80b6 	bhi.w	8009286 <CDC_Control+0x18a>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <CDC_Control+0x24>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009287 	.word	0x08009287
 8009124:	08009287 	.word	0x08009287
 8009128:	08009287 	.word	0x08009287
 800912c:	08009287 	.word	0x08009287
 8009130:	08009287 	.word	0x08009287
 8009134:	08009287 	.word	0x08009287
 8009138:	08009287 	.word	0x08009287
 800913c:	08009287 	.word	0x08009287
 8009140:	08009287 	.word	0x08009287
 8009144:	08009287 	.word	0x08009287
 8009148:	08009287 	.word	0x08009287
 800914c:	08009287 	.word	0x08009287
 8009150:	08009287 	.word	0x08009287
 8009154:	08009287 	.word	0x08009287
 8009158:	08009287 	.word	0x08009287
 800915c:	08009287 	.word	0x08009287
 8009160:	08009287 	.word	0x08009287
 8009164:	08009287 	.word	0x08009287
 8009168:	08009287 	.word	0x08009287
 800916c:	08009287 	.word	0x08009287
 8009170:	08009287 	.word	0x08009287
 8009174:	08009287 	.word	0x08009287
 8009178:	08009287 	.word	0x08009287
 800917c:	08009287 	.word	0x08009287
 8009180:	08009287 	.word	0x08009287
 8009184:	08009287 	.word	0x08009287
 8009188:	08009287 	.word	0x08009287
 800918c:	08009287 	.word	0x08009287
 8009190:	08009287 	.word	0x08009287
 8009194:	08009287 	.word	0x08009287
 8009198:	08009287 	.word	0x08009287
 800919c:	08009287 	.word	0x08009287
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	08009211 	.word	0x08009211
 80091a8:	08009287 	.word	0x08009287
 80091ac:	08009287 	.word	0x08009287
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	3301      	adds	r3, #1
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	3302      	adds	r3, #2
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80091c8:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	3303      	adds	r3, #3
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	061b      	lsls	r3, r3, #24
 80091d2:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	4611      	mov	r1, r2
 80091d8:	4a2f      	ldr	r2, [pc, #188]	; (8009298 <CDC_Control+0x19c>)
 80091da:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	7911      	ldrb	r1, [r2, #4]
 80091e4:	4a2c      	ldr	r2, [pc, #176]	; (8009298 <CDC_Control+0x19c>)
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	4413      	add	r3, r2
 80091ea:	460a      	mov	r2, r1
 80091ec:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	7951      	ldrb	r1, [r2, #5]
 80091f4:	4a28      	ldr	r2, [pc, #160]	; (8009298 <CDC_Control+0x19c>)
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	4413      	add	r3, r2
 80091fa:	460a      	mov	r2, r1
 80091fc:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	7991      	ldrb	r1, [r2, #6]
 8009204:	4a24      	ldr	r2, [pc, #144]	; (8009298 <CDC_Control+0x19c>)
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	4413      	add	r3, r2
 800920a:	460a      	mov	r2, r1
 800920c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800920e:	e03b      	b.n	8009288 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	4a21      	ldr	r2, [pc, #132]	; (8009298 <CDC_Control+0x19c>)
 8009214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009218:	b2da      	uxtb	r2, r3
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	4a1d      	ldr	r2, [pc, #116]	; (8009298 <CDC_Control+0x19c>)
 8009222:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009226:	0a1a      	lsrs	r2, r3, #8
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	4a19      	ldr	r2, [pc, #100]	; (8009298 <CDC_Control+0x19c>)
 8009234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009238:	0c1a      	lsrs	r2, r3, #16
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	3302      	adds	r3, #2
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	4a14      	ldr	r2, [pc, #80]	; (8009298 <CDC_Control+0x19c>)
 8009246:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800924a:	0e1a      	lsrs	r2, r3, #24
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	3303      	adds	r3, #3
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	3204      	adds	r2, #4
 800925a:	490f      	ldr	r1, [pc, #60]	; (8009298 <CDC_Control+0x19c>)
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	440b      	add	r3, r1
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	3205      	adds	r2, #5
 800926a:	490b      	ldr	r1, [pc, #44]	; (8009298 <CDC_Control+0x19c>)
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	440b      	add	r3, r1
 8009270:	795b      	ldrb	r3, [r3, #5]
 8009272:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	3206      	adds	r2, #6
 800927a:	4907      	ldr	r1, [pc, #28]	; (8009298 <CDC_Control+0x19c>)
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	440b      	add	r3, r1
 8009280:	799b      	ldrb	r3, [r3, #6]
 8009282:	7013      	strb	r3, [r2, #0]
    break;
 8009284:	e000      	b.n	8009288 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009286:	bf00      	nop
  }

  return (USBD_OK);
 8009288:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800928a:	4618      	mov	r0, r3
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20001250 	.word	0x20001250

0800929c <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	4916      	ldr	r1, [pc, #88]	; (8009308 <CDC_Receive+0x6c>)
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fd4f 	bl	8009d54 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	4913      	ldr	r1, [pc, #76]	; (8009308 <CDC_Receive+0x6c>)
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fdaa 	bl	8009e14 <USBD_CDC_ReceivePacket>
	switch(cdc_ch){
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d014      	beq.n	80092f0 <CDC_Receive+0x54>
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	dc19      	bgt.n	80092fe <CDC_Receive+0x62>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <CDC_Receive+0x38>
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d007      	beq.n	80092e2 <CDC_Receive+0x46>
 80092d2:	e014      	b.n	80092fe <CDC_Receive+0x62>
		case 0:
			memcpy(rxBuffer0,Buf,*Len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	480b      	ldr	r0, [pc, #44]	; (800930c <CDC_Receive+0x70>)
 80092de:	f005 faa7 	bl	800e830 <memcpy>
		case 1:
			memcpy(rxBuffer1,Buf,*Len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	4809      	ldr	r0, [pc, #36]	; (8009310 <CDC_Receive+0x74>)
 80092ec:	f005 faa0 	bl	800e830 <memcpy>
		case 2:
			memcpy(rxBuffer2,Buf,*Len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	461a      	mov	r2, r3
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	4806      	ldr	r0, [pc, #24]	; (8009314 <CDC_Receive+0x78>)
 80092fa:	f005 fa99 	bl	800e830 <memcpy>
	}
  return (USBD_OK);
 80092fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20000db4 	.word	0x20000db4
 800930c:	20000644 	.word	0x20000644
 8009310:	20000684 	.word	0x20000684
 8009314:	200006c4 	.word	0x200006c4

08009318 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	461a      	mov	r2, r3
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	4613      	mov	r3, r2
 800932a:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
 8009348:	4613      	mov	r3, r2
 800934a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	f240 621c 	movw	r2, #1564	; 0x61c
 800935a:	fb02 f303 	mul.w	r3, r2, r3
 800935e:	4a0e      	ldr	r2, [pc, #56]	; (8009398 <CDC_Transmit+0x5c>)
 8009360:	4413      	add	r3, r2
 8009362:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800936e:	2301      	movs	r3, #1
 8009370:	e00d      	b.n	800938e <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8009372:	88bb      	ldrh	r3, [r7, #4]
 8009374:	79f8      	ldrb	r0, [r7, #7]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4908      	ldr	r1, [pc, #32]	; (800939c <CDC_Transmit+0x60>)
 800937a:	f000 fcc7 	bl	8009d0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	4906      	ldr	r1, [pc, #24]	; (800939c <CDC_Transmit+0x60>)
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fd04 	bl	8009d90 <USBD_CDC_TransmitPacket>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20001480 	.word	0x20001480
 800939c:	20000db4 	.word	0x20000db4

080093a0 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2212      	movs	r2, #18
 80093b0:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 80093b2:	4b03      	ldr	r3, [pc, #12]	; (80093c0 <USBD_DeviceDescriptor+0x20>)
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	200000f4 	.word	0x200000f4

080093c4 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	6039      	str	r1, [r7, #0]
 80093ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2204      	movs	r2, #4
 80093d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093d6:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <USBD_LangIDStrDescriptor+0x20>)
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	20000108 	.word	0x20000108

080093e8 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d105      	bne.n	8009406 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4907      	ldr	r1, [pc, #28]	; (800941c <USBD_ProductStrDescriptor+0x34>)
 80093fe:	4808      	ldr	r0, [pc, #32]	; (8009420 <USBD_ProductStrDescriptor+0x38>)
 8009400:	f002 f8a3 	bl	800b54a <USBD_GetString>
 8009404:	e004      	b.n	8009410 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4904      	ldr	r1, [pc, #16]	; (800941c <USBD_ProductStrDescriptor+0x34>)
 800940a:	4805      	ldr	r0, [pc, #20]	; (8009420 <USBD_ProductStrDescriptor+0x38>)
 800940c:	f002 f89d 	bl	800b54a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <USBD_ProductStrDescriptor+0x34>)
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20001268 	.word	0x20001268
 8009420:	0800f194 	.word	0x0800f194

08009424 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	6039      	str	r1, [r7, #0]
 800942e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	4904      	ldr	r1, [pc, #16]	; (8009444 <USBD_ManufacturerStrDescriptor+0x20>)
 8009434:	4804      	ldr	r0, [pc, #16]	; (8009448 <USBD_ManufacturerStrDescriptor+0x24>)
 8009436:	f002 f888 	bl	800b54a <USBD_GetString>
  return USBD_StrDesc;
 800943a:	4b02      	ldr	r3, [pc, #8]	; (8009444 <USBD_ManufacturerStrDescriptor+0x20>)
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20001268 	.word	0x20001268
 8009448:	0800f1ac 	.word	0x0800f1ac

0800944c <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	6039      	str	r1, [r7, #0]
 8009456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	221a      	movs	r2, #26
 800945c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800945e:	f000 f843 	bl	80094e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009462:	4b02      	ldr	r3, [pc, #8]	; (800946c <USBD_SerialStrDescriptor+0x20>)
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	2000010c 	.word	0x2000010c

08009470 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	6039      	str	r1, [r7, #0]
 800947a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d105      	bne.n	800948e <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4907      	ldr	r1, [pc, #28]	; (80094a4 <USBD_ConfigStrDescriptor+0x34>)
 8009486:	4808      	ldr	r0, [pc, #32]	; (80094a8 <USBD_ConfigStrDescriptor+0x38>)
 8009488:	f002 f85f 	bl	800b54a <USBD_GetString>
 800948c:	e004      	b.n	8009498 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	4904      	ldr	r1, [pc, #16]	; (80094a4 <USBD_ConfigStrDescriptor+0x34>)
 8009492:	4805      	ldr	r0, [pc, #20]	; (80094a8 <USBD_ConfigStrDescriptor+0x38>)
 8009494:	f002 f859 	bl	800b54a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009498:	4b02      	ldr	r3, [pc, #8]	; (80094a4 <USBD_ConfigStrDescriptor+0x34>)
}
 800949a:	4618      	mov	r0, r3
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20001268 	.word	0x20001268
 80094a8:	0800f1b8 	.word	0x0800f1b8

080094ac <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	6039      	str	r1, [r7, #0]
 80094b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d105      	bne.n	80094ca <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	4907      	ldr	r1, [pc, #28]	; (80094e0 <USBD_InterfaceStrDescriptor+0x34>)
 80094c2:	4808      	ldr	r0, [pc, #32]	; (80094e4 <USBD_InterfaceStrDescriptor+0x38>)
 80094c4:	f002 f841 	bl	800b54a <USBD_GetString>
 80094c8:	e004      	b.n	80094d4 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	4904      	ldr	r1, [pc, #16]	; (80094e0 <USBD_InterfaceStrDescriptor+0x34>)
 80094ce:	4805      	ldr	r0, [pc, #20]	; (80094e4 <USBD_InterfaceStrDescriptor+0x38>)
 80094d0:	f002 f83b 	bl	800b54a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094d4:	4b02      	ldr	r3, [pc, #8]	; (80094e0 <USBD_InterfaceStrDescriptor+0x34>)
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20001268 	.word	0x20001268
 80094e4:	0800f1c8 	.word	0x0800f1c8

080094e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <Get_SerialNum+0x44>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094f4:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <Get_SerialNum+0x48>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094fa:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <Get_SerialNum+0x4c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4413      	add	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800950e:	2208      	movs	r2, #8
 8009510:	4909      	ldr	r1, [pc, #36]	; (8009538 <Get_SerialNum+0x50>)
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f814 	bl	8009540 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009518:	2204      	movs	r2, #4
 800951a:	4908      	ldr	r1, [pc, #32]	; (800953c <Get_SerialNum+0x54>)
 800951c:	68b8      	ldr	r0, [r7, #8]
 800951e:	f000 f80f 	bl	8009540 <IntToUnicode>
  }
}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	1fff7a10 	.word	0x1fff7a10
 8009530:	1fff7a14 	.word	0x1fff7a14
 8009534:	1fff7a18 	.word	0x1fff7a18
 8009538:	2000010e 	.word	0x2000010e
 800953c:	2000011e 	.word	0x2000011e

08009540 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009552:	2300      	movs	r3, #0
 8009554:	75fb      	strb	r3, [r7, #23]
 8009556:	e027      	b.n	80095a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	0f1b      	lsrs	r3, r3, #28
 800955c:	2b09      	cmp	r3, #9
 800955e:	d80b      	bhi.n	8009578 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	0f1b      	lsrs	r3, r3, #28
 8009564:	b2da      	uxtb	r2, r3
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4619      	mov	r1, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	440b      	add	r3, r1
 8009570:	3230      	adds	r2, #48	; 0x30
 8009572:	b2d2      	uxtb	r2, r2
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	e00a      	b.n	800958e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	0f1b      	lsrs	r3, r3, #28
 800957c:	b2da      	uxtb	r2, r3
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	4619      	mov	r1, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	440b      	add	r3, r1
 8009588:	3237      	adds	r2, #55	; 0x37
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	3301      	adds	r3, #1
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4413      	add	r3, r2
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	3301      	adds	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
 80095a8:	7dfa      	ldrb	r2, [r7, #23]
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d3d3      	bcc.n	8009558 <IntToUnicode+0x18>
  }
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
 80095d4:	e0c6      	b.n	8009764 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	f240 621c 	movw	r2, #1564	; 0x61c
 80095dc:	fb02 f303 	mul.w	r3, r2, r3
 80095e0:	4a65      	ldr	r2, [pc, #404]	; (8009778 <USBD_CDC_Init+0x1b8>)
 80095e2:	4413      	add	r3, r2
 80095e4:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7c1b      	ldrb	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d13d      	bne.n	800966a <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	4a62      	ldr	r2, [pc, #392]	; (800977c <USBD_CDC_Init+0x1bc>)
 80095f2:	5cd1      	ldrb	r1, [r2, r3]
 80095f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f8:	2202      	movs	r2, #2
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f002 fa0b 	bl	800ba16 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4a5e      	ldr	r2, [pc, #376]	; (800977c <USBD_CDC_Init+0x1bc>)
 8009604:	5cd3      	ldrb	r3, [r2, r3]
 8009606:	f003 020f 	and.w	r2, r3, #15
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	3324      	adds	r3, #36	; 0x24
 8009618:	2201      	movs	r2, #1
 800961a:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4a58      	ldr	r2, [pc, #352]	; (8009780 <USBD_CDC_Init+0x1c0>)
 8009620:	5cd1      	ldrb	r1, [r2, r3]
 8009622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009626:	2202      	movs	r2, #2
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f002 f9f4 	bl	800ba16 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	4a53      	ldr	r2, [pc, #332]	; (8009780 <USBD_CDC_Init+0x1c0>)
 8009632:	5cd3      	ldrb	r3, [r2, r3]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009648:	2201      	movs	r2, #1
 800964a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	4a4d      	ldr	r2, [pc, #308]	; (8009784 <USBD_CDC_Init+0x1c4>)
 8009650:	5cd3      	ldrb	r3, [r2, r3]
 8009652:	f003 020f 	and.w	r2, r3, #15
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3326      	adds	r3, #38	; 0x26
 8009664:	2210      	movs	r2, #16
 8009666:	801a      	strh	r2, [r3, #0]
 8009668:	e03a      	b.n	80096e0 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	4a43      	ldr	r2, [pc, #268]	; (800977c <USBD_CDC_Init+0x1bc>)
 800966e:	5cd1      	ldrb	r1, [r2, r3]
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	2202      	movs	r2, #2
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 f9ce 	bl	800ba16 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	4a3f      	ldr	r2, [pc, #252]	; (800977c <USBD_CDC_Init+0x1bc>)
 800967e:	5cd3      	ldrb	r3, [r2, r3]
 8009680:	f003 020f 	and.w	r2, r3, #15
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	3324      	adds	r3, #36	; 0x24
 8009692:	2201      	movs	r2, #1
 8009694:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	4a39      	ldr	r2, [pc, #228]	; (8009780 <USBD_CDC_Init+0x1c0>)
 800969a:	5cd1      	ldrb	r1, [r2, r3]
 800969c:	2340      	movs	r3, #64	; 0x40
 800969e:	2202      	movs	r2, #2
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f002 f9b8 	bl	800ba16 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	4a35      	ldr	r2, [pc, #212]	; (8009780 <USBD_CDC_Init+0x1c0>)
 80096aa:	5cd3      	ldrb	r3, [r2, r3]
 80096ac:	f003 020f 	and.w	r2, r3, #15
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096c0:	2201      	movs	r2, #1
 80096c2:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4a2f      	ldr	r2, [pc, #188]	; (8009784 <USBD_CDC_Init+0x1c4>)
 80096c8:	5cd3      	ldrb	r3, [r2, r3]
 80096ca:	f003 020f 	and.w	r2, r3, #15
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	440b      	add	r3, r1
 80096da:	3326      	adds	r3, #38	; 0x26
 80096dc:	2210      	movs	r2, #16
 80096de:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4a28      	ldr	r2, [pc, #160]	; (8009784 <USBD_CDC_Init+0x1c4>)
 80096e4:	5cd1      	ldrb	r1, [r2, r3]
 80096e6:	2308      	movs	r3, #8
 80096e8:	2203      	movs	r2, #3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f002 f993 	bl	800ba16 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	4a24      	ldr	r2, [pc, #144]	; (8009784 <USBD_CDC_Init+0x1c4>)
 80096f4:	5cd3      	ldrb	r3, [r2, r3]
 80096f6:	f003 020f 	and.w	r2, r3, #15
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	3324      	adds	r3, #36	; 0x24
 8009708:	2201      	movs	r2, #1
 800970a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	7bfa      	ldrb	r2, [r7, #15]
 8009716:	4610      	mov	r0, r2
 8009718:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    hcdc->RxState = 0U;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2200      	movs	r2, #0
 8009726:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	7c1b      	ldrb	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	4a12      	ldr	r2, [pc, #72]	; (8009780 <USBD_CDC_Init+0x1c0>)
 8009736:	5cd1      	ldrb	r1, [r2, r3]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800973e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f002 fa56 	bl	800bbf4 <USBD_LL_PrepareReceive>
 8009748:	e009      	b.n	800975e <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <USBD_CDC_Init+0x1c0>)
 800974e:	5cd1      	ldrb	r1, [r2, r3]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8009756:	2340      	movs	r3, #64	; 0x40
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f002 fa4b 	bl	800bbf4 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	3301      	adds	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	2b02      	cmp	r3, #2
 8009768:	f67f af35 	bls.w	80095d6 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20001480 	.word	0x20001480
 800977c:	20001468 	.word	0x20001468
 8009780:	2000146c 	.word	0x2000146c
 8009784:	20001470 	.word	0x20001470

08009788 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
 8009798:	e057      	b.n	800984a <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	4a2f      	ldr	r2, [pc, #188]	; (800985c <USBD_CDC_DeInit+0xd4>)
 800979e:	5cd3      	ldrb	r3, [r2, r3]
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f002 f95d 	bl	800ba62 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4a2c      	ldr	r2, [pc, #176]	; (800985c <USBD_CDC_DeInit+0xd4>)
 80097ac:	5cd3      	ldrb	r3, [r2, r3]
 80097ae:	f003 020f 	and.w	r2, r3, #15
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	440b      	add	r3, r1
 80097be:	3324      	adds	r3, #36	; 0x24
 80097c0:	2200      	movs	r2, #0
 80097c2:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	4a26      	ldr	r2, [pc, #152]	; (8009860 <USBD_CDC_DeInit+0xd8>)
 80097c8:	5cd3      	ldrb	r3, [r2, r3]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 f948 	bl	800ba62 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	4a22      	ldr	r2, [pc, #136]	; (8009860 <USBD_CDC_DeInit+0xd8>)
 80097d6:	5cd3      	ldrb	r3, [r2, r3]
 80097d8:	f003 020f 	and.w	r2, r3, #15
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097ec:	2200      	movs	r2, #0
 80097ee:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4a1c      	ldr	r2, [pc, #112]	; (8009864 <USBD_CDC_DeInit+0xdc>)
 80097f4:	5cd3      	ldrb	r3, [r2, r3]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f002 f932 	bl	800ba62 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	4a18      	ldr	r2, [pc, #96]	; (8009864 <USBD_CDC_DeInit+0xdc>)
 8009802:	5cd3      	ldrb	r3, [r2, r3]
 8009804:	f003 020f 	and.w	r2, r3, #15
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	440b      	add	r3, r1
 8009814:	3324      	adds	r3, #36	; 0x24
 8009816:	2200      	movs	r2, #0
 8009818:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	4a11      	ldr	r2, [pc, #68]	; (8009864 <USBD_CDC_DeInit+0xdc>)
 800981e:	5cd3      	ldrb	r3, [r2, r3]
 8009820:	f003 020f 	and.w	r2, r3, #15
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	3326      	adds	r3, #38	; 0x26
 8009832:	2200      	movs	r2, #0
 8009834:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	7bfa      	ldrb	r2, [r7, #15]
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	3301      	adds	r3, #1
 8009848:	73fb      	strb	r3, [r7, #15]
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d9a4      	bls.n	800979a <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001468 	.word	0x20001468
 8009860:	2000146c 	.word	0x2000146c
 8009864:	20001470 	.word	0x20001470

08009868 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009886:	2300      	movs	r3, #0
 8009888:	757b      	strb	r3, [r7, #21]
 800988a:	e015      	b.n	80098b8 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	889b      	ldrh	r3, [r3, #4]
 8009890:	b2da      	uxtb	r2, r3
 8009892:	7d7b      	ldrb	r3, [r7, #21]
 8009894:	496d      	ldr	r1, [pc, #436]	; (8009a4c <USBD_CDC_Setup+0x1e4>)
 8009896:	5ccb      	ldrb	r3, [r1, r3]
 8009898:	429a      	cmp	r2, r3
 800989a:	d007      	beq.n	80098ac <USBD_CDC_Setup+0x44>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	889b      	ldrh	r3, [r3, #4]
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	7d7b      	ldrb	r3, [r7, #21]
 80098a4:	496a      	ldr	r1, [pc, #424]	; (8009a50 <USBD_CDC_Setup+0x1e8>)
 80098a6:	5ccb      	ldrb	r3, [r1, r3]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d102      	bne.n	80098b2 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80098ac:	7d7b      	ldrb	r3, [r7, #21]
 80098ae:	75bb      	strb	r3, [r7, #22]
      break;
 80098b0:	e005      	b.n	80098be <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80098b2:	7d7b      	ldrb	r3, [r7, #21]
 80098b4:	3301      	adds	r3, #1
 80098b6:	757b      	strb	r3, [r7, #21]
 80098b8:	7d7b      	ldrb	r3, [r7, #21]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d9e6      	bls.n	800988c <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 80098be:	7dbb      	ldrb	r3, [r7, #22]
 80098c0:	f240 621c 	movw	r2, #1564	; 0x61c
 80098c4:	fb02 f303 	mul.w	r3, r2, r3
 80098c8:	4a62      	ldr	r2, [pc, #392]	; (8009a54 <USBD_CDC_Setup+0x1ec>)
 80098ca:	4413      	add	r3, r2
 80098cc:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d04a      	beq.n	8009970 <USBD_CDC_Setup+0x108>
 80098da:	2b20      	cmp	r3, #32
 80098dc:	f040 80aa 	bne.w	8009a34 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	88db      	ldrh	r3, [r3, #6]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d038      	beq.n	800995a <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	b25b      	sxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da1d      	bge.n	800992e <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098f8:	689c      	ldr	r4, [r3, #8]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	7859      	ldrb	r1, [r3, #1]
 80098fe:	7dbb      	ldrb	r3, [r7, #22]
 8009900:	025b      	lsls	r3, r3, #9
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	441a      	add	r2, r3
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	88db      	ldrh	r3, [r3, #6]
 800990a:	7db8      	ldrb	r0, [r7, #22]
 800990c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	88db      	ldrh	r3, [r3, #6]
 8009912:	2b07      	cmp	r3, #7
 8009914:	bf28      	it	cs
 8009916:	2307      	movcs	r3, #7
 8009918:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800991a:	7dbb      	ldrb	r3, [r7, #22]
 800991c:	025b      	lsls	r3, r3, #9
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4413      	add	r3, r2
 8009922:	89fa      	ldrh	r2, [r7, #14]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 fe6f 	bl	800b60a <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 800992c:	e089      	b.n	8009a42 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	785a      	ldrb	r2, [r3, #1]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	88db      	ldrh	r3, [r3, #6]
 800993c:	b2da      	uxtb	r2, r3
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8009944:	7dbb      	ldrb	r3, [r7, #22]
 8009946:	025b      	lsls	r3, r3, #9
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	18d1      	adds	r1, r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	88db      	ldrh	r3, [r3, #6]
 8009950:	461a      	mov	r2, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 fe85 	bl	800b662 <USBD_CtlPrepareRx>
    break;
 8009958:	e073      	b.n	8009a42 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009960:	689c      	ldr	r4, [r3, #8]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	7859      	ldrb	r1, [r3, #1]
 8009966:	7db8      	ldrb	r0, [r7, #22]
 8009968:	2300      	movs	r3, #0
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	47a0      	blx	r4
    break;
 800996e:	e068      	b.n	8009a42 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	785b      	ldrb	r3, [r3, #1]
 8009974:	2b0b      	cmp	r3, #11
 8009976:	d852      	bhi.n	8009a1e <USBD_CDC_Setup+0x1b6>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_CDC_Setup+0x118>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	080099b1 	.word	0x080099b1
 8009984:	08009a2d 	.word	0x08009a2d
 8009988:	08009a1f 	.word	0x08009a1f
 800998c:	08009a1f 	.word	0x08009a1f
 8009990:	08009a1f 	.word	0x08009a1f
 8009994:	08009a1f 	.word	0x08009a1f
 8009998:	08009a1f 	.word	0x08009a1f
 800999c:	08009a1f 	.word	0x08009a1f
 80099a0:	08009a1f 	.word	0x08009a1f
 80099a4:	08009a1f 	.word	0x08009a1f
 80099a8:	080099db 	.word	0x080099db
 80099ac:	08009a05 	.word	0x08009a05
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d107      	bne.n	80099cc <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099bc:	f107 030a 	add.w	r3, r7, #10
 80099c0:	2202      	movs	r2, #2
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fe20 	bl	800b60a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80099ca:	e032      	b.n	8009a32 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fdaa 	bl	800b528 <USBD_CtlError>
        ret = USBD_FAIL;
 80099d4:	2303      	movs	r3, #3
 80099d6:	75fb      	strb	r3, [r7, #23]
      break;
 80099d8:	e02b      	b.n	8009a32 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d107      	bne.n	80099f6 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099e6:	f107 030d 	add.w	r3, r7, #13
 80099ea:	2201      	movs	r2, #1
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 fe0b 	bl	800b60a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80099f4:	e01d      	b.n	8009a32 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 fd95 	bl	800b528 <USBD_CtlError>
        ret = USBD_FAIL;
 80099fe:	2303      	movs	r3, #3
 8009a00:	75fb      	strb	r3, [r7, #23]
      break;
 8009a02:	e016      	b.n	8009a32 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d00f      	beq.n	8009a30 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f001 fd88 	bl	800b528 <USBD_CtlError>
        ret = USBD_FAIL;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009a1c:	e008      	b.n	8009a30 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 fd81 	bl	800b528 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a26:	2303      	movs	r3, #3
 8009a28:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2a:	e002      	b.n	8009a32 <USBD_CDC_Setup+0x1ca>
      break;
 8009a2c:	bf00      	nop
 8009a2e:	e008      	b.n	8009a42 <USBD_CDC_Setup+0x1da>
      break;
 8009a30:	bf00      	nop
    }
    break;
 8009a32:	e006      	b.n	8009a42 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fd76 	bl	800b528 <USBD_CtlError>
    ret = USBD_FAIL;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	75fb      	strb	r3, [r7, #23]
    break;
 8009a40:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd90      	pop	{r4, r7, pc}
 8009a4c:	20001474 	.word	0x20001474
 8009a50:	20001478 	.word	0x20001478
 8009a54:	20001480 	.word	0x20001480

08009a58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a58:	b590      	push	{r4, r7, lr}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8009a6e:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a74:	2300      	movs	r3, #0
 8009a76:	75bb      	strb	r3, [r7, #22]
 8009a78:	e00d      	b.n	8009a96 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009a7a:	78fa      	ldrb	r2, [r7, #3]
 8009a7c:	7dbb      	ldrb	r3, [r7, #22]
 8009a7e:	4934      	ldr	r1, [pc, #208]	; (8009b50 <USBD_CDC_DataIn+0xf8>)
 8009a80:	5ccb      	ldrb	r3, [r1, r3]
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d102      	bne.n	8009a90 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009a8a:	7dbb      	ldrb	r3, [r7, #22]
 8009a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8e:	e005      	b.n	8009a9c <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a90:	7dbb      	ldrb	r3, [r7, #22]
 8009a92:	3301      	adds	r3, #1
 8009a94:	75bb      	strb	r3, [r7, #22]
 8009a96:	7dbb      	ldrb	r3, [r7, #22]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d9ee      	bls.n	8009a7a <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	f240 621c 	movw	r2, #1564	; 0x61c
 8009aa2:	fb02 f303 	mul.w	r3, r2, r3
 8009aa6:	4a2b      	ldr	r2, [pc, #172]	; (8009b54 <USBD_CDC_DataIn+0xfc>)
 8009aa8:	4413      	add	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	3318      	adds	r3, #24
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d029      	beq.n	8009b16 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	78f9      	ldrb	r1, [r7, #3]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	440b      	add	r3, r1
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4403      	add	r3, r0
 8009ae2:	3348      	adds	r3, #72	; 0x48
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	fbb2 f1f3 	udiv	r1, r2, r3
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d110      	bne.n	8009b16 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	3318      	adds	r3, #24
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b08:	78f9      	ldrb	r1, [r7, #3]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f002 f84f 	bl	800bbb2 <USBD_LL_Transmit>
 8009b14:	e016      	b.n	8009b44 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00c      	beq.n	8009b44 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b30:	691c      	ldr	r4, [r3, #16]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f503 62c2 	add.w	r2, r3, #1552	; 0x610
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	7df8      	ldrb	r0, [r7, #23]
 8009b42:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	371c      	adds	r7, #28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd90      	pop	{r4, r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20001468 	.word	0x20001468
 8009b54:	20001480 	.word	0x20001480

08009b58 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73bb      	strb	r3, [r7, #14]
 8009b70:	e00b      	b.n	8009b8a <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009b72:	7bbb      	ldrb	r3, [r7, #14]
 8009b74:	4a17      	ldr	r2, [pc, #92]	; (8009bd4 <USBD_CDC_DataOut+0x7c>)
 8009b76:	5cd3      	ldrb	r3, [r2, r3]
 8009b78:	78fa      	ldrb	r2, [r7, #3]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d102      	bne.n	8009b84 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	73fb      	strb	r3, [r7, #15]
      break;
 8009b82:	e005      	b.n	8009b90 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	3301      	adds	r3, #1
 8009b88:	73bb      	strb	r3, [r7, #14]
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d9f0      	bls.n	8009b72 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	f240 621c 	movw	r2, #1564	; 0x61c
 8009b96:	fb02 f303 	mul.w	r3, r2, r3
 8009b9a:	4a0f      	ldr	r2, [pc, #60]	; (8009bd8 <USBD_CDC_DataOut+0x80>)
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f002 f846 	bl	800bc36 <USBD_LL_GetRxDataSize>
 8009baa:	4602      	mov	r2, r0
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	f8d2 1604 	ldr.w	r1, [r2, #1540]	; 0x604
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	f202 620c 	addw	r2, r2, #1548	; 0x60c
 8009bc6:	7bf8      	ldrb	r0, [r7, #15]
 8009bc8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	2000146c 	.word	0x2000146c
 8009bd8:	20001480 	.word	0x20001480

08009bdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	e02e      	b.n	8009c4c <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	f240 621c 	movw	r2, #1564	; 0x61c
 8009bf4:	fb02 f303 	mul.w	r3, r2, r3
 8009bf8:	4a18      	ldr	r2, [pc, #96]	; (8009c5c <USBD_CDC_EP0_RxReady+0x80>)
 8009bfa:	4413      	add	r3, r2
 8009bfc:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009c04:	2303      	movs	r3, #3
 8009c06:	e025      	b.n	8009c54 <USBD_CDC_EP0_RxReady+0x78>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d019      	beq.n	8009c46 <USBD_CDC_EP0_RxReady+0x6a>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f893 3600 	ldrb.w	r3, [r3, #1536]	; 0x600
 8009c18:	2bff      	cmp	r3, #255	; 0xff
 8009c1a:	d014      	beq.n	8009c46 <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c22:	689c      	ldr	r4, [r3, #8]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f893 1600 	ldrb.w	r1, [r3, #1536]	; 0x600
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	025b      	lsls	r3, r3, #9
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	441a      	add	r2, r3
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f893 3601 	ldrb.w	r3, [r3, #1537]	; 0x601
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	7bf8      	ldrb	r0, [r7, #15]
 8009c3c:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	22ff      	movs	r2, #255	; 0xff
 8009c42:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d9cd      	bls.n	8009bee <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd90      	pop	{r4, r7, pc}
 8009c5c:	20001480 	.word	0x20001480

08009c60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	22cf      	movs	r2, #207	; 0xcf
 8009c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009c6e:	4b03      	ldr	r3, [pc, #12]	; (8009c7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20000240 	.word	0x20000240

08009c80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	22cf      	movs	r2, #207	; 0xcf
 8009c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009c8e:	4b03      	ldr	r3, [pc, #12]	; (8009c9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20000170 	.word	0x20000170

08009ca0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	22cf      	movs	r2, #207	; 0xcf
 8009cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009cae:	4b03      	ldr	r3, [pc, #12]	; (8009cbc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	20000240 	.word	0x20000240

08009cc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	220a      	movs	r2, #10
 8009ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cce:	4b03      	ldr	r3, [pc, #12]	; (8009cdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	20000128 	.word	0x20000128

08009ce0 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e004      	b.n	8009cfe <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
	...

08009d0c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	f240 621c 	movw	r2, #1564	; 0x61c
 8009d26:	fb02 f303 	mul.w	r3, r2, r3
 8009d2a:	4a09      	ldr	r2, [pc, #36]	; (8009d50 <USBD_CDC_SetTxBuffer+0x44>)
 8009d2c:	4413      	add	r3, r2
 8009d2e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
  hcdc->TxLength = length;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610

  return (uint8_t)USBD_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	20001480 	.word	0x20001480

08009d54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	f240 621c 	movw	r2, #1564	; 0x61c
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
 8009d70:	4a06      	ldr	r2, [pc, #24]	; (8009d8c <USBD_CDC_SetRxBuffer+0x38>)
 8009d72:	4413      	add	r3, r2
 8009d74:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604

  return (uint8_t)USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	371c      	adds	r7, #28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20001480 	.word	0x20001480

08009d90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	6039      	str	r1, [r7, #0]
 8009d9a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009da0:	2301      	movs	r3, #1
 8009da2:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	f240 621c 	movw	r2, #1564	; 0x61c
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	4a17      	ldr	r2, [pc, #92]	; (8009e0c <USBD_CDC_TransmitPacket+0x7c>)
 8009db0:	4413      	add	r3, r2
 8009db2:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d121      	bne.n	8009e02 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4a11      	ldr	r2, [pc, #68]	; (8009e10 <USBD_CDC_TransmitPacket+0x80>)
 8009dca:	5cd3      	ldrb	r3, [r2, r3]
 8009dcc:	f003 020f 	and.w	r2, r3, #15
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f8d3 1610 	ldr.w	r1, [r3, #1552]	; 0x610
 8009dd6:	6838      	ldr	r0, [r7, #0]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4403      	add	r3, r0
 8009de2:	3318      	adds	r3, #24
 8009de4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8009de6:	79fb      	ldrb	r3, [r7, #7]
 8009de8:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <USBD_CDC_TransmitPacket+0x80>)
 8009dea:	5cd1      	ldrb	r1, [r2, r3]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
 8009df8:	6838      	ldr	r0, [r7, #0]
 8009dfa:	f001 feda 	bl	800bbb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20001480 	.word	0x20001480
 8009e10:	20001468 	.word	0x20001468

08009e14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	6039      	str	r1, [r7, #0]
 8009e1e:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009e24:	79fb      	ldrb	r3, [r7, #7]
 8009e26:	f240 621c 	movw	r2, #1564	; 0x61c
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
 8009e2e:	4a11      	ldr	r2, [pc, #68]	; (8009e74 <USBD_CDC_ReceivePacket+0x60>)
 8009e30:	4413      	add	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	7c1b      	ldrb	r3, [r3, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009e3c:	79fb      	ldrb	r3, [r7, #7]
 8009e3e:	4a0e      	ldr	r2, [pc, #56]	; (8009e78 <USBD_CDC_ReceivePacket+0x64>)
 8009e40:	5cd1      	ldrb	r1, [r2, r3]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8009e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e4c:	6838      	ldr	r0, [r7, #0]
 8009e4e:	f001 fed1 	bl	800bbf4 <USBD_LL_PrepareReceive>
 8009e52:	e009      	b.n	8009e68 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	4a08      	ldr	r2, [pc, #32]	; (8009e78 <USBD_CDC_ReceivePacket+0x64>)
 8009e58:	5cd1      	ldrb	r1, [r2, r3]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	6838      	ldr	r0, [r7, #0]
 8009e64:	f001 fec6 	bl	800bbf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20001480 	.word	0x20001480
 8009e78:	2000146c 	.word	0x2000146c

08009e7c <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	4608      	mov	r0, r1
 8009e86:	4611      	mov	r1, r2
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	70fb      	strb	r3, [r7, #3]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70bb      	strb	r3, [r7, #2]
 8009e92:	4613      	mov	r3, r2
 8009e94:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3309      	adds	r3, #9
 8009e9a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
 8009ea0:	e05b      	b.n	8009f5a <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	78fa      	ldrb	r2, [r7, #3]
 8009ea8:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3310      	adds	r3, #16
 8009eae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009eb2:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	330a      	adds	r3, #10
 8009eb8:	78fa      	ldrb	r2, [r7, #3]
 8009eba:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	331a      	adds	r3, #26
 8009ec0:	78ba      	ldrb	r2, [r7, #2]
 8009ec2:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3322      	adds	r3, #34	; 0x22
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3323      	adds	r3, #35	; 0x23
 8009ed0:	78ba      	ldrb	r2, [r7, #2]
 8009ed2:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3326      	adds	r3, #38	; 0x26
 8009ed8:	7e3a      	ldrb	r2, [r7, #24]
 8009eda:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	332d      	adds	r3, #45	; 0x2d
 8009ee0:	78ba      	ldrb	r2, [r7, #2]
 8009ee2:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3336      	adds	r3, #54	; 0x36
 8009ee8:	7f3a      	ldrb	r2, [r7, #28]
 8009eea:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	333d      	adds	r3, #61	; 0x3d
 8009ef0:	787a      	ldrb	r2, [r7, #1]
 8009ef2:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3342      	adds	r3, #66	; 0x42
 8009ef8:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	491c      	ldr	r1, [pc, #112]	; (8009f70 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8009efe:	787a      	ldrb	r2, [r7, #1]
 8009f00:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	491b      	ldr	r1, [pc, #108]	; (8009f74 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8009f06:	7f3a      	ldrb	r2, [r7, #28]
 8009f08:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	491a      	ldr	r1, [pc, #104]	; (8009f78 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8009f0e:	7e3a      	ldrb	r2, [r7, #24]
 8009f10:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	4919      	ldr	r1, [pc, #100]	; (8009f7c <USBD_Update_CDC_ACM_DESC+0x100>)
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	4918      	ldr	r1, [pc, #96]	; (8009f80 <USBD_Update_CDC_ACM_DESC+0x104>)
 8009f1e:	78ba      	ldrb	r2, [r7, #2]
 8009f20:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	4917      	ldr	r1, [pc, #92]	; (8009f84 <USBD_Update_CDC_ACM_DESC+0x108>)
 8009f26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009f2a:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8009f2c:	787b      	ldrb	r3, [r7, #1]
 8009f2e:	3302      	adds	r3, #2
 8009f30:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8009f32:	787b      	ldrb	r3, [r7, #1]
 8009f34:	3301      	adds	r3, #1
 8009f36:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8009f38:	7f3b      	ldrb	r3, [r7, #28]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8009f3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f42:	3301      	adds	r3, #1
 8009f44:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	3301      	adds	r3, #1
 8009f52:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	3301      	adds	r3, #1
 8009f58:	73fb      	strb	r3, [r7, #15]
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d9a0      	bls.n	8009ea2 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20001468 	.word	0x20001468
 8009f74:	2000146c 	.word	0x2000146c
 8009f78:	20001470 	.word	0x20001470
 8009f7c:	20001474 	.word	0x20001474
 8009f80:	20001478 	.word	0x20001478
 8009f84:	2000147c 	.word	0x2000147c

08009f88 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <USBD_COMPOSITE_Init+0x24>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	78fa      	ldrb	r2, [r7, #3]
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000134 	.word	0x20000134

08009fb0 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8009fbc:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <USBD_COMPOSITE_DeInit+0x24>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	78fa      	ldrb	r2, [r7, #3]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000134 	.word	0x20000134

08009fd8 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
 8009fe6:	e019      	b.n	800a01c <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	889b      	ldrh	r3, [r3, #4]
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	490e      	ldr	r1, [pc, #56]	; (800a02c <USBD_COMPOSITE_Setup+0x54>)
 8009ff2:	5ccb      	ldrb	r3, [r1, r3]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d007      	beq.n	800a008 <USBD_COMPOSITE_Setup+0x30>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	889b      	ldrh	r3, [r3, #4]
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	490b      	ldr	r1, [pc, #44]	; (800a030 <USBD_COMPOSITE_Setup+0x58>)
 800a002:	5ccb      	ldrb	r3, [r1, r3]
 800a004:	429a      	cmp	r2, r3
 800a006:	d106      	bne.n	800a016 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <USBD_COMPOSITE_Setup+0x5c>)
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
 800a012:	4603      	mov	r3, r0
 800a014:	e006      	b.n	800a024 <USBD_COMPOSITE_Setup+0x4c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	3301      	adds	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d9e2      	bls.n	8009fe8 <USBD_COMPOSITE_Setup+0x10>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800a022:	2303      	movs	r3, #3
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20001474 	.word	0x20001474
 800a030:	20001478 	.word	0x20001478
 800a034:	20000134 	.word	0x20000134

0800a038 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	e01a      	b.n	800a080 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800a04a:	78fa      	ldrb	r2, [r7, #3]
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	4910      	ldr	r1, [pc, #64]	; (800a090 <USBD_COMPOSITE_DataIn+0x58>)
 800a050:	5ccb      	ldrb	r3, [r1, r3]
 800a052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a056:	429a      	cmp	r2, r3
 800a058:	d007      	beq.n	800a06a <USBD_COMPOSITE_DataIn+0x32>
 800a05a:	78fa      	ldrb	r2, [r7, #3]
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	490d      	ldr	r1, [pc, #52]	; (800a094 <USBD_COMPOSITE_DataIn+0x5c>)
 800a060:	5ccb      	ldrb	r3, [r1, r3]
 800a062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a066:	429a      	cmp	r2, r3
 800a068:	d107      	bne.n	800a07a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800a06a:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <USBD_COMPOSITE_DataIn+0x60>)
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
 800a076:	4603      	mov	r3, r0
 800a078:	e006      	b.n	800a088 <USBD_COMPOSITE_DataIn+0x50>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	3301      	adds	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d9e1      	bls.n	800a04a <USBD_COMPOSITE_DataIn+0x12>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a086:	2303      	movs	r3, #3
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20001468 	.word	0x20001468
 800a094:	20001470 	.word	0x20001470
 800a098:	20000134 	.word	0x20000134

0800a09c <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000134 	.word	0x20000134

0800a0bc <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
 800a12c:	e010      	b.n	800a150 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	4a0b      	ldr	r2, [pc, #44]	; (800a160 <USBD_COMPOSITE_DataOut+0x44>)
 800a132:	5cd3      	ldrb	r3, [r2, r3]
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	429a      	cmp	r2, r3
 800a138:	d107      	bne.n	800a14a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800a13a:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <USBD_COMPOSITE_DataOut+0x48>)
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	4611      	mov	r1, r2
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
 800a146:	4603      	mov	r3, r0
 800a148:	e006      	b.n	800a158 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a14a:	7bfb      	ldrb	r3, [r7, #15]
 800a14c:	3301      	adds	r3, #1
 800a14e:	73fb      	strb	r3, [r7, #15]
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b02      	cmp	r3, #2
 800a154:	d9eb      	bls.n	800a12e <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a156:	2303      	movs	r3, #3
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	2000146c 	.word	0x2000146c
 800a164:	20000134 	.word	0x20000134

0800a168 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	22cf      	movs	r2, #207	; 0xcf
 800a174:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	200027a4 	.word	0x200027a4

0800a188 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	22cf      	movs	r2, #207	; 0xcf
 800a194:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	200026d4 	.word	0x200026d4

0800a1a8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	22cf      	movs	r2, #207	; 0xcf
 800a1b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a1b6:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	200027a4 	.word	0x200027a4

0800a1c8 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800a1d6:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	20000350 	.word	0x20000350

0800a1e8 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800a1f6:	4b1b      	ldr	r3, [pc, #108]	; (800a264 <USBD_COMPOSITE_GetUsrStringDesc+0x7c>)
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	7afa      	ldrb	r2, [r7, #11]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d82c      	bhi.n	800a25a <USBD_COMPOSITE_GetUsrStringDesc+0x72>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	f107 0318 	add.w	r3, r7, #24
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	605a      	str	r2, [r3, #4]
 800a20e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a210:	2300      	movs	r3, #0
 800a212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a216:	e01a      	b.n	800a24e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800a218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a21c:	4a12      	ldr	r2, [pc, #72]	; (800a268 <USBD_COMPOSITE_GetUsrStringDesc+0x80>)
 800a21e:	5cd3      	ldrb	r3, [r2, r3]
 800a220:	7afa      	ldrb	r2, [r7, #11]
 800a222:	429a      	cmp	r2, r3
 800a224:	d10e      	bne.n	800a244 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800a226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a22a:	f107 0014 	add.w	r0, r7, #20
 800a22e:	4a0f      	ldr	r2, [pc, #60]	; (800a26c <USBD_COMPOSITE_GetUsrStringDesc+0x84>)
 800a230:	2110      	movs	r1, #16
 800a232:	f004 fb13 	bl	800e85c <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800a236:	f107 0314 	add.w	r3, r7, #20
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	490c      	ldr	r1, [pc, #48]	; (800a270 <USBD_COMPOSITE_GetUsrStringDesc+0x88>)
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 f983 	bl	800b54a <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a248:	3301      	adds	r3, #1
 800a24a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a252:	2b02      	cmp	r3, #2
 800a254:	d9e0      	bls.n	800a218 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800a256:	4b06      	ldr	r3, [pc, #24]	; (800a270 <USBD_COMPOSITE_GetUsrStringDesc+0x88>)
 800a258:	e000      	b.n	800a25c <USBD_COMPOSITE_GetUsrStringDesc+0x74>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a25a:	2300      	movs	r3, #0
  }
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3728      	adds	r7, #40	; 0x28
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2000034c 	.word	0x2000034c
 800a268:	2000147c 	.word	0x2000147c
 800a26c:	0800f1dc 	.word	0x0800f1dc
 800a270:	20002874 	.word	0x20002874

0800a274 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800a282:	2381      	movs	r3, #129	; 0x81
 800a284:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800a286:	2301      	movs	r3, #1
 800a288:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800a28a:	2300      	movs	r3, #0
 800a28c:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800a28e:	4b54      	ldr	r3, [pc, #336]	; (800a3e0 <USBD_COMPOSITE_Mount_Class+0x16c>)
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a292:	1d3a      	adds	r2, r7, #4
 800a294:	4610      	mov	r0, r2
 800a296:	4798      	blx	r3
 800a298:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a29a:	7a7b      	ldrb	r3, [r7, #9]
 800a29c:	3301      	adds	r3, #1
 800a29e:	b2d8      	uxtb	r0, r3
 800a2a0:	7afb      	ldrb	r3, [r7, #11]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	4a4f      	ldr	r2, [pc, #316]	; (800a3e4 <USBD_COMPOSITE_Mount_Class+0x170>)
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	7afc      	ldrb	r4, [r7, #11]
 800a2ac:	7a79      	ldrb	r1, [r7, #9]
 800a2ae:	9202      	str	r2, [sp, #8]
 800a2b0:	7aba      	ldrb	r2, [r7, #10]
 800a2b2:	9201      	str	r2, [sp, #4]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	4623      	mov	r3, r4
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7ff fdde 	bl	8009e7c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3309      	adds	r3, #9
 800a2c4:	88ba      	ldrh	r2, [r7, #4]
 800a2c6:	3a09      	subs	r2, #9
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4847      	ldr	r0, [pc, #284]	; (800a3e8 <USBD_COMPOSITE_Mount_Class+0x174>)
 800a2cc:	f004 fab0 	bl	800e830 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800a2d0:	4b43      	ldr	r3, [pc, #268]	; (800a3e0 <USBD_COMPOSITE_Mount_Class+0x16c>)
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	1d3a      	adds	r2, r7, #4
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	4798      	blx	r3
 800a2da:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a2dc:	7a7b      	ldrb	r3, [r7, #9]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	b2d8      	uxtb	r0, r3
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	4a3e      	ldr	r2, [pc, #248]	; (800a3e4 <USBD_COMPOSITE_Mount_Class+0x170>)
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	7afc      	ldrb	r4, [r7, #11]
 800a2ee:	7a79      	ldrb	r1, [r7, #9]
 800a2f0:	9202      	str	r2, [sp, #8]
 800a2f2:	7aba      	ldrb	r2, [r7, #10]
 800a2f4:	9201      	str	r2, [sp, #4]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7ff fdbd 	bl	8009e7c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3309      	adds	r3, #9
 800a306:	88ba      	ldrh	r2, [r7, #4]
 800a308:	3a09      	subs	r2, #9
 800a30a:	4619      	mov	r1, r3
 800a30c:	4837      	ldr	r0, [pc, #220]	; (800a3ec <USBD_COMPOSITE_Mount_Class+0x178>)
 800a30e:	f004 fa8f 	bl	800e830 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800a312:	7afb      	ldrb	r3, [r7, #11]
 800a314:	3306      	adds	r3, #6
 800a316:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800a318:	7abb      	ldrb	r3, [r7, #10]
 800a31a:	3303      	adds	r3, #3
 800a31c:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800a31e:	7a7b      	ldrb	r3, [r7, #9]
 800a320:	3306      	adds	r3, #6
 800a322:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800a324:	4b2f      	ldr	r3, [pc, #188]	; (800a3e4 <USBD_COMPOSITE_Mount_Class+0x170>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	3303      	adds	r3, #3
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	4b2d      	ldr	r3, [pc, #180]	; (800a3e4 <USBD_COMPOSITE_Mount_Class+0x170>)
 800a32e:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800a330:	23cf      	movs	r3, #207	; 0xcf
 800a332:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800a334:	4b2e      	ldr	r3, [pc, #184]	; (800a3f0 <USBD_COMPOSITE_Mount_Class+0x17c>)
 800a336:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2209      	movs	r2, #9
 800a33c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3301      	adds	r3, #1
 800a342:	2202      	movs	r2, #2
 800a344:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3302      	adds	r3, #2
 800a34a:	88fa      	ldrh	r2, [r7, #6]
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	0a1b      	lsrs	r3, r3, #8
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3303      	adds	r3, #3
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3304      	adds	r3, #4
 800a362:	7a7a      	ldrb	r2, [r7, #9]
 800a364:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3305      	adds	r3, #5
 800a36a:	2201      	movs	r2, #1
 800a36c:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3306      	adds	r3, #6
 800a372:	2200      	movs	r2, #0
 800a374:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3307      	adds	r3, #7
 800a37a:	22c0      	movs	r2, #192	; 0xc0
 800a37c:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3308      	adds	r3, #8
 800a382:	2232      	movs	r2, #50	; 0x32
 800a384:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800a386:	4b1b      	ldr	r3, [pc, #108]	; (800a3f4 <USBD_COMPOSITE_Mount_Class+0x180>)
 800a388:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2209      	movs	r2, #9
 800a38e:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	2202      	movs	r2, #2
 800a396:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3302      	adds	r3, #2
 800a39c:	88fa      	ldrh	r2, [r7, #6]
 800a39e:	b2d2      	uxtb	r2, r2
 800a3a0:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	0a1b      	lsrs	r3, r3, #8
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3303      	adds	r3, #3
 800a3ac:	b2d2      	uxtb	r2, r2
 800a3ae:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	7a7a      	ldrb	r2, [r7, #9]
 800a3b6:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3305      	adds	r3, #5
 800a3bc:	2201      	movs	r2, #1
 800a3be:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3306      	adds	r3, #6
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3307      	adds	r3, #7
 800a3cc:	22c0      	movs	r2, #192	; 0xc0
 800a3ce:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	2232      	movs	r2, #50	; 0x32
 800a3d6:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd90      	pop	{r4, r7, pc}
 800a3e0:	20000134 	.word	0x20000134
 800a3e4:	2000034c 	.word	0x2000034c
 800a3e8:	200026dd 	.word	0x200026dd
 800a3ec:	200027ad 	.word	0x200027ad
 800a3f0:	200027a4 	.word	0x200027a4
 800a3f4:	200026d4 	.word	0x200026d4

0800a3f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4613      	mov	r3, r2
 800a404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e01b      	b.n	800a448 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	79fa      	ldrb	r2, [r7, #7]
 800a43a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f001 fa7d 	bl	800b93c <USBD_LL_Init>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a464:	2303      	movs	r3, #3
 800a466:	e02d      	b.n	800a4c4 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	7c1b      	ldrb	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d112      	bne.n	800a49e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01e      	beq.n	800a4c2 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48c:	f107 020e 	add.w	r2, r7, #14
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
 800a494:	4602      	mov	r2, r0
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800a49c:	e011      	b.n	800a4c2 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00b      	beq.n	800a4c2 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	f107 020e 	add.w	r2, r7, #14
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 fa83 	bl	800b9e0 <USBD_LL_Start>
 800a4da:	4603      	mov	r3, r0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a506:	2303      	movs	r3, #3
 800a508:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	78fa      	ldrb	r2, [r7, #3]
 800a51e:	4611      	mov	r1, r2
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a528:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b082      	sub	sp, #8
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a544:	2b00      	cmp	r3, #0
 800a546:	d007      	beq.n	800a558 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
  }

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 ff9d 	bl	800b4b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a588:	461a      	mov	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a596:	f003 031f 	and.w	r3, r3, #31
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d01a      	beq.n	800a5d4 <USBD_LL_SetupStage+0x72>
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d822      	bhi.n	800a5e8 <USBD_LL_SetupStage+0x86>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <USBD_LL_SetupStage+0x4a>
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d00a      	beq.n	800a5c0 <USBD_LL_SetupStage+0x5e>
 800a5aa:	e01d      	b.n	800a5e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fa5d 	bl	800aa74 <USBD_StdDevReq>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5be:	e020      	b.n	800a602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fac1 	bl	800ab50 <USBD_StdItfReq>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d2:	e016      	b.n	800a602 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fb00 	bl	800abe2 <USBD_StdEPReq>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e6:	e00c      	b.n	800a602 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 fa52 	bl	800baa0 <USBD_LL_StallEP>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a600:	bf00      	nop
  }

  return ret;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	460b      	mov	r3, r1
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d138      	bne.n	800a692 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a626:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d14a      	bne.n	800a6c8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d913      	bls.n	800a666 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	1ad2      	subs	r2, r2, r3
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	4293      	cmp	r3, r2
 800a656:	bf28      	it	cs
 800a658:	4613      	movcs	r3, r2
 800a65a:	461a      	mov	r2, r3
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f001 f81c 	bl	800b69c <USBD_CtlContinueRx>
 800a664:	e030      	b.n	800a6c8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d10b      	bne.n	800a68a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 f817 	bl	800b6be <USBD_CtlSendStatus>
 800a690:	e01a      	b.n	800a6c8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d114      	bne.n	800a6c8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00e      	beq.n	800a6c8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	7afa      	ldrb	r2, [r7, #11]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	4798      	blx	r3
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a6be:	7dfb      	ldrb	r3, [r7, #23]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a6c4:	7dfb      	ldrb	r3, [r7, #23]
 800a6c6:	e000      	b.n	800a6ca <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b086      	sub	sp, #24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	607a      	str	r2, [r7, #4]
 800a6de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d16b      	bne.n	800a7be <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3314      	adds	r3, #20
 800a6ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d156      	bne.n	800a7a4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d914      	bls.n	800a72c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	689a      	ldr	r2, [r3, #8]
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	1ad2      	subs	r2, r2, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	461a      	mov	r2, r3
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 ff91 	bl	800b640 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a71e:	2300      	movs	r3, #0
 800a720:	2200      	movs	r2, #0
 800a722:	2100      	movs	r1, #0
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f001 fa65 	bl	800bbf4 <USBD_LL_PrepareReceive>
 800a72a:	e03b      	b.n	800a7a4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	429a      	cmp	r2, r3
 800a736:	d11c      	bne.n	800a772 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a740:	429a      	cmp	r2, r3
 800a742:	d316      	bcc.n	800a772 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a74e:	429a      	cmp	r2, r3
 800a750:	d20f      	bcs.n	800a772 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a752:	2200      	movs	r2, #0
 800a754:	2100      	movs	r1, #0
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 ff72 	bl	800b640 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	2100      	movs	r1, #0
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f001 fa42 	bl	800bbf4 <USBD_LL_PrepareReceive>
 800a770:	e018      	b.n	800a7a4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d10b      	bne.n	800a796 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d005      	beq.n	800a796 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a796:	2180      	movs	r1, #128	; 0x80
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f001 f981 	bl	800baa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 ffa0 	bl	800b6e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d122      	bne.n	800a7f4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7ff fe98 	bl	800a4e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7bc:	e01a      	b.n	800a7f4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d114      	bne.n	800a7f4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	7afa      	ldrb	r2, [r7, #11]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	e000      	b.n	800a7f6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a82e:	2303      	movs	r3, #3
 800a830:	e02a      	b.n	800a888 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6852      	ldr	r2, [r2, #4]
 800a84a:	b2d2      	uxtb	r2, r2
 800a84c:	4611      	mov	r1, r2
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	2200      	movs	r2, #0
 800a856:	2100      	movs	r1, #0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 f8dc 	bl	800ba16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2240      	movs	r2, #64	; 0x40
 800a86a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a86e:	2340      	movs	r3, #64	; 0x40
 800a870:	2200      	movs	r2, #0
 800a872:	2180      	movs	r1, #128	; 0x80
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f001 f8ce 	bl	800ba16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2240      	movs	r2, #64	; 0x40
 800a884:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	78fa      	ldrb	r2, [r7, #3]
 800a8a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d106      	bne.n	800a8fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a91e:	2303      	movs	r3, #3
 800a920:	e012      	b.n	800a948 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d10b      	bne.n	800a946 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a966:	2303      	movs	r3, #3
 800a968:	e014      	b.n	800a994 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b03      	cmp	r3, #3
 800a974:	d10d      	bne.n	800a992 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d007      	beq.n	800a992 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	4611      	mov	r1, r2
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e014      	b.n	800a9e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d10d      	bne.n	800a9de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d007      	beq.n	800a9de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d009      	beq.n	800aa2c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6852      	ldr	r2, [r2, #4]
 800aa24:	b2d2      	uxtb	r2, r2
 800aa26:	4611      	mov	r1, r2
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	4798      	blx	r3
  }

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b087      	sub	sp, #28
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa54:	8a3b      	ldrh	r3, [r7, #16]
 800aa56:	021b      	lsls	r3, r3, #8
 800aa58:	b21a      	sxth	r2, r3
 800aa5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	b21b      	sxth	r3, r3
 800aa62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa64:	89fb      	ldrh	r3, [r7, #14]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
	...

0800aa74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa8a:	2b40      	cmp	r3, #64	; 0x40
 800aa8c:	d005      	beq.n	800aa9a <USBD_StdDevReq+0x26>
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d853      	bhi.n	800ab3a <USBD_StdDevReq+0xc6>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <USBD_StdDevReq+0x3a>
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d14f      	bne.n	800ab3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	4798      	blx	r3
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
      break;
 800aaac:	e04a      	b.n	800ab44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	2b09      	cmp	r3, #9
 800aab4:	d83b      	bhi.n	800ab2e <USBD_StdDevReq+0xba>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <USBD_StdDevReq+0x48>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800ab11 	.word	0x0800ab11
 800aac0:	0800ab25 	.word	0x0800ab25
 800aac4:	0800ab2f 	.word	0x0800ab2f
 800aac8:	0800ab1b 	.word	0x0800ab1b
 800aacc:	0800ab2f 	.word	0x0800ab2f
 800aad0:	0800aaef 	.word	0x0800aaef
 800aad4:	0800aae5 	.word	0x0800aae5
 800aad8:	0800ab2f 	.word	0x0800ab2f
 800aadc:	0800ab07 	.word	0x0800ab07
 800aae0:	0800aaf9 	.word	0x0800aaf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9de 	bl	800aea8 <USBD_GetDescriptor>
          break;
 800aaec:	e024      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fb55 	bl	800b1a0 <USBD_SetAddress>
          break;
 800aaf6:	e01f      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb94 	bl	800b228 <USBD_SetConfig>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]
          break;
 800ab04:	e018      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fc33 	bl	800b374 <USBD_GetConfig>
          break;
 800ab0e:	e013      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fc64 	bl	800b3e0 <USBD_GetStatus>
          break;
 800ab18:	e00e      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc93 	bl	800b448 <USBD_SetFeature>
          break;
 800ab22:	e009      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fca2 	bl	800b470 <USBD_ClrFeature>
          break;
 800ab2c:	e004      	b.n	800ab38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fcf9 	bl	800b528 <USBD_CtlError>
          break;
 800ab36:	bf00      	nop
      }
      break;
 800ab38:	e004      	b.n	800ab44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fcf3 	bl	800b528 <USBD_CtlError>
      break;
 800ab42:	bf00      	nop
  }

  return ret;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop

0800ab50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab66:	2b40      	cmp	r3, #64	; 0x40
 800ab68:	d005      	beq.n	800ab76 <USBD_StdItfReq+0x26>
 800ab6a:	2b40      	cmp	r3, #64	; 0x40
 800ab6c:	d82f      	bhi.n	800abce <USBD_StdItfReq+0x7e>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <USBD_StdItfReq+0x26>
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d12b      	bne.n	800abce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d81d      	bhi.n	800abc0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	889b      	ldrh	r3, [r3, #4]
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b0f      	cmp	r3, #15
 800ab8c:	d813      	bhi.n	800abb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	88db      	ldrh	r3, [r3, #6]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d110      	bne.n	800abca <USBD_StdItfReq+0x7a>
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10d      	bne.n	800abca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fd85 	bl	800b6be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abb4:	e009      	b.n	800abca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fcb5 	bl	800b528 <USBD_CtlError>
          break;
 800abbe:	e004      	b.n	800abca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fcb0 	bl	800b528 <USBD_CtlError>
          break;
 800abc8:	e000      	b.n	800abcc <USBD_StdItfReq+0x7c>
          break;
 800abca:	bf00      	nop
      }
      break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fca9 	bl	800b528 <USBD_CtlError>
      break;
 800abd6:	bf00      	nop
  }

  return ret;
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	889b      	ldrh	r3, [r3, #4]
 800abf4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abfe:	2b40      	cmp	r3, #64	; 0x40
 800ac00:	d007      	beq.n	800ac12 <USBD_StdEPReq+0x30>
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	f200 8145 	bhi.w	800ae92 <USBD_StdEPReq+0x2b0>
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00c      	beq.n	800ac26 <USBD_StdEPReq+0x44>
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	f040 8140 	bne.w	800ae92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]
      break;
 800ac24:	e13a      	b.n	800ae9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	785b      	ldrb	r3, [r3, #1]
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d007      	beq.n	800ac3e <USBD_StdEPReq+0x5c>
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	f300 8129 	bgt.w	800ae86 <USBD_StdEPReq+0x2a4>
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d07f      	beq.n	800ad38 <USBD_StdEPReq+0x156>
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d03c      	beq.n	800acb6 <USBD_StdEPReq+0xd4>
 800ac3c:	e123      	b.n	800ae86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d002      	beq.n	800ac50 <USBD_StdEPReq+0x6e>
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d016      	beq.n	800ac7c <USBD_StdEPReq+0x9a>
 800ac4e:	e02c      	b.n	800acaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00d      	beq.n	800ac72 <USBD_StdEPReq+0x90>
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	2b80      	cmp	r3, #128	; 0x80
 800ac5a:	d00a      	beq.n	800ac72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 ff1d 	bl	800baa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac66:	2180      	movs	r1, #128	; 0x80
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 ff19 	bl	800baa0 <USBD_LL_StallEP>
 800ac6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac70:	e020      	b.n	800acb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fc57 	bl	800b528 <USBD_CtlError>
              break;
 800ac7a:	e01b      	b.n	800acb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	885b      	ldrh	r3, [r3, #2]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10e      	bne.n	800aca2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00b      	beq.n	800aca2 <USBD_StdEPReq+0xc0>
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b80      	cmp	r3, #128	; 0x80
 800ac8e:	d008      	beq.n	800aca2 <USBD_StdEPReq+0xc0>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	88db      	ldrh	r3, [r3, #6]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 feff 	bl	800baa0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fd0b 	bl	800b6be <USBD_CtlSendStatus>

              break;
 800aca8:	e004      	b.n	800acb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fc3b 	bl	800b528 <USBD_CtlError>
              break;
 800acb2:	bf00      	nop
          }
          break;
 800acb4:	e0ec      	b.n	800ae90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d002      	beq.n	800acc8 <USBD_StdEPReq+0xe6>
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d016      	beq.n	800acf4 <USBD_StdEPReq+0x112>
 800acc6:	e030      	b.n	800ad2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <USBD_StdEPReq+0x108>
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	2b80      	cmp	r3, #128	; 0x80
 800acd2:	d00a      	beq.n	800acea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fee1 	bl	800baa0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acde:	2180      	movs	r1, #128	; 0x80
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fedd 	bl	800baa0 <USBD_LL_StallEP>
 800ace6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ace8:	e025      	b.n	800ad36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fc1b 	bl	800b528 <USBD_CtlError>
              break;
 800acf2:	e020      	b.n	800ad36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	885b      	ldrh	r3, [r3, #2]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d11b      	bne.n	800ad34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d004      	beq.n	800ad10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fee7 	bl	800bade <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fcd4 	bl	800b6be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ad28:	e004      	b.n	800ad34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fbfb 	bl	800b528 <USBD_CtlError>
              break;
 800ad32:	e000      	b.n	800ad36 <USBD_StdEPReq+0x154>
              break;
 800ad34:	bf00      	nop
          }
          break;
 800ad36:	e0ab      	b.n	800ae90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d002      	beq.n	800ad4a <USBD_StdEPReq+0x168>
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	d032      	beq.n	800adae <USBD_StdEPReq+0x1cc>
 800ad48:	e097      	b.n	800ae7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d007      	beq.n	800ad60 <USBD_StdEPReq+0x17e>
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	2b80      	cmp	r3, #128	; 0x80
 800ad54:	d004      	beq.n	800ad60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fbe5 	bl	800b528 <USBD_CtlError>
                break;
 800ad5e:	e091      	b.n	800ae84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da0b      	bge.n	800ad80 <USBD_StdEPReq+0x19e>
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	3310      	adds	r3, #16
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	e00b      	b.n	800ad98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	4413      	add	r3, r2
 800ad96:	3304      	adds	r3, #4
 800ad98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2202      	movs	r2, #2
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fc2f 	bl	800b60a <USBD_CtlSendData>
              break;
 800adac:	e06a      	b.n	800ae84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800adae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	da11      	bge.n	800adda <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	f003 020f 	and.w	r2, r3, #15
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	3324      	adds	r3, #36	; 0x24
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d117      	bne.n	800ae00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fba8 	bl	800b528 <USBD_CtlError>
                  break;
 800add8:	e054      	b.n	800ae84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	f003 020f 	and.w	r2, r3, #15
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d104      	bne.n	800ae00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fb95 	bl	800b528 <USBD_CtlError>
                  break;
 800adfe:	e041      	b.n	800ae84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	da0b      	bge.n	800ae20 <USBD_StdEPReq+0x23e>
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae0e:	4613      	mov	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	3310      	adds	r3, #16
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	e00b      	b.n	800ae38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4413      	add	r3, r2
 800ae36:	3304      	adds	r3, #4
 800ae38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d002      	beq.n	800ae46 <USBD_StdEPReq+0x264>
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b80      	cmp	r3, #128	; 0x80
 800ae44:	d103      	bne.n	800ae4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	e00e      	b.n	800ae6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fe62 	bl	800bb1c <USBD_LL_IsStallEP>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2201      	movs	r2, #1
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	e002      	b.n	800ae6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fbc9 	bl	800b60a <USBD_CtlSendData>
              break;
 800ae78:	e004      	b.n	800ae84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fb53 	bl	800b528 <USBD_CtlError>
              break;
 800ae82:	bf00      	nop
          }
          break;
 800ae84:	e004      	b.n	800ae90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fb4d 	bl	800b528 <USBD_CtlError>
          break;
 800ae8e:	bf00      	nop
      }
      break;
 800ae90:	e004      	b.n	800ae9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fb47 	bl	800b528 <USBD_CtlError>
      break;
 800ae9a:	bf00      	nop
  }

  return ret;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	885b      	ldrh	r3, [r3, #2]
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	2b06      	cmp	r3, #6
 800aeca:	f200 813b 	bhi.w	800b144 <USBD_GetDescriptor+0x29c>
 800aece:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <USBD_GetDescriptor+0x2c>)
 800aed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed4:	0800aef1 	.word	0x0800aef1
 800aed8:	0800af09 	.word	0x0800af09
 800aedc:	0800af49 	.word	0x0800af49
 800aee0:	0800b145 	.word	0x0800b145
 800aee4:	0800b145 	.word	0x0800b145
 800aee8:	0800b0e5 	.word	0x0800b0e5
 800aeec:	0800b111 	.word	0x0800b111
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7c12      	ldrb	r2, [r2, #16]
 800aefc:	f107 0108 	add.w	r1, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
      break;
 800af06:	e125      	b.n	800b154 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7c1b      	ldrb	r3, [r3, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10d      	bne.n	800af2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af18:	f107 0208 	add.w	r2, r7, #8
 800af1c:	4610      	mov	r0, r2
 800af1e:	4798      	blx	r3
 800af20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	2202      	movs	r2, #2
 800af28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af2a:	e113      	b.n	800b154 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af34:	f107 0208 	add.w	r2, r7, #8
 800af38:	4610      	mov	r0, r2
 800af3a:	4798      	blx	r3
 800af3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	2202      	movs	r2, #2
 800af44:	701a      	strb	r2, [r3, #0]
      break;
 800af46:	e105      	b.n	800b154 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b05      	cmp	r3, #5
 800af50:	f200 80ac 	bhi.w	800b0ac <USBD_GetDescriptor+0x204>
 800af54:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <USBD_GetDescriptor+0xb4>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800af75 	.word	0x0800af75
 800af60:	0800afa9 	.word	0x0800afa9
 800af64:	0800afdd 	.word	0x0800afdd
 800af68:	0800b011 	.word	0x0800b011
 800af6c:	0800b045 	.word	0x0800b045
 800af70:	0800b079 	.word	0x0800b079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e0a4      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fac4 	bl	800b528 <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e09c      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00b      	beq.n	800afcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7c12      	ldrb	r2, [r2, #16]
 800afc0:	f107 0108 	add.w	r1, r7, #8
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
 800afc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afca:	e08a      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 faaa 	bl	800b528 <USBD_CtlError>
            err++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
          break;
 800afda:	e082      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	7c12      	ldrb	r2, [r2, #16]
 800aff4:	f107 0108 	add.w	r1, r7, #8
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affe:	e070      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa90 	bl	800b528 <USBD_CtlError>
            err++;
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	3301      	adds	r3, #1
 800b00c:	72fb      	strb	r3, [r7, #11]
          break;
 800b00e:	e068      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	7c12      	ldrb	r2, [r2, #16]
 800b028:	f107 0108 	add.w	r1, r7, #8
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b032:	e056      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa76 	bl	800b528 <USBD_CtlError>
            err++;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	3301      	adds	r3, #1
 800b040:	72fb      	strb	r3, [r7, #11]
          break;
 800b042:	e04e      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04a:	695b      	ldr	r3, [r3, #20]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	7c12      	ldrb	r2, [r2, #16]
 800b05c:	f107 0108 	add.w	r1, r7, #8
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b066:	e03c      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa5c 	bl	800b528 <USBD_CtlError>
            err++;
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	3301      	adds	r3, #1
 800b074:	72fb      	strb	r3, [r7, #11]
          break;
 800b076:	e034      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	7c12      	ldrb	r2, [r2, #16]
 800b090:	f107 0108 	add.w	r1, r7, #8
 800b094:	4610      	mov	r0, r2
 800b096:	4798      	blx	r3
 800b098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b09a:	e022      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa42 	bl	800b528 <USBD_CtlError>
            err++;
 800b0a4:	7afb      	ldrb	r3, [r7, #11]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0aa:	e01a      	b.n	800b0e2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00c      	beq.n	800b0d2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	8852      	ldrh	r2, [r2, #2]
 800b0c4:	b2d1      	uxtb	r1, r2
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
 800b0ce:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b0d0:	e006      	b.n	800b0e0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa27 	bl	800b528 <USBD_CtlError>
            err++;
 800b0da:	7afb      	ldrb	r3, [r7, #11]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	72fb      	strb	r3, [r7, #11]
          break;
 800b0e0:	bf00      	nop
      }
      break;
 800b0e2:	e037      	b.n	800b154 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7c1b      	ldrb	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d109      	bne.n	800b100 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f4:	f107 0208 	add.w	r2, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0fe:	e029      	b.n	800b154 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fa10 	bl	800b528 <USBD_CtlError>
        err++;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	3301      	adds	r3, #1
 800b10c:	72fb      	strb	r3, [r7, #11]
      break;
 800b10e:	e021      	b.n	800b154 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	7c1b      	ldrb	r3, [r3, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10d      	bne.n	800b134 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b120:	f107 0208 	add.w	r2, r7, #8
 800b124:	4610      	mov	r0, r2
 800b126:	4798      	blx	r3
 800b128:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3301      	adds	r3, #1
 800b12e:	2207      	movs	r2, #7
 800b130:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b132:	e00f      	b.n	800b154 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f9f6 	bl	800b528 <USBD_CtlError>
        err++;
 800b13c:	7afb      	ldrb	r3, [r7, #11]
 800b13e:	3301      	adds	r3, #1
 800b140:	72fb      	strb	r3, [r7, #11]
      break;
 800b142:	e007      	b.n	800b154 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f9ee 	bl	800b528 <USBD_CtlError>
      err++;
 800b14c:	7afb      	ldrb	r3, [r7, #11]
 800b14e:	3301      	adds	r3, #1
 800b150:	72fb      	strb	r3, [r7, #11]
      break;
 800b152:	bf00      	nop
  }

  if (err != 0U)
 800b154:	7afb      	ldrb	r3, [r7, #11]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d11e      	bne.n	800b198 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	88db      	ldrh	r3, [r3, #6]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d016      	beq.n	800b190 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800b162:	893b      	ldrh	r3, [r7, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00e      	beq.n	800b186 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	88da      	ldrh	r2, [r3, #6]
 800b16c:	893b      	ldrh	r3, [r7, #8]
 800b16e:	4293      	cmp	r3, r2
 800b170:	bf28      	it	cs
 800b172:	4613      	movcs	r3, r2
 800b174:	b29b      	uxth	r3, r3
 800b176:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b178:	893b      	ldrh	r3, [r7, #8]
 800b17a:	461a      	mov	r2, r3
 800b17c:	68f9      	ldr	r1, [r7, #12]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fa43 	bl	800b60a <USBD_CtlSendData>
 800b184:	e009      	b.n	800b19a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f9cd 	bl	800b528 <USBD_CtlError>
 800b18e:	e004      	b.n	800b19a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fa94 	bl	800b6be <USBD_CtlSendStatus>
 800b196:	e000      	b.n	800b19a <USBD_GetDescriptor+0x2f2>
    return;
 800b198:	bf00      	nop
  }
}
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	889b      	ldrh	r3, [r3, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d131      	bne.n	800b216 <USBD_SetAddress+0x76>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	88db      	ldrh	r3, [r3, #6]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d12d      	bne.n	800b216 <USBD_SetAddress+0x76>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	885b      	ldrh	r3, [r3, #2]
 800b1be:	2b7f      	cmp	r3, #127	; 0x7f
 800b1c0:	d829      	bhi.n	800b216 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	885b      	ldrh	r3, [r3, #2]
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d104      	bne.n	800b1e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 f9a3 	bl	800b528 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e2:	e01d      	b.n	800b220 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	7bfa      	ldrb	r2, [r7, #15]
 800b1e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fcbf 	bl	800bb74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fa61 	bl	800b6be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2202      	movs	r2, #2
 800b206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20a:	e009      	b.n	800b220 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b214:	e004      	b.n	800b220 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f985 	bl	800b528 <USBD_CtlError>
  }
}
 800b21e:	bf00      	nop
 800b220:	bf00      	nop
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	885b      	ldrh	r3, [r3, #2]
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	4b4c      	ldr	r3, [pc, #304]	; (800b370 <USBD_SetConfig+0x148>)
 800b23e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b240:	4b4b      	ldr	r3, [pc, #300]	; (800b370 <USBD_SetConfig+0x148>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d905      	bls.n	800b254 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f96c 	bl	800b528 <USBD_CtlError>
    return USBD_FAIL;
 800b250:	2303      	movs	r3, #3
 800b252:	e088      	b.n	800b366 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d002      	beq.n	800b266 <USBD_SetConfig+0x3e>
 800b260:	2b03      	cmp	r3, #3
 800b262:	d025      	beq.n	800b2b0 <USBD_SetConfig+0x88>
 800b264:	e071      	b.n	800b34a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b266:	4b42      	ldr	r3, [pc, #264]	; (800b370 <USBD_SetConfig+0x148>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d01c      	beq.n	800b2a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b26e:	4b40      	ldr	r3, [pc, #256]	; (800b370 <USBD_SetConfig+0x148>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b278:	4b3d      	ldr	r3, [pc, #244]	; (800b370 <USBD_SetConfig+0x148>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff f93b 	bl	800a4fa <USBD_SetClassConfig>
 800b284:	4603      	mov	r3, r0
 800b286:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d004      	beq.n	800b298 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f949 	bl	800b528 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b296:	e065      	b.n	800b364 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fa10 	bl	800b6be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2a6:	e05d      	b.n	800b364 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fa08 	bl	800b6be <USBD_CtlSendStatus>
      break;
 800b2ae:	e059      	b.n	800b364 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b2b0:	4b2f      	ldr	r3, [pc, #188]	; (800b370 <USBD_SetConfig+0x148>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d112      	bne.n	800b2de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b2c0:	4b2b      	ldr	r3, [pc, #172]	; (800b370 <USBD_SetConfig+0x148>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2ca:	4b29      	ldr	r3, [pc, #164]	; (800b370 <USBD_SetConfig+0x148>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff f92e 	bl	800a532 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f9f1 	bl	800b6be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2dc:	e042      	b.n	800b364 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b2de:	4b24      	ldr	r3, [pc, #144]	; (800b370 <USBD_SetConfig+0x148>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d02a      	beq.n	800b342 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff f91c 	bl	800a532 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2fa:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <USBD_SetConfig+0x148>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b304:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <USBD_SetConfig+0x148>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff f8f5 	bl	800a4fa <USBD_SetClassConfig>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00f      	beq.n	800b33a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f903 	bl	800b528 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b2db      	uxtb	r3, r3
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff f901 	bl	800a532 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2202      	movs	r2, #2
 800b334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b338:	e014      	b.n	800b364 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f9bf 	bl	800b6be <USBD_CtlSendStatus>
      break;
 800b340:	e010      	b.n	800b364 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f9bb 	bl	800b6be <USBD_CtlSendStatus>
      break;
 800b348:	e00c      	b.n	800b364 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f8eb 	bl	800b528 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b352:	4b07      	ldr	r3, [pc, #28]	; (800b370 <USBD_SetConfig+0x148>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff f8ea 	bl	800a532 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b35e:	2303      	movs	r3, #3
 800b360:	73fb      	strb	r3, [r7, #15]
      break;
 800b362:	bf00      	nop
  }

  return ret;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	200028b4 	.word	0x200028b4

0800b374 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	88db      	ldrh	r3, [r3, #6]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d004      	beq.n	800b390 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b386:	6839      	ldr	r1, [r7, #0]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f8cd 	bl	800b528 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b38e:	e023      	b.n	800b3d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b02      	cmp	r3, #2
 800b39a:	dc02      	bgt.n	800b3a2 <USBD_GetConfig+0x2e>
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dc03      	bgt.n	800b3a8 <USBD_GetConfig+0x34>
 800b3a0:	e015      	b.n	800b3ce <USBD_GetConfig+0x5a>
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d00b      	beq.n	800b3be <USBD_GetConfig+0x4a>
 800b3a6:	e012      	b.n	800b3ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f927 	bl	800b60a <USBD_CtlSendData>
        break;
 800b3bc:	e00c      	b.n	800b3d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f91f 	bl	800b60a <USBD_CtlSendData>
        break;
 800b3cc:	e004      	b.n	800b3d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f8a9 	bl	800b528 <USBD_CtlError>
        break;
 800b3d6:	bf00      	nop
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d81e      	bhi.n	800b436 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	88db      	ldrh	r3, [r3, #6]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d004      	beq.n	800b40a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f890 	bl	800b528 <USBD_CtlError>
        break;
 800b408:	e01a      	b.n	800b440 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	f043 0202 	orr.w	r2, r3, #2
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	330c      	adds	r3, #12
 800b42a:	2202      	movs	r2, #2
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f8eb 	bl	800b60a <USBD_CtlSendData>
      break;
 800b434:	e004      	b.n	800b440 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f875 	bl	800b528 <USBD_CtlError>
      break;
 800b43e:	bf00      	nop
  }
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	885b      	ldrh	r3, [r3, #2]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d106      	bne.n	800b468 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f92b 	bl	800b6be <USBD_CtlSendStatus>
  }
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b480:	b2db      	uxtb	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	2b02      	cmp	r3, #2
 800b486:	d80b      	bhi.n	800b4a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	885b      	ldrh	r3, [r3, #2]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d10c      	bne.n	800b4aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f910 	bl	800b6be <USBD_CtlSendStatus>
      }
      break;
 800b49e:	e004      	b.n	800b4aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 f840 	bl	800b528 <USBD_CtlError>
      break;
 800b4a8:	e000      	b.n	800b4ac <USBD_ClrFeature+0x3c>
      break;
 800b4aa:	bf00      	nop
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	781a      	ldrb	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff faa9 	bl	800aa36 <SWAPBYTE>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fa9c 	bl	800aa36 <SWAPBYTE>
 800b4fe:	4603      	mov	r3, r0
 800b500:	461a      	mov	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3301      	adds	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f7ff fa8f 	bl	800aa36 <SWAPBYTE>
 800b518:	4603      	mov	r3, r0
 800b51a:	461a      	mov	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	80da      	strh	r2, [r3, #6]
}
 800b520:	bf00      	nop
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b532:	2180      	movs	r1, #128	; 0x80
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fab3 	bl	800baa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b53a:	2100      	movs	r1, #0
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 faaf 	bl	800baa0 <USBD_LL_StallEP>
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b086      	sub	sp, #24
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d036      	beq.n	800b5ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b564:	6938      	ldr	r0, [r7, #16]
 800b566:	f000 f836 	bl	800b5d6 <USBD_GetLen>
 800b56a:	4603      	mov	r3, r0
 800b56c:	3301      	adds	r3, #1
 800b56e:	b29b      	uxth	r3, r3
 800b570:	005b      	lsls	r3, r3, #1
 800b572:	b29a      	uxth	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	4413      	add	r3, r2
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	7812      	ldrb	r2, [r2, #0]
 800b582:	701a      	strb	r2, [r3, #0]
  idx++;
 800b584:	7dfb      	ldrb	r3, [r7, #23]
 800b586:	3301      	adds	r3, #1
 800b588:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	4413      	add	r3, r2
 800b590:	2203      	movs	r2, #3
 800b592:	701a      	strb	r2, [r3, #0]
  idx++;
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	3301      	adds	r3, #1
 800b598:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b59a:	e013      	b.n	800b5c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	7812      	ldrb	r2, [r2, #0]
 800b5a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	613b      	str	r3, [r7, #16]
    idx++;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b5b4:	7dfb      	ldrb	r3, [r7, #23]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1e7      	bne.n	800b59c <USBD_GetString+0x52>
 800b5cc:	e000      	b.n	800b5d0 <USBD_GetString+0x86>
    return;
 800b5ce:	bf00      	nop
  }
}
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b085      	sub	sp, #20
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5e6:	e005      	b.n	800b5f4 <USBD_GetLen+0x1e>
  {
    len++;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f5      	bne.n	800b5e8 <USBD_GetLen+0x12>
  }

  return len;
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	60b9      	str	r1, [r7, #8]
 800b614:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2202      	movs	r2, #2
 800b61a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	2100      	movs	r1, #0
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 fabe 	bl	800bbb2 <USBD_LL_Transmit>

  return USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	2100      	movs	r1, #0
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 faad 	bl	800bbb2 <USBD_LL_Transmit>

  return USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2203      	movs	r2, #3
 800b672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	2100      	movs	r1, #0
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 fab1 	bl	800bbf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 faa0 	bl	800bbf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2204      	movs	r2, #4
 800b6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fa6c 	bl	800bbb2 <USBD_LL_Transmit>

  return USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2205      	movs	r2, #5
 800b6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa7a 	bl	800bbf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
 800b716:	4613      	mov	r3, r2
 800b718:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800b71a:	883b      	ldrh	r3, [r7, #0]
 800b71c:	089b      	lsrs	r3, r3, #2
 800b71e:	b29a      	uxth	r2, r3
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7fa fdd5 	bl	80062d4 <HAL_PCDEx_SetTxFiFo>
 800b72a:	4603      	mov	r3, r0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800b740:	887b      	ldrh	r3, [r7, #2]
 800b742:	089b      	lsrs	r3, r3, #2
 800b744:	b29b      	uxth	r3, r3
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7fa fe0a 	bl	8006362 <HAL_PCDEx_SetRxFiFo>
 800b74e:	4603      	mov	r3, r0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f7fe fef7 	bl	800a562 <USBD_LL_SetupStage>
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b78e:	78fa      	ldrb	r2, [r7, #3]
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	440b      	add	r3, r1
 800b79c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f7fe ff31 	bl	800a60c <USBD_LL_DataOutStage>
}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b7c4:	78fa      	ldrb	r2, [r7, #3]
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	334c      	adds	r3, #76	; 0x4c
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	f7fe ff7a 	bl	800a6d2 <USBD_LL_DataInStage>
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff f889 	bl	800a90c <USBD_LL_SOF>
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b80a:	2301      	movs	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d102      	bne.n	800b81c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800b816:	2301      	movs	r3, #1
 800b818:	73fb      	strb	r3, [r7, #15]
 800b81a:	e008      	b.n	800b82e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800b824:	2300      	movs	r3, #0
 800b826:	73fb      	strb	r3, [r7, #15]
 800b828:	e001      	b.n	800b82e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800b82a:	f7f5 fcad 	bl	8001188 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b834:	7bfa      	ldrb	r2, [r7, #15]
 800b836:	4611      	mov	r1, r2
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff f829 	bl	800a890 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe ffda 	bl	800a7fe <USBD_LL_Reset>
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff f824 	bl	800a8b0 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	6812      	ldr	r2, [r2, #0]
 800b876:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b87a:	f043 0301 	orr.w	r3, r3, #1
 800b87e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a1b      	ldr	r3, [r3, #32]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d005      	beq.n	800b894 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b888:	4b04      	ldr	r3, [pc, #16]	; (800b89c <HAL_PCD_SuspendCallback+0x48>)
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	4a03      	ldr	r2, [pc, #12]	; (800b89c <HAL_PCD_SuspendCallback+0x48>)
 800b88e:	f043 0306 	orr.w	r3, r3, #6
 800b892:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	e000ed00 	.word	0xe000ed00

0800b8a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff f814 	bl	800a8dc <USBD_LL_Resume>
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8ce:	78fa      	ldrb	r2, [r7, #3]
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff f862 	bl	800a99c <USBD_LL_IsoOUTIncomplete>
}
 800b8d8:	bf00      	nop
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8f2:	78fa      	ldrb	r2, [r7, #3]
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff f82a 	bl	800a950 <USBD_LL_IsoINIncomplete>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff f868 	bl	800a9e8 <USBD_LL_DevConnected>
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b92e:	4618      	mov	r0, r3
 800b930:	f7ff f865 	bl	800a9fe <USBD_LL_DevDisconnected>
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800b944:	4b22      	ldr	r3, [pc, #136]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b946:	4a23      	ldr	r2, [pc, #140]	; (800b9d4 <USBD_LL_Init+0x98>)
 800b948:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d138      	bne.n	800b9c4 <USBD_LL_Init+0x88>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800b952:	4b1f      	ldr	r3, [pc, #124]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    pdev->pData = hpcd_USB_OTG_PTR;
 800b95c:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800b966:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff fee0 	bl	800b734 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800b974:	4b16      	ldr	r3, [pc, #88]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2240      	movs	r2, #64	; 0x40
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7ff fec4 	bl	800b70a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
 800b986:	e01a      	b.n	800b9be <USBD_LL_Init+0x82>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800b988:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b98a:	6818      	ldr	r0, [r3, #0]
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	4a12      	ldr	r2, [pc, #72]	; (800b9d8 <USBD_LL_Init+0x9c>)
 800b990:	5cd3      	ldrb	r3, [r2, r3]
 800b992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2280      	movs	r2, #128	; 0x80
 800b99a:	4619      	mov	r1, r3
 800b99c:	f7ff feb5 	bl	800b70a <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800b9a0:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <USBD_LL_Init+0x94>)
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	4a0d      	ldr	r2, [pc, #52]	; (800b9dc <USBD_LL_Init+0xa0>)
 800b9a8:	5cd3      	ldrb	r3, [r2, r3]
 800b9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2240      	movs	r2, #64	; 0x40
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f7ff fea9 	bl	800b70a <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	73fb      	strb	r3, [r7, #15]
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d9e1      	bls.n	800b988 <USBD_LL_Init+0x4c>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200028b8 	.word	0x200028b8
 800b9d4:	200008a4 	.word	0x200008a4
 800b9d8:	20001468 	.word	0x20001468
 800b9dc:	20001470 	.word	0x20001470

0800b9e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f9 fb6f 	bl	80050da <HAL_PCD_Start>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 f92a 	bl	800bc5c <USBD_Get_USB_Status>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	4608      	mov	r0, r1
 800ba20:	4611      	mov	r1, r2
 800ba22:	461a      	mov	r2, r3
 800ba24:	4603      	mov	r3, r0
 800ba26:	70fb      	strb	r3, [r7, #3]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70bb      	strb	r3, [r7, #2]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800ba3e:	78bb      	ldrb	r3, [r7, #2]
 800ba40:	883a      	ldrh	r2, [r7, #0]
 800ba42:	78f9      	ldrb	r1, [r7, #3]
 800ba44:	f7fa f840 	bl	8005ac8 <HAL_PCD_EP_Open>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f904 	bl	800bc5c <USBD_Get_USB_Status>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b084      	sub	sp, #16
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ba7c:	78fa      	ldrb	r2, [r7, #3]
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fa f889 	bl	8005b98 <HAL_PCD_EP_Close>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f8e5 	bl	800bc5c <USBD_Get_USB_Status>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	460b      	mov	r3, r1
 800baaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800baba:	78fa      	ldrb	r2, [r7, #3]
 800babc:	4611      	mov	r1, r2
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fa f961 	bl	8005d86 <HAL_PCD_EP_SetStall>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 f8c6 	bl	800bc5c <USBD_Get_USB_Status>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fa f9a6 	bl	8005e4e <HAL_PCD_EP_ClrStall>
 800bb02:	4603      	mov	r3, r0
 800bb04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 f8a7 	bl	800bc5c <USBD_Get_USB_Status>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bb2e:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800bb30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	da0b      	bge.n	800bb50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb3e:	68f9      	ldr	r1, [r7, #12]
 800bb40:	4613      	mov	r3, r2
 800bb42:	00db      	lsls	r3, r3, #3
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	440b      	add	r3, r1
 800bb4a:	333e      	adds	r3, #62	; 0x3e
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	e00b      	b.n	800bb68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb50:	78fb      	ldrb	r3, [r7, #3]
 800bb52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb56:	68f9      	ldr	r1, [r7, #12]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	00db      	lsls	r3, r3, #3
 800bb5c:	4413      	add	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	440b      	add	r3, r1
 800bb62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bb66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bb8e:	78fa      	ldrb	r2, [r7, #3]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7f9 ff73 	bl	8005a7e <HAL_PCD_SetAddress>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f85c 	bl	800bc5c <USBD_Get_USB_Status>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b086      	sub	sp, #24
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800bbd0:	7af9      	ldrb	r1, [r7, #11]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	f7fa f88c 	bl	8005cf2 <HAL_PCD_EP_Transmit>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 f83b 	bl	800bc5c <USBD_Get_USB_Status>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbea:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	607a      	str	r2, [r7, #4]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	460b      	mov	r3, r1
 800bc02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800bc12:	7af9      	ldrb	r1, [r7, #11]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	f7fa f808 	bl	8005c2c <HAL_PCD_EP_Receive>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 f81a 	bl	800bc5c <USBD_Get_USB_Status>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b082      	sub	sp, #8
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bc48:	78fa      	ldrb	r2, [r7, #3]
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fa f838 	bl	8005cc2 <HAL_PCD_EP_GetRxCount>
 800bc52:	4603      	mov	r3, r0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d817      	bhi.n	800bca0 <USBD_Get_USB_Status+0x44>
 800bc70:	a201      	add	r2, pc, #4	; (adr r2, 800bc78 <USBD_Get_USB_Status+0x1c>)
 800bc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc76:	bf00      	nop
 800bc78:	0800bc89 	.word	0x0800bc89
 800bc7c:	0800bc8f 	.word	0x0800bc8f
 800bc80:	0800bc95 	.word	0x0800bc95
 800bc84:	0800bc9b 	.word	0x0800bc9b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8c:	e00b      	b.n	800bca6 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	73fb      	strb	r3, [r7, #15]
    break;
 800bc92:	e008      	b.n	800bca6 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800bc94:	2301      	movs	r3, #1
 800bc96:	73fb      	strb	r3, [r7, #15]
    break;
 800bc98:	e005      	b.n	800bca6 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9e:	e002      	b.n	800bca6 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800bca0:	2303      	movs	r3, #3
 800bca2:	73fb      	strb	r3, [r7, #15]
    break;
 800bca4:	bf00      	nop
  }
  return usb_status;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <__NVIC_SetPriority>:
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	6039      	str	r1, [r7, #0]
 800bcbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	db0a      	blt.n	800bcde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	490c      	ldr	r1, [pc, #48]	; (800bd00 <__NVIC_SetPriority+0x4c>)
 800bcce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd2:	0112      	lsls	r2, r2, #4
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcdc:	e00a      	b.n	800bcf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	4908      	ldr	r1, [pc, #32]	; (800bd04 <__NVIC_SetPriority+0x50>)
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	3b04      	subs	r3, #4
 800bcec:	0112      	lsls	r2, r2, #4
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	761a      	strb	r2, [r3, #24]
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	e000e100 	.word	0xe000e100
 800bd04:	e000ed00 	.word	0xe000ed00

0800bd08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <SysTick_Handler+0x1c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd10:	f001 fcfe 	bl	800d710 <xTaskGetSchedulerState>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d001      	beq.n	800bd1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd1a:	f002 fae5 	bl	800e2e8 <xPortSysTickHandler>
  }
}
 800bd1e:	bf00      	nop
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	e000e010 	.word	0xe000e010

0800bd28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	f06f 0004 	mvn.w	r0, #4
 800bd32:	f7ff ffbf 	bl	800bcb4 <__NVIC_SetPriority>
#endif
}
 800bd36:	bf00      	nop
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd42:	f3ef 8305 	mrs	r3, IPSR
 800bd46:	603b      	str	r3, [r7, #0]
  return(result);
 800bd48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd4e:	f06f 0305 	mvn.w	r3, #5
 800bd52:	607b      	str	r3, [r7, #4]
 800bd54:	e00c      	b.n	800bd70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd56:	4b0a      	ldr	r3, [pc, #40]	; (800bd80 <osKernelInitialize+0x44>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d105      	bne.n	800bd6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd5e:	4b08      	ldr	r3, [pc, #32]	; (800bd80 <osKernelInitialize+0x44>)
 800bd60:	2201      	movs	r2, #1
 800bd62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	607b      	str	r3, [r7, #4]
 800bd68:	e002      	b.n	800bd70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd70:	687b      	ldr	r3, [r7, #4]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	200028bc 	.word	0x200028bc

0800bd84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd8a:	f3ef 8305 	mrs	r3, IPSR
 800bd8e:	603b      	str	r3, [r7, #0]
  return(result);
 800bd90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d003      	beq.n	800bd9e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd96:	f06f 0305 	mvn.w	r3, #5
 800bd9a:	607b      	str	r3, [r7, #4]
 800bd9c:	e010      	b.n	800bdc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <osKernelStart+0x48>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d109      	bne.n	800bdba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bda6:	f7ff ffbf 	bl	800bd28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdaa:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <osKernelStart+0x48>)
 800bdac:	2202      	movs	r2, #2
 800bdae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bdb0:	f001 f866 	bl	800ce80 <vTaskStartScheduler>
      stat = osOK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	e002      	b.n	800bdc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bdba:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdc0:	687b      	ldr	r3, [r7, #4]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	200028bc 	.word	0x200028bc

0800bdd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08e      	sub	sp, #56	; 0x38
 800bdd4:	af04      	add	r7, sp, #16
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bddc:	2300      	movs	r3, #0
 800bdde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bde0:	f3ef 8305 	mrs	r3, IPSR
 800bde4:	617b      	str	r3, [r7, #20]
  return(result);
 800bde6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d17e      	bne.n	800beea <osThreadNew+0x11a>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d07b      	beq.n	800beea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bdf2:	2380      	movs	r3, #128	; 0x80
 800bdf4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bdf6:	2318      	movs	r3, #24
 800bdf8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800be02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d045      	beq.n	800be96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <osThreadNew+0x48>
        name = attr->name;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d008      	beq.n	800be3e <osThreadNew+0x6e>
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2b38      	cmp	r3, #56	; 0x38
 800be30:	d805      	bhi.n	800be3e <osThreadNew+0x6e>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <osThreadNew+0x72>
        return (NULL);
 800be3e:	2300      	movs	r3, #0
 800be40:	e054      	b.n	800beec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d003      	beq.n	800be52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	089b      	lsrs	r3, r3, #2
 800be50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <osThreadNew+0xa8>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	2b5b      	cmp	r3, #91	; 0x5b
 800be60:	d90a      	bls.n	800be78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be66:	2b00      	cmp	r3, #0
 800be68:	d006      	beq.n	800be78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	695b      	ldr	r3, [r3, #20]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <osThreadNew+0xa8>
        mem = 1;
 800be72:	2301      	movs	r3, #1
 800be74:	61bb      	str	r3, [r7, #24]
 800be76:	e010      	b.n	800be9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10c      	bne.n	800be9a <osThreadNew+0xca>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d108      	bne.n	800be9a <osThreadNew+0xca>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <osThreadNew+0xca>
          mem = 0;
 800be90:	2300      	movs	r3, #0
 800be92:	61bb      	str	r3, [r7, #24]
 800be94:	e001      	b.n	800be9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d110      	bne.n	800bec2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bea8:	9202      	str	r2, [sp, #8]
 800beaa:	9301      	str	r3, [sp, #4]
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	6a3a      	ldr	r2, [r7, #32]
 800beb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 fe0c 	bl	800cad4 <xTaskCreateStatic>
 800bebc:	4603      	mov	r3, r0
 800bebe:	613b      	str	r3, [r7, #16]
 800bec0:	e013      	b.n	800beea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d110      	bne.n	800beea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	b29a      	uxth	r2, r3
 800becc:	f107 0310 	add.w	r3, r7, #16
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 fe57 	bl	800cb8e <xTaskCreate>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d001      	beq.n	800beea <osThreadNew+0x11a>
            hTask = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800beea:	693b      	ldr	r3, [r7, #16]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3728      	adds	r7, #40	; 0x28
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800befc:	f3ef 8305 	mrs	r3, IPSR
 800bf00:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <osDelay+0x1c>
    stat = osErrorISR;
 800bf08:	f06f 0305 	mvn.w	r3, #5
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	e007      	b.n	800bf20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 ff7c 	bl	800ce18 <vTaskDelay>
    }
  }

  return (stat);
 800bf20:	68fb      	ldr	r3, [r7, #12]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4a07      	ldr	r2, [pc, #28]	; (800bf58 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	4a06      	ldr	r2, [pc, #24]	; (800bf5c <vApplicationGetIdleTaskMemory+0x30>)
 800bf42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2280      	movs	r2, #128	; 0x80
 800bf48:	601a      	str	r2, [r3, #0]
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	200028c0 	.word	0x200028c0
 800bf5c:	2000291c 	.word	0x2000291c

0800bf60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4a07      	ldr	r2, [pc, #28]	; (800bf8c <vApplicationGetTimerTaskMemory+0x2c>)
 800bf70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <vApplicationGetTimerTaskMemory+0x30>)
 800bf76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf7e:	601a      	str	r2, [r3, #0]
}
 800bf80:	bf00      	nop
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	20002b1c 	.word	0x20002b1c
 800bf90:	20002b78 	.word	0x20002b78

0800bf94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f103 0208 	add.w	r2, r3, #8
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f103 0208 	add.w	r2, r3, #8
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f103 0208 	add.w	r2, r3, #8
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfe2:	bf00      	nop
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfee:	b480      	push	{r7}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	601a      	str	r2, [r3, #0]
}
 800c02a:	bf00      	nop
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c036:	b480      	push	{r7}
 800c038:	b085      	sub	sp, #20
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04c:	d103      	bne.n	800c056 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	e00c      	b.n	800c070 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	3308      	adds	r3, #8
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	e002      	b.n	800c064 <vListInsert+0x2e>
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d2f6      	bcs.n	800c05e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	601a      	str	r2, [r3, #0]
}
 800c09c:	bf00      	nop
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	6892      	ldr	r2, [r2, #8]
 800c0be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	6852      	ldr	r2, [r2, #4]
 800c0c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d103      	bne.n	800c0dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689a      	ldr	r2, [r3, #8]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	1e5a      	subs	r2, r3, #1
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c126:	f002 f84d 	bl	800e1c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c132:	68f9      	ldr	r1, [r7, #12]
 800c134:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c136:	fb01 f303 	mul.w	r3, r1, r3
 800c13a:	441a      	add	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c156:	3b01      	subs	r3, #1
 800c158:	68f9      	ldr	r1, [r7, #12]
 800c15a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c15c:	fb01 f303 	mul.w	r3, r1, r3
 800c160:	441a      	add	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	22ff      	movs	r2, #255	; 0xff
 800c16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	22ff      	movs	r2, #255	; 0xff
 800c172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d114      	bne.n	800c1a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01a      	beq.n	800c1ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3310      	adds	r3, #16
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 f903 	bl	800d394 <xTaskRemoveFromEventList>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d012      	beq.n	800c1ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <xQueueGenericReset+0xcc>)
 800c196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	e009      	b.n	800c1ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3310      	adds	r3, #16
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff fef2 	bl	800bf94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3324      	adds	r3, #36	; 0x24
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff feed 	bl	800bf94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c1ba:	f002 f833 	bl	800e224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c1be:	2301      	movs	r3, #1
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08e      	sub	sp, #56	; 0x38
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10a      	bne.n	800c1f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <xQueueGenericCreateStatic+0x52>
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <xQueueGenericCreateStatic+0x56>
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <xQueueGenericCreateStatic+0x58>
 800c222:	2300      	movs	r3, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	623b      	str	r3, [r7, #32]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d102      	bne.n	800c24a <xQueueGenericCreateStatic+0x7e>
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <xQueueGenericCreateStatic+0x82>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e000      	b.n	800c250 <xQueueGenericCreateStatic+0x84>
 800c24e:	2300      	movs	r3, #0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	61fb      	str	r3, [r7, #28]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c26a:	2350      	movs	r3, #80	; 0x50
 800c26c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2b50      	cmp	r3, #80	; 0x50
 800c272:	d00a      	beq.n	800c28a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	61bb      	str	r3, [r7, #24]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c28a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00d      	beq.n	800c2b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c29e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 f805 	bl	800c2bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3730      	adds	r7, #48	; 0x30
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	69ba      	ldr	r2, [r7, #24]
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	e002      	b.n	800c2de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	69b8      	ldr	r0, [r7, #24]
 800c2ee:	f7ff ff05 	bl	800c0fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	78fa      	ldrb	r2, [r7, #3]
 800c2f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2fa:	bf00      	nop
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08e      	sub	sp, #56	; 0x38
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <xQueueGenericSend+0x32>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d103      	bne.n	800c344 <xQueueGenericSend+0x40>
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <xQueueGenericSend+0x44>
 800c344:	2301      	movs	r3, #1
 800c346:	e000      	b.n	800c34a <xQueueGenericSend+0x46>
 800c348:	2300      	movs	r3, #0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10a      	bne.n	800c364 <xQueueGenericSend+0x60>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b02      	cmp	r3, #2
 800c368:	d103      	bne.n	800c372 <xQueueGenericSend+0x6e>
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d101      	bne.n	800c376 <xQueueGenericSend+0x72>
 800c372:	2301      	movs	r3, #1
 800c374:	e000      	b.n	800c378 <xQueueGenericSend+0x74>
 800c376:	2300      	movs	r3, #0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <xQueueGenericSend+0x8e>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	623b      	str	r3, [r7, #32]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c392:	f001 f9bd 	bl	800d710 <xTaskGetSchedulerState>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d102      	bne.n	800c3a2 <xQueueGenericSend+0x9e>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <xQueueGenericSend+0xa2>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e000      	b.n	800c3a8 <xQueueGenericSend+0xa4>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	61fb      	str	r3, [r7, #28]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3c2:	f001 feff 	bl	800e1c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d302      	bcc.n	800c3d8 <xQueueGenericSend+0xd4>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d129      	bne.n	800c42c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3de:	f000 fa0b 	bl	800c7f8 <prvCopyDataToQueue>
 800c3e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d010      	beq.n	800c40e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	3324      	adds	r3, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 ffcf 	bl	800d394 <xTaskRemoveFromEventList>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d013      	beq.n	800c424 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3fc:	4b3f      	ldr	r3, [pc, #252]	; (800c4fc <xQueueGenericSend+0x1f8>)
 800c3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	e00a      	b.n	800c424 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c414:	4b39      	ldr	r3, [pc, #228]	; (800c4fc <xQueueGenericSend+0x1f8>)
 800c416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c424:	f001 fefe 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800c428:	2301      	movs	r3, #1
 800c42a:	e063      	b.n	800c4f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d103      	bne.n	800c43a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c432:	f001 fef7 	bl	800e224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c436:	2300      	movs	r3, #0
 800c438:	e05c      	b.n	800c4f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c440:	f107 0314 	add.w	r3, r7, #20
 800c444:	4618      	mov	r0, r3
 800c446:	f001 f809 	bl	800d45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c44a:	2301      	movs	r3, #1
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c44e:	f001 fee9 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c452:	f000 fd7b 	bl	800cf4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c456:	f001 feb5 	bl	800e1c4 <vPortEnterCritical>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c460:	b25b      	sxtb	r3, r3
 800c462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c466:	d103      	bne.n	800c470 <xQueueGenericSend+0x16c>
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c476:	b25b      	sxtb	r3, r3
 800c478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47c:	d103      	bne.n	800c486 <xQueueGenericSend+0x182>
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c486:	f001 fecd 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c48a:	1d3a      	adds	r2, r7, #4
 800c48c:	f107 0314 	add.w	r3, r7, #20
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fff8 	bl	800d488 <xTaskCheckForTimeOut>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d124      	bne.n	800c4e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c49e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4a0:	f000 faa2 	bl	800c9e8 <prvIsQueueFull>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d018      	beq.n	800c4dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	3310      	adds	r3, #16
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 ff1e 	bl	800d2f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ba:	f000 fa2d 	bl	800c918 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4be:	f000 fd53 	bl	800cf68 <xTaskResumeAll>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f47f af7c 	bne.w	800c3c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c4ca:	4b0c      	ldr	r3, [pc, #48]	; (800c4fc <xQueueGenericSend+0x1f8>)
 800c4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	e772      	b.n	800c3c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4de:	f000 fa1b 	bl	800c918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4e2:	f000 fd41 	bl	800cf68 <xTaskResumeAll>
 800c4e6:	e76c      	b.n	800c3c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ea:	f000 fa15 	bl	800c918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4ee:	f000 fd3b 	bl	800cf68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3738      	adds	r7, #56	; 0x38
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	e000ed04 	.word	0xe000ed04

0800c500 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b090      	sub	sp, #64	; 0x40
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <xQueueGenericSendFromISR+0x3c>
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d101      	bne.n	800c540 <xQueueGenericSendFromISR+0x40>
 800c53c:	2301      	movs	r3, #1
 800c53e:	e000      	b.n	800c542 <xQueueGenericSendFromISR+0x42>
 800c540:	2300      	movs	r3, #0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10a      	bne.n	800c55c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d103      	bne.n	800c56a <xQueueGenericSendFromISR+0x6a>
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c566:	2b01      	cmp	r3, #1
 800c568:	d101      	bne.n	800c56e <xQueueGenericSendFromISR+0x6e>
 800c56a:	2301      	movs	r3, #1
 800c56c:	e000      	b.n	800c570 <xQueueGenericSendFromISR+0x70>
 800c56e:	2300      	movs	r3, #0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	623b      	str	r3, [r7, #32]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c58a:	f001 fefd 	bl	800e388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c58e:	f3ef 8211 	mrs	r2, BASEPRI
 800c592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	61fa      	str	r2, [r7, #28]
 800c5a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d302      	bcc.n	800c5bc <xQueueGenericSendFromISR+0xbc>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d12f      	bne.n	800c61c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5d2:	f000 f911 	bl	800c7f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5de:	d112      	bne.n	800c606 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d016      	beq.n	800c616 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	3324      	adds	r3, #36	; 0x24
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 fed1 	bl	800d394 <xTaskRemoveFromEventList>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	e007      	b.n	800c616 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c606:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c60a:	3301      	adds	r3, #1
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	b25a      	sxtb	r2, r3
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c616:	2301      	movs	r3, #1
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c61a:	e001      	b.n	800c620 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c61c:	2300      	movs	r3, #0
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c62a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3740      	adds	r7, #64	; 0x40
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
	...

0800c638 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08c      	sub	sp, #48	; 0x30
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c644:	2300      	movs	r3, #0
 800c646:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <xQueueReceive+0x30>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	623b      	str	r3, [r7, #32]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d103      	bne.n	800c676 <xQueueReceive+0x3e>
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <xQueueReceive+0x42>
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <xQueueReceive+0x44>
 800c67a:	2300      	movs	r3, #0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <xQueueReceive+0x5e>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	61fb      	str	r3, [r7, #28]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c696:	f001 f83b 	bl	800d710 <xTaskGetSchedulerState>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <xQueueReceive+0x6e>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <xQueueReceive+0x72>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <xQueueReceive+0x74>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xQueueReceive+0x8e>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	61bb      	str	r3, [r7, #24]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6c6:	f001 fd7d 	bl	800e1c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01f      	beq.n	800c716 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6d6:	68b9      	ldr	r1, [r7, #8]
 800c6d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6da:	f000 f8f7 	bl	800c8cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	1e5a      	subs	r2, r3, #1
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00f      	beq.n	800c70e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	3310      	adds	r3, #16
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fe4e 	bl	800d394 <xTaskRemoveFromEventList>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d007      	beq.n	800c70e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6fe:	4b3d      	ldr	r3, [pc, #244]	; (800c7f4 <xQueueReceive+0x1bc>)
 800c700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c70e:	f001 fd89 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800c712:	2301      	movs	r3, #1
 800c714:	e069      	b.n	800c7ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d103      	bne.n	800c724 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c71c:	f001 fd82 	bl	800e224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c720:	2300      	movs	r3, #0
 800c722:	e062      	b.n	800c7ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d106      	bne.n	800c738 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c72a:	f107 0310 	add.w	r3, r7, #16
 800c72e:	4618      	mov	r0, r3
 800c730:	f000 fe94 	bl	800d45c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c734:	2301      	movs	r3, #1
 800c736:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c738:	f001 fd74 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c73c:	f000 fc06 	bl	800cf4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c740:	f001 fd40 	bl	800e1c4 <vPortEnterCritical>
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c74a:	b25b      	sxtb	r3, r3
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c750:	d103      	bne.n	800c75a <xQueueReceive+0x122>
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c760:	b25b      	sxtb	r3, r3
 800c762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c766:	d103      	bne.n	800c770 <xQueueReceive+0x138>
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c770:	f001 fd58 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c774:	1d3a      	adds	r2, r7, #4
 800c776:	f107 0310 	add.w	r3, r7, #16
 800c77a:	4611      	mov	r1, r2
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 fe83 	bl	800d488 <xTaskCheckForTimeOut>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d123      	bne.n	800c7d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c78a:	f000 f917 	bl	800c9bc <prvIsQueueEmpty>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d017      	beq.n	800c7c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	3324      	adds	r3, #36	; 0x24
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	4611      	mov	r1, r2
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 fda9 	bl	800d2f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a4:	f000 f8b8 	bl	800c918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7a8:	f000 fbde 	bl	800cf68 <xTaskResumeAll>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d189      	bne.n	800c6c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c7b2:	4b10      	ldr	r3, [pc, #64]	; (800c7f4 <xQueueReceive+0x1bc>)
 800c7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	e780      	b.n	800c6c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c6:	f000 f8a7 	bl	800c918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7ca:	f000 fbcd 	bl	800cf68 <xTaskResumeAll>
 800c7ce:	e77a      	b.n	800c6c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d2:	f000 f8a1 	bl	800c918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7d6:	f000 fbc7 	bl	800cf68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7dc:	f000 f8ee 	bl	800c9bc <prvIsQueueEmpty>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f43f af6f 	beq.w	800c6c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3730      	adds	r7, #48	; 0x30
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	e000ed04 	.word	0xe000ed04

0800c7f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10d      	bne.n	800c832 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d14d      	bne.n	800c8ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 ff92 	bl	800d74c <xTaskPriorityDisinherit>
 800c828:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	609a      	str	r2, [r3, #8]
 800c830:	e043      	b.n	800c8ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d119      	bne.n	800c86c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6858      	ldr	r0, [r3, #4]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c840:	461a      	mov	r2, r3
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	f001 fff4 	bl	800e830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c850:	441a      	add	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d32b      	bcc.n	800c8ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	605a      	str	r2, [r3, #4]
 800c86a:	e026      	b.n	800c8ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	68d8      	ldr	r0, [r3, #12]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	461a      	mov	r2, r3
 800c876:	68b9      	ldr	r1, [r7, #8]
 800c878:	f001 ffda 	bl	800e830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68da      	ldr	r2, [r3, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	425b      	negs	r3, r3
 800c886:	441a      	add	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	68da      	ldr	r2, [r3, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d207      	bcs.n	800c8a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a0:	425b      	negs	r3, r3
 800c8a2:	441a      	add	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d105      	bne.n	800c8ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	3b01      	subs	r3, #1
 800c8b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8c2:	697b      	ldr	r3, [r7, #20]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d018      	beq.n	800c910 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	441a      	add	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d303      	bcc.n	800c900 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	68d9      	ldr	r1, [r3, #12]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c908:	461a      	mov	r2, r3
 800c90a:	6838      	ldr	r0, [r7, #0]
 800c90c:	f001 ff90 	bl	800e830 <memcpy>
	}
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c920:	f001 fc50 	bl	800e1c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c92a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c92c:	e011      	b.n	800c952 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c932:	2b00      	cmp	r3, #0
 800c934:	d012      	beq.n	800c95c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3324      	adds	r3, #36	; 0x24
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 fd2a 	bl	800d394 <xTaskRemoveFromEventList>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c946:	f000 fe01 	bl	800d54c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c956:	2b00      	cmp	r3, #0
 800c958:	dce9      	bgt.n	800c92e <prvUnlockQueue+0x16>
 800c95a:	e000      	b.n	800c95e <prvUnlockQueue+0x46>
					break;
 800c95c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	22ff      	movs	r2, #255	; 0xff
 800c962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c966:	f001 fc5d 	bl	800e224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c96a:	f001 fc2b 	bl	800e1c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c974:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c976:	e011      	b.n	800c99c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d012      	beq.n	800c9a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3310      	adds	r3, #16
 800c984:	4618      	mov	r0, r3
 800c986:	f000 fd05 	bl	800d394 <xTaskRemoveFromEventList>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c990:	f000 fddc 	bl	800d54c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c994:	7bbb      	ldrb	r3, [r7, #14]
 800c996:	3b01      	subs	r3, #1
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c99c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	dce9      	bgt.n	800c978 <prvUnlockQueue+0x60>
 800c9a4:	e000      	b.n	800c9a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	22ff      	movs	r2, #255	; 0xff
 800c9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9b0:	f001 fc38 	bl	800e224 <vPortExitCritical>
}
 800c9b4:	bf00      	nop
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9c4:	f001 fbfe 	bl	800e1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d102      	bne.n	800c9d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	60fb      	str	r3, [r7, #12]
 800c9d4:	e001      	b.n	800c9da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9da:	f001 fc23 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800c9de:	68fb      	ldr	r3, [r7, #12]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9f0:	f001 fbe8 	bl	800e1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d102      	bne.n	800ca06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca00:	2301      	movs	r3, #1
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	e001      	b.n	800ca0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca0a:	f001 fc0b 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca22:	2300      	movs	r3, #0
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	e014      	b.n	800ca52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca28:	4a0f      	ldr	r2, [pc, #60]	; (800ca68 <vQueueAddToRegistry+0x50>)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10b      	bne.n	800ca4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca34:	490c      	ldr	r1, [pc, #48]	; (800ca68 <vQueueAddToRegistry+0x50>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca3e:	4a0a      	ldr	r2, [pc, #40]	; (800ca68 <vQueueAddToRegistry+0x50>)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	4413      	add	r3, r2
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca4a:	e006      	b.n	800ca5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b07      	cmp	r3, #7
 800ca56:	d9e7      	bls.n	800ca28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	20002f78 	.word	0x20002f78

0800ca6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca7c:	f001 fba2 	bl	800e1c4 <vPortEnterCritical>
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca86:	b25b      	sxtb	r3, r3
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d103      	bne.n	800ca96 <vQueueWaitForMessageRestricted+0x2a>
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca9c:	b25b      	sxtb	r3, r3
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d103      	bne.n	800caac <vQueueWaitForMessageRestricted+0x40>
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caac:	f001 fbba 	bl	800e224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d106      	bne.n	800cac6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	3324      	adds	r3, #36	; 0x24
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 fc3b 	bl	800d33c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cac6:	6978      	ldr	r0, [r7, #20]
 800cac8:	f7ff ff26 	bl	800c918 <prvUnlockQueue>
	}
 800cacc:	bf00      	nop
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08e      	sub	sp, #56	; 0x38
 800cad8:	af04      	add	r7, sp, #16
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10a      	bne.n	800cafe <xTaskCreateStatic+0x2a>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	623b      	str	r3, [r7, #32]
}
 800cafa:	bf00      	nop
 800cafc:	e7fe      	b.n	800cafc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <xTaskCreateStatic+0x46>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	61fb      	str	r3, [r7, #28]
}
 800cb16:	bf00      	nop
 800cb18:	e7fe      	b.n	800cb18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb1a:	235c      	movs	r3, #92	; 0x5c
 800cb1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	2b5c      	cmp	r3, #92	; 0x5c
 800cb22:	d00a      	beq.n	800cb3a <xTaskCreateStatic+0x66>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	61bb      	str	r3, [r7, #24]
}
 800cb36:	bf00      	nop
 800cb38:	e7fe      	b.n	800cb38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d01e      	beq.n	800cb80 <xTaskCreateStatic+0xac>
 800cb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d01b      	beq.n	800cb80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	2202      	movs	r2, #2
 800cb56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9303      	str	r3, [sp, #12]
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	9302      	str	r3, [sp, #8]
 800cb62:	f107 0314 	add.w	r3, r7, #20
 800cb66:	9301      	str	r3, [sp, #4]
 800cb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	68b9      	ldr	r1, [r7, #8]
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f000 f850 	bl	800cc18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb7a:	f000 f8dd 	bl	800cd38 <prvAddNewTaskToReadyList>
 800cb7e:	e001      	b.n	800cb84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb84:	697b      	ldr	r3, [r7, #20]
	}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3728      	adds	r7, #40	; 0x28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b08c      	sub	sp, #48	; 0x30
 800cb92:	af04      	add	r7, sp, #16
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	603b      	str	r3, [r7, #0]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb9e:	88fb      	ldrh	r3, [r7, #6]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f001 fc30 	bl	800e408 <pvPortMalloc>
 800cba8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00e      	beq.n	800cbce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbb0:	205c      	movs	r0, #92	; 0x5c
 800cbb2:	f001 fc29 	bl	800e408 <pvPortMalloc>
 800cbb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d003      	beq.n	800cbc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	631a      	str	r2, [r3, #48]	; 0x30
 800cbc4:	e005      	b.n	800cbd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbc6:	6978      	ldr	r0, [r7, #20]
 800cbc8:	f001 fcea 	bl	800e5a0 <vPortFree>
 800cbcc:	e001      	b.n	800cbd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d017      	beq.n	800cc08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbe0:	88fa      	ldrh	r2, [r7, #6]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	9302      	str	r3, [sp, #8]
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	68b9      	ldr	r1, [r7, #8]
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f000 f80e 	bl	800cc18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbfc:	69f8      	ldr	r0, [r7, #28]
 800cbfe:	f000 f89b 	bl	800cd38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc02:	2301      	movs	r3, #1
 800cc04:	61bb      	str	r3, [r7, #24]
 800cc06:	e002      	b.n	800cc0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc0e:	69bb      	ldr	r3, [r7, #24]
	}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3720      	adds	r7, #32
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b088      	sub	sp, #32
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	461a      	mov	r2, r3
 800cc30:	21a5      	movs	r1, #165	; 0xa5
 800cc32:	f001 fe0b 	bl	800e84c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc40:	3b01      	subs	r3, #1
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	f023 0307 	bic.w	r3, r3, #7
 800cc4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	f003 0307 	and.w	r3, r3, #7
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	617b      	str	r3, [r7, #20]
}
 800cc6c:	bf00      	nop
 800cc6e:	e7fe      	b.n	800cc6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d01f      	beq.n	800ccb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc76:	2300      	movs	r3, #0
 800cc78:	61fb      	str	r3, [r7, #28]
 800cc7a:	e012      	b.n	800cca2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	4413      	add	r3, r2
 800cc82:	7819      	ldrb	r1, [r3, #0]
 800cc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	4413      	add	r3, r2
 800cc8a:	3334      	adds	r3, #52	; 0x34
 800cc8c:	460a      	mov	r2, r1
 800cc8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	4413      	add	r3, r2
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d006      	beq.n	800ccaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	2b0f      	cmp	r3, #15
 800cca6:	d9e9      	bls.n	800cc7c <prvInitialiseNewTask+0x64>
 800cca8:	e000      	b.n	800ccac <prvInitialiseNewTask+0x94>
			{
				break;
 800ccaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ccb4:	e003      	b.n	800ccbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc0:	2b37      	cmp	r3, #55	; 0x37
 800ccc2:	d901      	bls.n	800ccc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccc4:	2337      	movs	r3, #55	; 0x37
 800ccc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cccc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccdc:	3304      	adds	r3, #4
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff f978 	bl	800bfd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce6:	3318      	adds	r3, #24
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7ff f973 	bl	800bfd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ccee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	2200      	movs	r2, #0
 800cd08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	68f9      	ldr	r1, [r7, #12]
 800cd16:	69b8      	ldr	r0, [r7, #24]
 800cd18:	f001 f928 	bl	800df6c <pxPortInitialiseStack>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd2e:	bf00      	nop
 800cd30:	3720      	adds	r7, #32
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd40:	f001 fa40 	bl	800e1c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd44:	4b2d      	ldr	r3, [pc, #180]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	4a2c      	ldr	r2, [pc, #176]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd4e:	4b2c      	ldr	r3, [pc, #176]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d109      	bne.n	800cd6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd56:	4a2a      	ldr	r2, [pc, #168]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd5c:	4b27      	ldr	r3, [pc, #156]	; (800cdfc <prvAddNewTaskToReadyList+0xc4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d110      	bne.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd64:	f000 fc16 	bl	800d594 <prvInitialiseTaskLists>
 800cd68:	e00d      	b.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd6a:	4b26      	ldr	r3, [pc, #152]	; (800ce04 <prvAddNewTaskToReadyList+0xcc>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d109      	bne.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd72:	4b23      	ldr	r3, [pc, #140]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d802      	bhi.n	800cd86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd80:	4a1f      	ldr	r2, [pc, #124]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd86:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	4a1e      	ldr	r2, [pc, #120]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cd8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd90:	4b1d      	ldr	r3, [pc, #116]	; (800ce08 <prvAddNewTaskToReadyList+0xd0>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <prvAddNewTaskToReadyList+0xd4>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d903      	bls.n	800cdac <prvAddNewTaskToReadyList+0x74>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	4a18      	ldr	r2, [pc, #96]	; (800ce0c <prvAddNewTaskToReadyList+0xd4>)
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4a15      	ldr	r2, [pc, #84]	; (800ce10 <prvAddNewTaskToReadyList+0xd8>)
 800cdba:	441a      	add	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4610      	mov	r0, r2
 800cdc4:	f7ff f913 	bl	800bfee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdc8:	f001 fa2c 	bl	800e224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdcc:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <prvAddNewTaskToReadyList+0xcc>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00e      	beq.n	800cdf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	; (800ce00 <prvAddNewTaskToReadyList+0xc8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d207      	bcs.n	800cdf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cde2:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <prvAddNewTaskToReadyList+0xdc>)
 800cde4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf2:	bf00      	nop
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	2000348c 	.word	0x2000348c
 800ce00:	20002fb8 	.word	0x20002fb8
 800ce04:	20003498 	.word	0x20003498
 800ce08:	200034a8 	.word	0x200034a8
 800ce0c:	20003494 	.word	0x20003494
 800ce10:	20002fbc 	.word	0x20002fbc
 800ce14:	e000ed04 	.word	0xe000ed04

0800ce18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce20:	2300      	movs	r3, #0
 800ce22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d017      	beq.n	800ce5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce2a:	4b13      	ldr	r3, [pc, #76]	; (800ce78 <vTaskDelay+0x60>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00a      	beq.n	800ce48 <vTaskDelay+0x30>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	60bb      	str	r3, [r7, #8]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce48:	f000 f880 	bl	800cf4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fcea 	bl	800d828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce54:	f000 f888 	bl	800cf68 <xTaskResumeAll>
 800ce58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d107      	bne.n	800ce70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce60:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <vTaskDelay+0x64>)
 800ce62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	200034b4 	.word	0x200034b4
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	; 0x28
 800ce84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce8e:	463a      	mov	r2, r7
 800ce90:	1d39      	adds	r1, r7, #4
 800ce92:	f107 0308 	add.w	r3, r7, #8
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff f848 	bl	800bf2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	9202      	str	r2, [sp, #8]
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	2300      	movs	r3, #0
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	460a      	mov	r2, r1
 800ceae:	4921      	ldr	r1, [pc, #132]	; (800cf34 <vTaskStartScheduler+0xb4>)
 800ceb0:	4821      	ldr	r0, [pc, #132]	; (800cf38 <vTaskStartScheduler+0xb8>)
 800ceb2:	f7ff fe0f 	bl	800cad4 <xTaskCreateStatic>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	4a20      	ldr	r2, [pc, #128]	; (800cf3c <vTaskStartScheduler+0xbc>)
 800ceba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cebc:	4b1f      	ldr	r3, [pc, #124]	; (800cf3c <vTaskStartScheduler+0xbc>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cec4:	2301      	movs	r3, #1
 800cec6:	617b      	str	r3, [r7, #20]
 800cec8:	e001      	b.n	800cece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d102      	bne.n	800ceda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ced4:	f000 fcfc 	bl	800d8d0 <xTimerCreateTimerTask>
 800ced8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d116      	bne.n	800cf0e <vTaskStartScheduler+0x8e>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	613b      	str	r3, [r7, #16]
}
 800cef2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cef4:	4b12      	ldr	r3, [pc, #72]	; (800cf40 <vTaskStartScheduler+0xc0>)
 800cef6:	f04f 32ff 	mov.w	r2, #4294967295
 800cefa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cefc:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <vTaskStartScheduler+0xc4>)
 800cefe:	2201      	movs	r2, #1
 800cf00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf02:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <vTaskStartScheduler+0xc8>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf08:	f001 f8ba 	bl	800e080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf0c:	e00e      	b.n	800cf2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf14:	d10a      	bne.n	800cf2c <vTaskStartScheduler+0xac>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	60fb      	str	r3, [r7, #12]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <vTaskStartScheduler+0xaa>
}
 800cf2c:	bf00      	nop
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0800f1ec 	.word	0x0800f1ec
 800cf38:	0800d565 	.word	0x0800d565
 800cf3c:	200034b0 	.word	0x200034b0
 800cf40:	200034ac 	.word	0x200034ac
 800cf44:	20003498 	.word	0x20003498
 800cf48:	20003490 	.word	0x20003490

0800cf4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf50:	4b04      	ldr	r3, [pc, #16]	; (800cf64 <vTaskSuspendAll+0x18>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	4a03      	ldr	r2, [pc, #12]	; (800cf64 <vTaskSuspendAll+0x18>)
 800cf58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf5a:	bf00      	nop
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	200034b4 	.word	0x200034b4

0800cf68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf76:	4b42      	ldr	r3, [pc, #264]	; (800d080 <xTaskResumeAll+0x118>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10a      	bne.n	800cf94 <xTaskResumeAll+0x2c>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	603b      	str	r3, [r7, #0]
}
 800cf90:	bf00      	nop
 800cf92:	e7fe      	b.n	800cf92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf94:	f001 f916 	bl	800e1c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf98:	4b39      	ldr	r3, [pc, #228]	; (800d080 <xTaskResumeAll+0x118>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4a38      	ldr	r2, [pc, #224]	; (800d080 <xTaskResumeAll+0x118>)
 800cfa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa2:	4b37      	ldr	r3, [pc, #220]	; (800d080 <xTaskResumeAll+0x118>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d162      	bne.n	800d070 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfaa:	4b36      	ldr	r3, [pc, #216]	; (800d084 <xTaskResumeAll+0x11c>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d05e      	beq.n	800d070 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfb2:	e02f      	b.n	800d014 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb4:	4b34      	ldr	r3, [pc, #208]	; (800d088 <xTaskResumeAll+0x120>)
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3318      	adds	r3, #24
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff f871 	bl	800c0a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff f86c 	bl	800c0a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd4:	4b2d      	ldr	r3, [pc, #180]	; (800d08c <xTaskResumeAll+0x124>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d903      	bls.n	800cfe4 <xTaskResumeAll+0x7c>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	4a2a      	ldr	r2, [pc, #168]	; (800d08c <xTaskResumeAll+0x124>)
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe8:	4613      	mov	r3, r2
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	4413      	add	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4a27      	ldr	r2, [pc, #156]	; (800d090 <xTaskResumeAll+0x128>)
 800cff2:	441a      	add	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4619      	mov	r1, r3
 800cffa:	4610      	mov	r0, r2
 800cffc:	f7fe fff7 	bl	800bfee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d004:	4b23      	ldr	r3, [pc, #140]	; (800d094 <xTaskResumeAll+0x12c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d302      	bcc.n	800d014 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d00e:	4b22      	ldr	r3, [pc, #136]	; (800d098 <xTaskResumeAll+0x130>)
 800d010:	2201      	movs	r2, #1
 800d012:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d014:	4b1c      	ldr	r3, [pc, #112]	; (800d088 <xTaskResumeAll+0x120>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1cb      	bne.n	800cfb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d022:	f000 fb55 	bl	800d6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d026:	4b1d      	ldr	r3, [pc, #116]	; (800d09c <xTaskResumeAll+0x134>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d010      	beq.n	800d054 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d032:	f000 f847 	bl	800d0c4 <xTaskIncrementTick>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d03c:	4b16      	ldr	r3, [pc, #88]	; (800d098 <xTaskResumeAll+0x130>)
 800d03e:	2201      	movs	r2, #1
 800d040:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	3b01      	subs	r3, #1
 800d046:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1f1      	bne.n	800d032 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <xTaskResumeAll+0x134>)
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d054:	4b10      	ldr	r3, [pc, #64]	; (800d098 <xTaskResumeAll+0x130>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d009      	beq.n	800d070 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d05c:	2301      	movs	r3, #1
 800d05e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d060:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <xTaskResumeAll+0x138>)
 800d062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d070:	f001 f8d8 	bl	800e224 <vPortExitCritical>

	return xAlreadyYielded;
 800d074:	68bb      	ldr	r3, [r7, #8]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200034b4 	.word	0x200034b4
 800d084:	2000348c 	.word	0x2000348c
 800d088:	2000344c 	.word	0x2000344c
 800d08c:	20003494 	.word	0x20003494
 800d090:	20002fbc 	.word	0x20002fbc
 800d094:	20002fb8 	.word	0x20002fb8
 800d098:	200034a0 	.word	0x200034a0
 800d09c:	2000349c 	.word	0x2000349c
 800d0a0:	e000ed04 	.word	0xe000ed04

0800d0a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <xTaskGetTickCount+0x1c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0b0:	687b      	ldr	r3, [r7, #4]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	20003490 	.word	0x20003490

0800d0c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0ce:	4b4f      	ldr	r3, [pc, #316]	; (800d20c <xTaskIncrementTick+0x148>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f040 808f 	bne.w	800d1f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0d8:	4b4d      	ldr	r3, [pc, #308]	; (800d210 <xTaskIncrementTick+0x14c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0e0:	4a4b      	ldr	r2, [pc, #300]	; (800d210 <xTaskIncrementTick+0x14c>)
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d120      	bne.n	800d12e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0ec:	4b49      	ldr	r3, [pc, #292]	; (800d214 <xTaskIncrementTick+0x150>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00a      	beq.n	800d10c <xTaskIncrementTick+0x48>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	603b      	str	r3, [r7, #0]
}
 800d108:	bf00      	nop
 800d10a:	e7fe      	b.n	800d10a <xTaskIncrementTick+0x46>
 800d10c:	4b41      	ldr	r3, [pc, #260]	; (800d214 <xTaskIncrementTick+0x150>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	60fb      	str	r3, [r7, #12]
 800d112:	4b41      	ldr	r3, [pc, #260]	; (800d218 <xTaskIncrementTick+0x154>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a3f      	ldr	r2, [pc, #252]	; (800d214 <xTaskIncrementTick+0x150>)
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	4a3f      	ldr	r2, [pc, #252]	; (800d218 <xTaskIncrementTick+0x154>)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6013      	str	r3, [r2, #0]
 800d120:	4b3e      	ldr	r3, [pc, #248]	; (800d21c <xTaskIncrementTick+0x158>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3301      	adds	r3, #1
 800d126:	4a3d      	ldr	r2, [pc, #244]	; (800d21c <xTaskIncrementTick+0x158>)
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	f000 fad1 	bl	800d6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d12e:	4b3c      	ldr	r3, [pc, #240]	; (800d220 <xTaskIncrementTick+0x15c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	429a      	cmp	r2, r3
 800d136:	d349      	bcc.n	800d1cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d138:	4b36      	ldr	r3, [pc, #216]	; (800d214 <xTaskIncrementTick+0x150>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d104      	bne.n	800d14c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d142:	4b37      	ldr	r3, [pc, #220]	; (800d220 <xTaskIncrementTick+0x15c>)
 800d144:	f04f 32ff 	mov.w	r2, #4294967295
 800d148:	601a      	str	r2, [r3, #0]
					break;
 800d14a:	e03f      	b.n	800d1cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14c:	4b31      	ldr	r3, [pc, #196]	; (800d214 <xTaskIncrementTick+0x150>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	429a      	cmp	r2, r3
 800d162:	d203      	bcs.n	800d16c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d164:	4a2e      	ldr	r2, [pc, #184]	; (800d220 <xTaskIncrementTick+0x15c>)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d16a:	e02f      	b.n	800d1cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	3304      	adds	r3, #4
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe ff99 	bl	800c0a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d004      	beq.n	800d188 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	3318      	adds	r3, #24
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe ff90 	bl	800c0a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18c:	4b25      	ldr	r3, [pc, #148]	; (800d224 <xTaskIncrementTick+0x160>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	429a      	cmp	r2, r3
 800d192:	d903      	bls.n	800d19c <xTaskIncrementTick+0xd8>
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d198:	4a22      	ldr	r2, [pc, #136]	; (800d224 <xTaskIncrementTick+0x160>)
 800d19a:	6013      	str	r3, [r2, #0]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4a1f      	ldr	r2, [pc, #124]	; (800d228 <xTaskIncrementTick+0x164>)
 800d1aa:	441a      	add	r2, r3
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	f7fe ff1b 	bl	800bfee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1bc:	4b1b      	ldr	r3, [pc, #108]	; (800d22c <xTaskIncrementTick+0x168>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d3b8      	bcc.n	800d138 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ca:	e7b5      	b.n	800d138 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1cc:	4b17      	ldr	r3, [pc, #92]	; (800d22c <xTaskIncrementTick+0x168>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d2:	4915      	ldr	r1, [pc, #84]	; (800d228 <xTaskIncrementTick+0x164>)
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d901      	bls.n	800d1e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1e8:	4b11      	ldr	r3, [pc, #68]	; (800d230 <xTaskIncrementTick+0x16c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d007      	beq.n	800d200 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
 800d1f4:	e004      	b.n	800d200 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1f6:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <xTaskIncrementTick+0x170>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	4a0d      	ldr	r2, [pc, #52]	; (800d234 <xTaskIncrementTick+0x170>)
 800d1fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d200:	697b      	ldr	r3, [r7, #20]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	200034b4 	.word	0x200034b4
 800d210:	20003490 	.word	0x20003490
 800d214:	20003444 	.word	0x20003444
 800d218:	20003448 	.word	0x20003448
 800d21c:	200034a4 	.word	0x200034a4
 800d220:	200034ac 	.word	0x200034ac
 800d224:	20003494 	.word	0x20003494
 800d228:	20002fbc 	.word	0x20002fbc
 800d22c:	20002fb8 	.word	0x20002fb8
 800d230:	200034a0 	.word	0x200034a0
 800d234:	2000349c 	.word	0x2000349c

0800d238 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d23e:	4b28      	ldr	r3, [pc, #160]	; (800d2e0 <vTaskSwitchContext+0xa8>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d246:	4b27      	ldr	r3, [pc, #156]	; (800d2e4 <vTaskSwitchContext+0xac>)
 800d248:	2201      	movs	r2, #1
 800d24a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d24c:	e041      	b.n	800d2d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d24e:	4b25      	ldr	r3, [pc, #148]	; (800d2e4 <vTaskSwitchContext+0xac>)
 800d250:	2200      	movs	r2, #0
 800d252:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d254:	4b24      	ldr	r3, [pc, #144]	; (800d2e8 <vTaskSwitchContext+0xb0>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	e010      	b.n	800d27e <vTaskSwitchContext+0x46>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10a      	bne.n	800d278 <vTaskSwitchContext+0x40>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	607b      	str	r3, [r7, #4]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <vTaskSwitchContext+0x3e>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	491b      	ldr	r1, [pc, #108]	; (800d2ec <vTaskSwitchContext+0xb4>)
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	4613      	mov	r3, r2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	440b      	add	r3, r1
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0e4      	beq.n	800d25c <vTaskSwitchContext+0x24>
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4a13      	ldr	r2, [pc, #76]	; (800d2ec <vTaskSwitchContext+0xb4>)
 800d29e:	4413      	add	r3, r2
 800d2a0:	60bb      	str	r3, [r7, #8]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	605a      	str	r2, [r3, #4]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	3308      	adds	r3, #8
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d104      	bne.n	800d2c2 <vTaskSwitchContext+0x8a>
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	605a      	str	r2, [r3, #4]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <vTaskSwitchContext+0xb8>)
 800d2ca:	6013      	str	r3, [r2, #0]
 800d2cc:	4a06      	ldr	r2, [pc, #24]	; (800d2e8 <vTaskSwitchContext+0xb0>)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6013      	str	r3, [r2, #0]
}
 800d2d2:	bf00      	nop
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	200034b4 	.word	0x200034b4
 800d2e4:	200034a0 	.word	0x200034a0
 800d2e8:	20003494 	.word	0x20003494
 800d2ec:	20002fbc 	.word	0x20002fbc
 800d2f0:	20002fb8 	.word	0x20002fb8

0800d2f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60fb      	str	r3, [r7, #12]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d31a:	4b07      	ldr	r3, [pc, #28]	; (800d338 <vTaskPlaceOnEventList+0x44>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3318      	adds	r3, #24
 800d320:	4619      	mov	r1, r3
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f7fe fe87 	bl	800c036 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d328:	2101      	movs	r1, #1
 800d32a:	6838      	ldr	r0, [r7, #0]
 800d32c:	f000 fa7c 	bl	800d828 <prvAddCurrentTaskToDelayedList>
}
 800d330:	bf00      	nop
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	20002fb8 	.word	0x20002fb8

0800d33c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	617b      	str	r3, [r7, #20]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d364:	4b0a      	ldr	r3, [pc, #40]	; (800d390 <vTaskPlaceOnEventListRestricted+0x54>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3318      	adds	r3, #24
 800d36a:	4619      	mov	r1, r3
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7fe fe3e 	bl	800bfee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d378:	f04f 33ff 	mov.w	r3, #4294967295
 800d37c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	68b8      	ldr	r0, [r7, #8]
 800d382:	f000 fa51 	bl	800d828 <prvAddCurrentTaskToDelayedList>
	}
 800d386:	bf00      	nop
 800d388:	3718      	adds	r7, #24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	20002fb8 	.word	0x20002fb8

0800d394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10a      	bne.n	800d3c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	60fb      	str	r3, [r7, #12]
}
 800d3bc:	bf00      	nop
 800d3be:	e7fe      	b.n	800d3be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	3318      	adds	r3, #24
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fe6f 	bl	800c0a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3ca:	4b1e      	ldr	r3, [pc, #120]	; (800d444 <xTaskRemoveFromEventList+0xb0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d11d      	bne.n	800d40e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fe fe66 	bl	800c0a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e0:	4b19      	ldr	r3, [pc, #100]	; (800d448 <xTaskRemoveFromEventList+0xb4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d903      	bls.n	800d3f0 <xTaskRemoveFromEventList+0x5c>
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ec:	4a16      	ldr	r2, [pc, #88]	; (800d448 <xTaskRemoveFromEventList+0xb4>)
 800d3ee:	6013      	str	r3, [r2, #0]
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4a13      	ldr	r2, [pc, #76]	; (800d44c <xTaskRemoveFromEventList+0xb8>)
 800d3fe:	441a      	add	r2, r3
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	3304      	adds	r3, #4
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f7fe fdf1 	bl	800bfee <vListInsertEnd>
 800d40c:	e005      	b.n	800d41a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	3318      	adds	r3, #24
 800d412:	4619      	mov	r1, r3
 800d414:	480e      	ldr	r0, [pc, #56]	; (800d450 <xTaskRemoveFromEventList+0xbc>)
 800d416:	f7fe fdea 	bl	800bfee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41e:	4b0d      	ldr	r3, [pc, #52]	; (800d454 <xTaskRemoveFromEventList+0xc0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d424:	429a      	cmp	r2, r3
 800d426:	d905      	bls.n	800d434 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d428:	2301      	movs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d42c:	4b0a      	ldr	r3, [pc, #40]	; (800d458 <xTaskRemoveFromEventList+0xc4>)
 800d42e:	2201      	movs	r2, #1
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e001      	b.n	800d438 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d434:	2300      	movs	r3, #0
 800d436:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d438:	697b      	ldr	r3, [r7, #20]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	200034b4 	.word	0x200034b4
 800d448:	20003494 	.word	0x20003494
 800d44c:	20002fbc 	.word	0x20002fbc
 800d450:	2000344c 	.word	0x2000344c
 800d454:	20002fb8 	.word	0x20002fb8
 800d458:	200034a0 	.word	0x200034a0

0800d45c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d464:	4b06      	ldr	r3, [pc, #24]	; (800d480 <vTaskInternalSetTimeOutState+0x24>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d46c:	4b05      	ldr	r3, [pc, #20]	; (800d484 <vTaskInternalSetTimeOutState+0x28>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	605a      	str	r2, [r3, #4]
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	200034a4 	.word	0x200034a4
 800d484:	20003490 	.word	0x20003490

0800d488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10a      	bne.n	800d4ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	613b      	str	r3, [r7, #16]
}
 800d4aa:	bf00      	nop
 800d4ac:	e7fe      	b.n	800d4ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	60fb      	str	r3, [r7, #12]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4ca:	f000 fe7b 	bl	800e1c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4ce:	4b1d      	ldr	r3, [pc, #116]	; (800d544 <xTaskCheckForTimeOut+0xbc>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e6:	d102      	bne.n	800d4ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	61fb      	str	r3, [r7, #28]
 800d4ec:	e023      	b.n	800d536 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4b15      	ldr	r3, [pc, #84]	; (800d548 <xTaskCheckForTimeOut+0xc0>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d007      	beq.n	800d50a <xTaskCheckForTimeOut+0x82>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	69ba      	ldr	r2, [r7, #24]
 800d500:	429a      	cmp	r2, r3
 800d502:	d302      	bcc.n	800d50a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d504:	2301      	movs	r3, #1
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e015      	b.n	800d536 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	429a      	cmp	r2, r3
 800d512:	d20b      	bcs.n	800d52c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	1ad2      	subs	r2, r2, r3
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff ff9b 	bl	800d45c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d526:	2300      	movs	r3, #0
 800d528:	61fb      	str	r3, [r7, #28]
 800d52a:	e004      	b.n	800d536 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d532:	2301      	movs	r3, #1
 800d534:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d536:	f000 fe75 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800d53a:	69fb      	ldr	r3, [r7, #28]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	20003490 	.word	0x20003490
 800d548:	200034a4 	.word	0x200034a4

0800d54c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d550:	4b03      	ldr	r3, [pc, #12]	; (800d560 <vTaskMissedYield+0x14>)
 800d552:	2201      	movs	r2, #1
 800d554:	601a      	str	r2, [r3, #0]
}
 800d556:	bf00      	nop
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	200034a0 	.word	0x200034a0

0800d564 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d56c:	f000 f852 	bl	800d614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d570:	4b06      	ldr	r3, [pc, #24]	; (800d58c <prvIdleTask+0x28>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d9f9      	bls.n	800d56c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d578:	4b05      	ldr	r3, [pc, #20]	; (800d590 <prvIdleTask+0x2c>)
 800d57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d588:	e7f0      	b.n	800d56c <prvIdleTask+0x8>
 800d58a:	bf00      	nop
 800d58c:	20002fbc 	.word	0x20002fbc
 800d590:	e000ed04 	.word	0xe000ed04

0800d594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d59a:	2300      	movs	r3, #0
 800d59c:	607b      	str	r3, [r7, #4]
 800d59e:	e00c      	b.n	800d5ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4a12      	ldr	r2, [pc, #72]	; (800d5f4 <prvInitialiseTaskLists+0x60>)
 800d5ac:	4413      	add	r3, r2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fcf0 	bl	800bf94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	607b      	str	r3, [r7, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b37      	cmp	r3, #55	; 0x37
 800d5be:	d9ef      	bls.n	800d5a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5c0:	480d      	ldr	r0, [pc, #52]	; (800d5f8 <prvInitialiseTaskLists+0x64>)
 800d5c2:	f7fe fce7 	bl	800bf94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5c6:	480d      	ldr	r0, [pc, #52]	; (800d5fc <prvInitialiseTaskLists+0x68>)
 800d5c8:	f7fe fce4 	bl	800bf94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5cc:	480c      	ldr	r0, [pc, #48]	; (800d600 <prvInitialiseTaskLists+0x6c>)
 800d5ce:	f7fe fce1 	bl	800bf94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5d2:	480c      	ldr	r0, [pc, #48]	; (800d604 <prvInitialiseTaskLists+0x70>)
 800d5d4:	f7fe fcde 	bl	800bf94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5d8:	480b      	ldr	r0, [pc, #44]	; (800d608 <prvInitialiseTaskLists+0x74>)
 800d5da:	f7fe fcdb 	bl	800bf94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5de:	4b0b      	ldr	r3, [pc, #44]	; (800d60c <prvInitialiseTaskLists+0x78>)
 800d5e0:	4a05      	ldr	r2, [pc, #20]	; (800d5f8 <prvInitialiseTaskLists+0x64>)
 800d5e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5e4:	4b0a      	ldr	r3, [pc, #40]	; (800d610 <prvInitialiseTaskLists+0x7c>)
 800d5e6:	4a05      	ldr	r2, [pc, #20]	; (800d5fc <prvInitialiseTaskLists+0x68>)
 800d5e8:	601a      	str	r2, [r3, #0]
}
 800d5ea:	bf00      	nop
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20002fbc 	.word	0x20002fbc
 800d5f8:	2000341c 	.word	0x2000341c
 800d5fc:	20003430 	.word	0x20003430
 800d600:	2000344c 	.word	0x2000344c
 800d604:	20003460 	.word	0x20003460
 800d608:	20003478 	.word	0x20003478
 800d60c:	20003444 	.word	0x20003444
 800d610:	20003448 	.word	0x20003448

0800d614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d61a:	e019      	b.n	800d650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d61c:	f000 fdd2 	bl	800e1c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d620:	4b10      	ldr	r3, [pc, #64]	; (800d664 <prvCheckTasksWaitingTermination+0x50>)
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3304      	adds	r3, #4
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fd3b 	bl	800c0a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d632:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <prvCheckTasksWaitingTermination+0x54>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3b01      	subs	r3, #1
 800d638:	4a0b      	ldr	r2, [pc, #44]	; (800d668 <prvCheckTasksWaitingTermination+0x54>)
 800d63a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d63c:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <prvCheckTasksWaitingTermination+0x58>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3b01      	subs	r3, #1
 800d642:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <prvCheckTasksWaitingTermination+0x58>)
 800d644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d646:	f000 fded 	bl	800e224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f810 	bl	800d670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d650:	4b06      	ldr	r3, [pc, #24]	; (800d66c <prvCheckTasksWaitingTermination+0x58>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e1      	bne.n	800d61c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d658:	bf00      	nop
 800d65a:	bf00      	nop
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	20003460 	.word	0x20003460
 800d668:	2000348c 	.word	0x2000348c
 800d66c:	20003474 	.word	0x20003474

0800d670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d108      	bne.n	800d694 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d686:	4618      	mov	r0, r3
 800d688:	f000 ff8a 	bl	800e5a0 <vPortFree>
				vPortFree( pxTCB );
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 ff87 	bl	800e5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d692:	e018      	b.n	800d6c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d103      	bne.n	800d6a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 ff7e 	bl	800e5a0 <vPortFree>
	}
 800d6a4:	e00f      	b.n	800d6c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d00a      	beq.n	800d6c6 <prvDeleteTCB+0x56>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	60fb      	str	r3, [r7, #12]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <prvDeleteTCB+0x54>
	}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d104      	bne.n	800d6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e0:	4b0a      	ldr	r3, [pc, #40]	; (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6e8:	e008      	b.n	800d6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b07      	ldr	r3, [pc, #28]	; (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	4a04      	ldr	r2, [pc, #16]	; (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6fa:	6013      	str	r3, [r2, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	20003444 	.word	0x20003444
 800d70c:	200034ac 	.word	0x200034ac

0800d710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d716:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <xTaskGetSchedulerState+0x34>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d71e:	2301      	movs	r3, #1
 800d720:	607b      	str	r3, [r7, #4]
 800d722:	e008      	b.n	800d736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d724:	4b08      	ldr	r3, [pc, #32]	; (800d748 <xTaskGetSchedulerState+0x38>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d72c:	2302      	movs	r3, #2
 800d72e:	607b      	str	r3, [r7, #4]
 800d730:	e001      	b.n	800d736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d732:	2300      	movs	r3, #0
 800d734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d736:	687b      	ldr	r3, [r7, #4]
	}
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	20003498 	.word	0x20003498
 800d748:	200034b4 	.word	0x200034b4

0800d74c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d056      	beq.n	800d810 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d762:	4b2e      	ldr	r3, [pc, #184]	; (800d81c <xTaskPriorityDisinherit+0xd0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d00a      	beq.n	800d782 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	60fb      	str	r3, [r7, #12]
}
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10a      	bne.n	800d7a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	60bb      	str	r3, [r7, #8]
}
 800d79c:	bf00      	nop
 800d79e:	e7fe      	b.n	800d79e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a4:	1e5a      	subs	r2, r3, #1
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d02c      	beq.n	800d810 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d128      	bne.n	800d810 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fe fc70 	bl	800c0a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e0:	4b0f      	ldr	r3, [pc, #60]	; (800d820 <xTaskPriorityDisinherit+0xd4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d903      	bls.n	800d7f0 <xTaskPriorityDisinherit+0xa4>
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ec:	4a0c      	ldr	r2, [pc, #48]	; (800d820 <xTaskPriorityDisinherit+0xd4>)
 800d7ee:	6013      	str	r3, [r2, #0]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	4413      	add	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4a09      	ldr	r2, [pc, #36]	; (800d824 <xTaskPriorityDisinherit+0xd8>)
 800d7fe:	441a      	add	r2, r3
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	3304      	adds	r3, #4
 800d804:	4619      	mov	r1, r3
 800d806:	4610      	mov	r0, r2
 800d808:	f7fe fbf1 	bl	800bfee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d80c:	2301      	movs	r3, #1
 800d80e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d810:	697b      	ldr	r3, [r7, #20]
	}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20002fb8 	.word	0x20002fb8
 800d820:	20003494 	.word	0x20003494
 800d824:	20002fbc 	.word	0x20002fbc

0800d828 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d832:	4b21      	ldr	r3, [pc, #132]	; (800d8b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d838:	4b20      	ldr	r3, [pc, #128]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fc32 	bl	800c0a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d10a      	bne.n	800d862 <prvAddCurrentTaskToDelayedList+0x3a>
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d852:	4b1a      	ldr	r3, [pc, #104]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	3304      	adds	r3, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	4819      	ldr	r0, [pc, #100]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d85c:	f7fe fbc7 	bl	800bfee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d860:	e026      	b.n	800d8b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4413      	add	r3, r2
 800d868:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d86a:	4b14      	ldr	r3, [pc, #80]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	429a      	cmp	r2, r3
 800d878:	d209      	bcs.n	800d88e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87a:	4b12      	ldr	r3, [pc, #72]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	4b0f      	ldr	r3, [pc, #60]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3304      	adds	r3, #4
 800d884:	4619      	mov	r1, r3
 800d886:	4610      	mov	r0, r2
 800d888:	f7fe fbd5 	bl	800c036 <vListInsert>
}
 800d88c:	e010      	b.n	800d8b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d88e:	4b0e      	ldr	r3, [pc, #56]	; (800d8c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	4b0a      	ldr	r3, [pc, #40]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	3304      	adds	r3, #4
 800d898:	4619      	mov	r1, r3
 800d89a:	4610      	mov	r0, r2
 800d89c:	f7fe fbcb 	bl	800c036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8a0:	4b0a      	ldr	r3, [pc, #40]	; (800d8cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d202      	bcs.n	800d8b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8aa:	4a08      	ldr	r2, [pc, #32]	; (800d8cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	6013      	str	r3, [r2, #0]
}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	20003490 	.word	0x20003490
 800d8bc:	20002fb8 	.word	0x20002fb8
 800d8c0:	20003478 	.word	0x20003478
 800d8c4:	20003448 	.word	0x20003448
 800d8c8:	20003444 	.word	0x20003444
 800d8cc:	200034ac 	.word	0x200034ac

0800d8d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08a      	sub	sp, #40	; 0x28
 800d8d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8da:	f000 fb07 	bl	800deec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8de:	4b1c      	ldr	r3, [pc, #112]	; (800d950 <xTimerCreateTimerTask+0x80>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d021      	beq.n	800d92a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8ee:	1d3a      	adds	r2, r7, #4
 800d8f0:	f107 0108 	add.w	r1, r7, #8
 800d8f4:	f107 030c 	add.w	r3, r7, #12
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fe fb31 	bl	800bf60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8fe:	6879      	ldr	r1, [r7, #4]
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	9202      	str	r2, [sp, #8]
 800d906:	9301      	str	r3, [sp, #4]
 800d908:	2302      	movs	r3, #2
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	2300      	movs	r3, #0
 800d90e:	460a      	mov	r2, r1
 800d910:	4910      	ldr	r1, [pc, #64]	; (800d954 <xTimerCreateTimerTask+0x84>)
 800d912:	4811      	ldr	r0, [pc, #68]	; (800d958 <xTimerCreateTimerTask+0x88>)
 800d914:	f7ff f8de 	bl	800cad4 <xTaskCreateStatic>
 800d918:	4603      	mov	r3, r0
 800d91a:	4a10      	ldr	r2, [pc, #64]	; (800d95c <xTimerCreateTimerTask+0x8c>)
 800d91c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d91e:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <xTimerCreateTimerTask+0x8c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d001      	beq.n	800d92a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d926:	2301      	movs	r3, #1
 800d928:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10a      	bne.n	800d946 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	613b      	str	r3, [r7, #16]
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d946:	697b      	ldr	r3, [r7, #20]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3718      	adds	r7, #24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	200034e8 	.word	0x200034e8
 800d954:	0800f1f4 	.word	0x0800f1f4
 800d958:	0800da95 	.word	0x0800da95
 800d95c:	200034ec 	.word	0x200034ec

0800d960 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b08a      	sub	sp, #40	; 0x28
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
 800d96c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d96e:	2300      	movs	r3, #0
 800d970:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	623b      	str	r3, [r7, #32]
}
 800d98a:	bf00      	nop
 800d98c:	e7fe      	b.n	800d98c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d98e:	4b1a      	ldr	r3, [pc, #104]	; (800d9f8 <xTimerGenericCommand+0x98>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d02a      	beq.n	800d9ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b05      	cmp	r3, #5
 800d9a6:	dc18      	bgt.n	800d9da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9a8:	f7ff feb2 	bl	800d710 <xTaskGetSchedulerState>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d109      	bne.n	800d9c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9b2:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <xTimerGenericCommand+0x98>)
 800d9b4:	6818      	ldr	r0, [r3, #0]
 800d9b6:	f107 0110 	add.w	r1, r7, #16
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9be:	f7fe fca1 	bl	800c304 <xQueueGenericSend>
 800d9c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d9c4:	e012      	b.n	800d9ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9c6:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <xTimerGenericCommand+0x98>)
 800d9c8:	6818      	ldr	r0, [r3, #0]
 800d9ca:	f107 0110 	add.w	r1, r7, #16
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f7fe fc97 	bl	800c304 <xQueueGenericSend>
 800d9d6:	6278      	str	r0, [r7, #36]	; 0x24
 800d9d8:	e008      	b.n	800d9ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9da:	4b07      	ldr	r3, [pc, #28]	; (800d9f8 <xTimerGenericCommand+0x98>)
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f107 0110 	add.w	r1, r7, #16
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	f7fe fd8b 	bl	800c500 <xQueueGenericSendFromISR>
 800d9ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3728      	adds	r7, #40	; 0x28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200034e8 	.word	0x200034e8

0800d9fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b088      	sub	sp, #32
 800da00:	af02      	add	r7, sp, #8
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da06:	4b22      	ldr	r3, [pc, #136]	; (800da90 <prvProcessExpiredTimer+0x94>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	3304      	adds	r3, #4
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe fb47 	bl	800c0a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da20:	f003 0304 	and.w	r3, r3, #4
 800da24:	2b00      	cmp	r3, #0
 800da26:	d022      	beq.n	800da6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	699a      	ldr	r2, [r3, #24]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	18d1      	adds	r1, r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	6978      	ldr	r0, [r7, #20]
 800da36:	f000 f8d1 	bl	800dbdc <prvInsertTimerInActiveList>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d01f      	beq.n	800da80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da40:	2300      	movs	r3, #0
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	2300      	movs	r3, #0
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	2100      	movs	r1, #0
 800da4a:	6978      	ldr	r0, [r7, #20]
 800da4c:	f7ff ff88 	bl	800d960 <xTimerGenericCommand>
 800da50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d113      	bne.n	800da80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5c:	f383 8811 	msr	BASEPRI, r3
 800da60:	f3bf 8f6f 	isb	sy
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	60fb      	str	r3, [r7, #12]
}
 800da6a:	bf00      	nop
 800da6c:	e7fe      	b.n	800da6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da74:	f023 0301 	bic.w	r3, r3, #1
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	6a1b      	ldr	r3, [r3, #32]
 800da84:	6978      	ldr	r0, [r7, #20]
 800da86:	4798      	blx	r3
}
 800da88:	bf00      	nop
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	200034e0 	.word	0x200034e0

0800da94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da9c:	f107 0308 	add.w	r3, r7, #8
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 f857 	bl	800db54 <prvGetNextExpireTime>
 800daa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	4619      	mov	r1, r3
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f000 f803 	bl	800dab8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dab2:	f000 f8d5 	bl	800dc60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dab6:	e7f1      	b.n	800da9c <prvTimerTask+0x8>

0800dab8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dac2:	f7ff fa43 	bl	800cf4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dac6:	f107 0308 	add.w	r3, r7, #8
 800daca:	4618      	mov	r0, r3
 800dacc:	f000 f866 	bl	800db9c <prvSampleTimeNow>
 800dad0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d130      	bne.n	800db3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10a      	bne.n	800daf4 <prvProcessTimerOrBlockTask+0x3c>
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d806      	bhi.n	800daf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dae6:	f7ff fa3f 	bl	800cf68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800daea:	68f9      	ldr	r1, [r7, #12]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff ff85 	bl	800d9fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800daf2:	e024      	b.n	800db3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d008      	beq.n	800db0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dafa:	4b13      	ldr	r3, [pc, #76]	; (800db48 <prvProcessTimerOrBlockTask+0x90>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <prvProcessTimerOrBlockTask+0x50>
 800db04:	2301      	movs	r3, #1
 800db06:	e000      	b.n	800db0a <prvProcessTimerOrBlockTask+0x52>
 800db08:	2300      	movs	r3, #0
 800db0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db0c:	4b0f      	ldr	r3, [pc, #60]	; (800db4c <prvProcessTimerOrBlockTask+0x94>)
 800db0e:	6818      	ldr	r0, [r3, #0]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	4619      	mov	r1, r3
 800db1a:	f7fe ffa7 	bl	800ca6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db1e:	f7ff fa23 	bl	800cf68 <xTaskResumeAll>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db28:	4b09      	ldr	r3, [pc, #36]	; (800db50 <prvProcessTimerOrBlockTask+0x98>)
 800db2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db2e:	601a      	str	r2, [r3, #0]
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	f3bf 8f6f 	isb	sy
}
 800db38:	e001      	b.n	800db3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db3a:	f7ff fa15 	bl	800cf68 <xTaskResumeAll>
}
 800db3e:	bf00      	nop
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	200034e4 	.word	0x200034e4
 800db4c:	200034e8 	.word	0x200034e8
 800db50:	e000ed04 	.word	0xe000ed04

0800db54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db5c:	4b0e      	ldr	r3, [pc, #56]	; (800db98 <prvGetNextExpireTime+0x44>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <prvGetNextExpireTime+0x16>
 800db66:	2201      	movs	r2, #1
 800db68:	e000      	b.n	800db6c <prvGetNextExpireTime+0x18>
 800db6a:	2200      	movs	r2, #0
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d105      	bne.n	800db84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db78:	4b07      	ldr	r3, [pc, #28]	; (800db98 <prvGetNextExpireTime+0x44>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	60fb      	str	r3, [r7, #12]
 800db82:	e001      	b.n	800db88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db84:	2300      	movs	r3, #0
 800db86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db88:	68fb      	ldr	r3, [r7, #12]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	200034e0 	.word	0x200034e0

0800db9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dba4:	f7ff fa7e 	bl	800d0a4 <xTaskGetTickCount>
 800dba8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dbaa:	4b0b      	ldr	r3, [pc, #44]	; (800dbd8 <prvSampleTimeNow+0x3c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d205      	bcs.n	800dbc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dbb4:	f000 f936 	bl	800de24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	e002      	b.n	800dbc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbc6:	4a04      	ldr	r2, [pc, #16]	; (800dbd8 <prvSampleTimeNow+0x3c>)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	200034f0 	.word	0x200034f0

0800dbdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
 800dbe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d812      	bhi.n	800dc28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	1ad2      	subs	r2, r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	699b      	ldr	r3, [r3, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d302      	bcc.n	800dc16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc10:	2301      	movs	r3, #1
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	e01b      	b.n	800dc4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc16:	4b10      	ldr	r3, [pc, #64]	; (800dc58 <prvInsertTimerInActiveList+0x7c>)
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	4619      	mov	r1, r3
 800dc20:	4610      	mov	r0, r2
 800dc22:	f7fe fa08 	bl	800c036 <vListInsert>
 800dc26:	e012      	b.n	800dc4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d206      	bcs.n	800dc3e <prvInsertTimerInActiveList+0x62>
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d302      	bcc.n	800dc3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	e007      	b.n	800dc4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc3e:	4b07      	ldr	r3, [pc, #28]	; (800dc5c <prvInsertTimerInActiveList+0x80>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3304      	adds	r3, #4
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	f7fe f9f4 	bl	800c036 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc4e:	697b      	ldr	r3, [r7, #20]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	200034e4 	.word	0x200034e4
 800dc5c:	200034e0 	.word	0x200034e0

0800dc60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b08e      	sub	sp, #56	; 0x38
 800dc64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc66:	e0ca      	b.n	800ddfe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	da18      	bge.n	800dca0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc6e:	1d3b      	adds	r3, r7, #4
 800dc70:	3304      	adds	r3, #4
 800dc72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10a      	bne.n	800dc90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7e:	f383 8811 	msr	BASEPRI, r3
 800dc82:	f3bf 8f6f 	isb	sy
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	61fb      	str	r3, [r7, #28]
}
 800dc8c:	bf00      	nop
 800dc8e:	e7fe      	b.n	800dc8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc96:	6850      	ldr	r0, [r2, #4]
 800dc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9a:	6892      	ldr	r2, [r2, #8]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f2c0 80aa 	blt.w	800ddfc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d004      	beq.n	800dcbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe f9f5 	bl	800c0a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcbe:	463b      	mov	r3, r7
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff ff6b 	bl	800db9c <prvSampleTimeNow>
 800dcc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b09      	cmp	r3, #9
 800dccc:	f200 8097 	bhi.w	800ddfe <prvProcessReceivedCommands+0x19e>
 800dcd0:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <prvProcessReceivedCommands+0x78>)
 800dcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd6:	bf00      	nop
 800dcd8:	0800dd01 	.word	0x0800dd01
 800dcdc:	0800dd01 	.word	0x0800dd01
 800dce0:	0800dd01 	.word	0x0800dd01
 800dce4:	0800dd75 	.word	0x0800dd75
 800dce8:	0800dd89 	.word	0x0800dd89
 800dcec:	0800ddd3 	.word	0x0800ddd3
 800dcf0:	0800dd01 	.word	0x0800dd01
 800dcf4:	0800dd01 	.word	0x0800dd01
 800dcf8:	0800dd75 	.word	0x0800dd75
 800dcfc:	0800dd89 	.word	0x0800dd89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd06:	f043 0301 	orr.w	r3, r3, #1
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	18d1      	adds	r1, r2, r3
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd20:	f7ff ff5c 	bl	800dbdc <prvInsertTimerInActiveList>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d069      	beq.n	800ddfe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d05e      	beq.n	800ddfe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd40:	68ba      	ldr	r2, [r7, #8]
 800dd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	441a      	add	r2, r3
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	2100      	movs	r1, #0
 800dd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd52:	f7ff fe05 	bl	800d960 <xTimerGenericCommand>
 800dd56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d14f      	bne.n	800ddfe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	61bb      	str	r3, [r7, #24]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd7a:	f023 0301 	bic.w	r3, r3, #1
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd86:	e03a      	b.n	800ddfe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd8e:	f043 0301 	orr.w	r3, r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10a      	bne.n	800ddbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	617b      	str	r3, [r7, #20]
}
 800ddba:	bf00      	nop
 800ddbc:	e7fe      	b.n	800ddbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	699a      	ldr	r2, [r3, #24]
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc4:	18d1      	adds	r1, r2, r3
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddcc:	f7ff ff06 	bl	800dbdc <prvInsertTimerInActiveList>
					break;
 800ddd0:	e015      	b.n	800ddfe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddd8:	f003 0302 	and.w	r3, r3, #2
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d103      	bne.n	800dde8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dde2:	f000 fbdd 	bl	800e5a0 <vPortFree>
 800dde6:	e00a      	b.n	800ddfe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddee:	f023 0301 	bic.w	r3, r3, #1
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddfa:	e000      	b.n	800ddfe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ddfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddfe:	4b08      	ldr	r3, [pc, #32]	; (800de20 <prvProcessReceivedCommands+0x1c0>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	1d39      	adds	r1, r7, #4
 800de04:	2200      	movs	r2, #0
 800de06:	4618      	mov	r0, r3
 800de08:	f7fe fc16 	bl	800c638 <xQueueReceive>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f47f af2a 	bne.w	800dc68 <prvProcessReceivedCommands+0x8>
	}
}
 800de14:	bf00      	nop
 800de16:	bf00      	nop
 800de18:	3730      	adds	r7, #48	; 0x30
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	200034e8 	.word	0x200034e8

0800de24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de2a:	e048      	b.n	800debe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de2c:	4b2d      	ldr	r3, [pc, #180]	; (800dee4 <prvSwitchTimerLists+0xc0>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de36:	4b2b      	ldr	r3, [pc, #172]	; (800dee4 <prvSwitchTimerLists+0xc0>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	3304      	adds	r3, #4
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe f92f 	bl	800c0a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6a1b      	ldr	r3, [r3, #32]
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de58:	f003 0304 	and.w	r3, r3, #4
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d02e      	beq.n	800debe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	693a      	ldr	r2, [r7, #16]
 800de66:	4413      	add	r3, r2
 800de68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d90e      	bls.n	800de90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de7e:	4b19      	ldr	r3, [pc, #100]	; (800dee4 <prvSwitchTimerLists+0xc0>)
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3304      	adds	r3, #4
 800de86:	4619      	mov	r1, r3
 800de88:	4610      	mov	r0, r2
 800de8a:	f7fe f8d4 	bl	800c036 <vListInsert>
 800de8e:	e016      	b.n	800debe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de90:	2300      	movs	r3, #0
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	2300      	movs	r3, #0
 800de96:	693a      	ldr	r2, [r7, #16]
 800de98:	2100      	movs	r1, #0
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f7ff fd60 	bl	800d960 <xTimerGenericCommand>
 800dea0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d10a      	bne.n	800debe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deac:	f383 8811 	msr	BASEPRI, r3
 800deb0:	f3bf 8f6f 	isb	sy
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	603b      	str	r3, [r7, #0]
}
 800deba:	bf00      	nop
 800debc:	e7fe      	b.n	800debc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800debe:	4b09      	ldr	r3, [pc, #36]	; (800dee4 <prvSwitchTimerLists+0xc0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1b1      	bne.n	800de2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dec8:	4b06      	ldr	r3, [pc, #24]	; (800dee4 <prvSwitchTimerLists+0xc0>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dece:	4b06      	ldr	r3, [pc, #24]	; (800dee8 <prvSwitchTimerLists+0xc4>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4a04      	ldr	r2, [pc, #16]	; (800dee4 <prvSwitchTimerLists+0xc0>)
 800ded4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ded6:	4a04      	ldr	r2, [pc, #16]	; (800dee8 <prvSwitchTimerLists+0xc4>)
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	6013      	str	r3, [r2, #0]
}
 800dedc:	bf00      	nop
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	200034e0 	.word	0x200034e0
 800dee8:	200034e4 	.word	0x200034e4

0800deec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800def2:	f000 f967 	bl	800e1c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800def6:	4b15      	ldr	r3, [pc, #84]	; (800df4c <prvCheckForValidListAndQueue+0x60>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d120      	bne.n	800df40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800defe:	4814      	ldr	r0, [pc, #80]	; (800df50 <prvCheckForValidListAndQueue+0x64>)
 800df00:	f7fe f848 	bl	800bf94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df04:	4813      	ldr	r0, [pc, #76]	; (800df54 <prvCheckForValidListAndQueue+0x68>)
 800df06:	f7fe f845 	bl	800bf94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df0a:	4b13      	ldr	r3, [pc, #76]	; (800df58 <prvCheckForValidListAndQueue+0x6c>)
 800df0c:	4a10      	ldr	r2, [pc, #64]	; (800df50 <prvCheckForValidListAndQueue+0x64>)
 800df0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df10:	4b12      	ldr	r3, [pc, #72]	; (800df5c <prvCheckForValidListAndQueue+0x70>)
 800df12:	4a10      	ldr	r2, [pc, #64]	; (800df54 <prvCheckForValidListAndQueue+0x68>)
 800df14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df16:	2300      	movs	r3, #0
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	4b11      	ldr	r3, [pc, #68]	; (800df60 <prvCheckForValidListAndQueue+0x74>)
 800df1c:	4a11      	ldr	r2, [pc, #68]	; (800df64 <prvCheckForValidListAndQueue+0x78>)
 800df1e:	2110      	movs	r1, #16
 800df20:	200a      	movs	r0, #10
 800df22:	f7fe f953 	bl	800c1cc <xQueueGenericCreateStatic>
 800df26:	4603      	mov	r3, r0
 800df28:	4a08      	ldr	r2, [pc, #32]	; (800df4c <prvCheckForValidListAndQueue+0x60>)
 800df2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df2c:	4b07      	ldr	r3, [pc, #28]	; (800df4c <prvCheckForValidListAndQueue+0x60>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d005      	beq.n	800df40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df34:	4b05      	ldr	r3, [pc, #20]	; (800df4c <prvCheckForValidListAndQueue+0x60>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	490b      	ldr	r1, [pc, #44]	; (800df68 <prvCheckForValidListAndQueue+0x7c>)
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe fd6c 	bl	800ca18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df40:	f000 f970 	bl	800e224 <vPortExitCritical>
}
 800df44:	bf00      	nop
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	200034e8 	.word	0x200034e8
 800df50:	200034b8 	.word	0x200034b8
 800df54:	200034cc 	.word	0x200034cc
 800df58:	200034e0 	.word	0x200034e0
 800df5c:	200034e4 	.word	0x200034e4
 800df60:	20003594 	.word	0x20003594
 800df64:	200034f4 	.word	0x200034f4
 800df68:	0800f1fc 	.word	0x0800f1fc

0800df6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3b04      	subs	r3, #4
 800df7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	3b04      	subs	r3, #4
 800df8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	f023 0201 	bic.w	r2, r3, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	3b04      	subs	r3, #4
 800df9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df9c:	4a0c      	ldr	r2, [pc, #48]	; (800dfd0 <pxPortInitialiseStack+0x64>)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	3b14      	subs	r3, #20
 800dfa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3b04      	subs	r3, #4
 800dfb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f06f 0202 	mvn.w	r2, #2
 800dfba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3b20      	subs	r3, #32
 800dfc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3714      	adds	r7, #20
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr
 800dfd0:	0800dfd5 	.word	0x0800dfd5

0800dfd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfde:	4b12      	ldr	r3, [pc, #72]	; (800e028 <prvTaskExitError+0x54>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe6:	d00a      	beq.n	800dffe <prvTaskExitError+0x2a>
	__asm volatile
 800dfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	60fb      	str	r3, [r7, #12]
}
 800dffa:	bf00      	nop
 800dffc:	e7fe      	b.n	800dffc <prvTaskExitError+0x28>
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	60bb      	str	r3, [r7, #8]
}
 800e010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e012:	bf00      	nop
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0fc      	beq.n	800e014 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	2000035c 	.word	0x2000035c
 800e02c:	00000000 	.word	0x00000000

0800e030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e030:	4b07      	ldr	r3, [pc, #28]	; (800e050 <pxCurrentTCBConst2>)
 800e032:	6819      	ldr	r1, [r3, #0]
 800e034:	6808      	ldr	r0, [r1, #0]
 800e036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f380 8809 	msr	PSP, r0
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f380 8811 	msr	BASEPRI, r0
 800e04a:	4770      	bx	lr
 800e04c:	f3af 8000 	nop.w

0800e050 <pxCurrentTCBConst2>:
 800e050:	20002fb8 	.word	0x20002fb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e058:	4808      	ldr	r0, [pc, #32]	; (800e07c <prvPortStartFirstTask+0x24>)
 800e05a:	6800      	ldr	r0, [r0, #0]
 800e05c:	6800      	ldr	r0, [r0, #0]
 800e05e:	f380 8808 	msr	MSP, r0
 800e062:	f04f 0000 	mov.w	r0, #0
 800e066:	f380 8814 	msr	CONTROL, r0
 800e06a:	b662      	cpsie	i
 800e06c:	b661      	cpsie	f
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	f3bf 8f6f 	isb	sy
 800e076:	df00      	svc	0
 800e078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e07a:	bf00      	nop
 800e07c:	e000ed08 	.word	0xe000ed08

0800e080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e086:	4b46      	ldr	r3, [pc, #280]	; (800e1a0 <xPortStartScheduler+0x120>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a46      	ldr	r2, [pc, #280]	; (800e1a4 <xPortStartScheduler+0x124>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d10a      	bne.n	800e0a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	613b      	str	r3, [r7, #16]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0a6:	4b3e      	ldr	r3, [pc, #248]	; (800e1a0 <xPortStartScheduler+0x120>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a3f      	ldr	r2, [pc, #252]	; (800e1a8 <xPortStartScheduler+0x128>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d10a      	bne.n	800e0c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	60fb      	str	r3, [r7, #12]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0c6:	4b39      	ldr	r3, [pc, #228]	; (800e1ac <xPortStartScheduler+0x12c>)
 800e0c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	22ff      	movs	r2, #255	; 0xff
 800e0d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	4b31      	ldr	r3, [pc, #196]	; (800e1b0 <xPortStartScheduler+0x130>)
 800e0ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0ee:	4b31      	ldr	r3, [pc, #196]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0f0:	2207      	movs	r2, #7
 800e0f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0f4:	e009      	b.n	800e10a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0f6:	4b2f      	ldr	r3, [pc, #188]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	4a2d      	ldr	r2, [pc, #180]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e10a:	78fb      	ldrb	r3, [r7, #3]
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e112:	2b80      	cmp	r3, #128	; 0x80
 800e114:	d0ef      	beq.n	800e0f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e116:	4b27      	ldr	r3, [pc, #156]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f1c3 0307 	rsb	r3, r3, #7
 800e11e:	2b04      	cmp	r3, #4
 800e120:	d00a      	beq.n	800e138 <xPortStartScheduler+0xb8>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60bb      	str	r3, [r7, #8]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e138:	4b1e      	ldr	r3, [pc, #120]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	4a1d      	ldr	r2, [pc, #116]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e142:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e14a:	4a1a      	ldr	r2, [pc, #104]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e14c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	b2da      	uxtb	r2, r3
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e156:	4b18      	ldr	r3, [pc, #96]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e15c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a14      	ldr	r2, [pc, #80]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e16c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e16e:	f000 f8dd 	bl	800e32c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e172:	4b12      	ldr	r3, [pc, #72]	; (800e1bc <xPortStartScheduler+0x13c>)
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e178:	f000 f8fc 	bl	800e374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e17c:	4b10      	ldr	r3, [pc, #64]	; (800e1c0 <xPortStartScheduler+0x140>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a0f      	ldr	r2, [pc, #60]	; (800e1c0 <xPortStartScheduler+0x140>)
 800e182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e188:	f7ff ff66 	bl	800e058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e18c:	f7ff f854 	bl	800d238 <vTaskSwitchContext>
	prvTaskExitError();
 800e190:	f7ff ff20 	bl	800dfd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	e000ed00 	.word	0xe000ed00
 800e1a4:	410fc271 	.word	0x410fc271
 800e1a8:	410fc270 	.word	0x410fc270
 800e1ac:	e000e400 	.word	0xe000e400
 800e1b0:	200035e4 	.word	0x200035e4
 800e1b4:	200035e8 	.word	0x200035e8
 800e1b8:	e000ed20 	.word	0xe000ed20
 800e1bc:	2000035c 	.word	0x2000035c
 800e1c0:	e000ef34 	.word	0xe000ef34

0800e1c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	607b      	str	r3, [r7, #4]
}
 800e1dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1de:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <vPortEnterCritical+0x58>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	4a0d      	ldr	r2, [pc, #52]	; (800e21c <vPortEnterCritical+0x58>)
 800e1e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1e8:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <vPortEnterCritical+0x58>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d10f      	bne.n	800e210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1f0:	4b0b      	ldr	r3, [pc, #44]	; (800e220 <vPortEnterCritical+0x5c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	603b      	str	r3, [r7, #0]
}
 800e20c:	bf00      	nop
 800e20e:	e7fe      	b.n	800e20e <vPortEnterCritical+0x4a>
	}
}
 800e210:	bf00      	nop
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	2000035c 	.word	0x2000035c
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e22a:	4b12      	ldr	r3, [pc, #72]	; (800e274 <vPortExitCritical+0x50>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10a      	bne.n	800e248 <vPortExitCritical+0x24>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	607b      	str	r3, [r7, #4]
}
 800e244:	bf00      	nop
 800e246:	e7fe      	b.n	800e246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <vPortExitCritical+0x50>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	4a09      	ldr	r2, [pc, #36]	; (800e274 <vPortExitCritical+0x50>)
 800e250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e252:	4b08      	ldr	r3, [pc, #32]	; (800e274 <vPortExitCritical+0x50>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d105      	bne.n	800e266 <vPortExitCritical+0x42>
 800e25a:	2300      	movs	r3, #0
 800e25c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f383 8811 	msr	BASEPRI, r3
}
 800e264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	2000035c 	.word	0x2000035c
	...

0800e280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e280:	f3ef 8009 	mrs	r0, PSP
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <pxCurrentTCBConst>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	f01e 0f10 	tst.w	lr, #16
 800e290:	bf08      	it	eq
 800e292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	6010      	str	r0, [r2, #0]
 800e29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2a4:	f380 8811 	msr	BASEPRI, r0
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f7fe ffc2 	bl	800d238 <vTaskSwitchContext>
 800e2b4:	f04f 0000 	mov.w	r0, #0
 800e2b8:	f380 8811 	msr	BASEPRI, r0
 800e2bc:	bc09      	pop	{r0, r3}
 800e2be:	6819      	ldr	r1, [r3, #0]
 800e2c0:	6808      	ldr	r0, [r1, #0]
 800e2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c6:	f01e 0f10 	tst.w	lr, #16
 800e2ca:	bf08      	it	eq
 800e2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2d0:	f380 8809 	msr	PSP, r0
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	f3af 8000 	nop.w

0800e2e0 <pxCurrentTCBConst>:
 800e2e0:	20002fb8 	.word	0x20002fb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop

0800e2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	607b      	str	r3, [r7, #4]
}
 800e300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e302:	f7fe fedf 	bl	800d0c4 <xTaskIncrementTick>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d003      	beq.n	800e314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e30c:	4b06      	ldr	r3, [pc, #24]	; (800e328 <xPortSysTickHandler+0x40>)
 800e30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	2300      	movs	r3, #0
 800e316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f383 8811 	msr	BASEPRI, r3
}
 800e31e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	e000ed04 	.word	0xe000ed04

0800e32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortSetupTimerInterrupt+0x34>)
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <vPortSetupTimerInterrupt+0x38>)
 800e338:	2200      	movs	r2, #0
 800e33a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <vPortSetupTimerInterrupt+0x3c>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a0a      	ldr	r2, [pc, #40]	; (800e36c <vPortSetupTimerInterrupt+0x40>)
 800e342:	fba2 2303 	umull	r2, r3, r2, r3
 800e346:	099b      	lsrs	r3, r3, #6
 800e348:	4a09      	ldr	r2, [pc, #36]	; (800e370 <vPortSetupTimerInterrupt+0x44>)
 800e34a:	3b01      	subs	r3, #1
 800e34c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e34e:	4b04      	ldr	r3, [pc, #16]	; (800e360 <vPortSetupTimerInterrupt+0x34>)
 800e350:	2207      	movs	r2, #7
 800e352:	601a      	str	r2, [r3, #0]
}
 800e354:	bf00      	nop
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	e000e010 	.word	0xe000e010
 800e364:	e000e018 	.word	0xe000e018
 800e368:	200000b8 	.word	0x200000b8
 800e36c:	10624dd3 	.word	0x10624dd3
 800e370:	e000e014 	.word	0xe000e014

0800e374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e384 <vPortEnableVFP+0x10>
 800e378:	6801      	ldr	r1, [r0, #0]
 800e37a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e37e:	6001      	str	r1, [r0, #0]
 800e380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e382:	bf00      	nop
 800e384:	e000ed88 	.word	0xe000ed88

0800e388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e38e:	f3ef 8305 	mrs	r3, IPSR
 800e392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b0f      	cmp	r3, #15
 800e398:	d914      	bls.n	800e3c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e39a:	4a17      	ldr	r2, [pc, #92]	; (800e3f8 <vPortValidateInterruptPriority+0x70>)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3a4:	4b15      	ldr	r3, [pc, #84]	; (800e3fc <vPortValidateInterruptPriority+0x74>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	7afa      	ldrb	r2, [r7, #11]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d20a      	bcs.n	800e3c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	607b      	str	r3, [r7, #4]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3c4:	4b0e      	ldr	r3, [pc, #56]	; (800e400 <vPortValidateInterruptPriority+0x78>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3cc:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <vPortValidateInterruptPriority+0x7c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d90a      	bls.n	800e3ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	603b      	str	r3, [r7, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <vPortValidateInterruptPriority+0x60>
	}
 800e3ea:	bf00      	nop
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	e000e3f0 	.word	0xe000e3f0
 800e3fc:	200035e4 	.word	0x200035e4
 800e400:	e000ed0c 	.word	0xe000ed0c
 800e404:	200035e8 	.word	0x200035e8

0800e408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e414:	f7fe fd9a 	bl	800cf4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e418:	4b5b      	ldr	r3, [pc, #364]	; (800e588 <pvPortMalloc+0x180>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e420:	f000 f920 	bl	800e664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e424:	4b59      	ldr	r3, [pc, #356]	; (800e58c <pvPortMalloc+0x184>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4013      	ands	r3, r2
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f040 8093 	bne.w	800e558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01d      	beq.n	800e474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e438:	2208      	movs	r2, #8
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4413      	add	r3, r2
 800e43e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	2b00      	cmp	r3, #0
 800e448:	d014      	beq.n	800e474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f023 0307 	bic.w	r3, r3, #7
 800e450:	3308      	adds	r3, #8
 800e452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f003 0307 	and.w	r3, r3, #7
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <pvPortMalloc+0x6c>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	617b      	str	r3, [r7, #20]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d06e      	beq.n	800e558 <pvPortMalloc+0x150>
 800e47a:	4b45      	ldr	r3, [pc, #276]	; (800e590 <pvPortMalloc+0x188>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d869      	bhi.n	800e558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e484:	4b43      	ldr	r3, [pc, #268]	; (800e594 <pvPortMalloc+0x18c>)
 800e486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e488:	4b42      	ldr	r3, [pc, #264]	; (800e594 <pvPortMalloc+0x18c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e48e:	e004      	b.n	800e49a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d903      	bls.n	800e4ac <pvPortMalloc+0xa4>
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1f1      	bne.n	800e490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4ac:	4b36      	ldr	r3, [pc, #216]	; (800e588 <pvPortMalloc+0x180>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d050      	beq.n	800e558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2208      	movs	r2, #8
 800e4bc:	4413      	add	r3, r2
 800e4be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	2308      	movs	r3, #8
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d91f      	bls.n	800e518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4413      	add	r3, r2
 800e4de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	f003 0307 	and.w	r3, r3, #7
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00a      	beq.n	800e500 <pvPortMalloc+0xf8>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	613b      	str	r3, [r7, #16]
}
 800e4fc:	bf00      	nop
 800e4fe:	e7fe      	b.n	800e4fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	1ad2      	subs	r2, r2, r3
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e512:	69b8      	ldr	r0, [r7, #24]
 800e514:	f000 f908 	bl	800e728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e518:	4b1d      	ldr	r3, [pc, #116]	; (800e590 <pvPortMalloc+0x188>)
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	4a1b      	ldr	r2, [pc, #108]	; (800e590 <pvPortMalloc+0x188>)
 800e524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e526:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <pvPortMalloc+0x188>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	4b1b      	ldr	r3, [pc, #108]	; (800e598 <pvPortMalloc+0x190>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d203      	bcs.n	800e53a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <pvPortMalloc+0x188>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a18      	ldr	r2, [pc, #96]	; (800e598 <pvPortMalloc+0x190>)
 800e538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <pvPortMalloc+0x184>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	431a      	orrs	r2, r3
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e54e:	4b13      	ldr	r3, [pc, #76]	; (800e59c <pvPortMalloc+0x194>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	4a11      	ldr	r2, [pc, #68]	; (800e59c <pvPortMalloc+0x194>)
 800e556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e558:	f7fe fd06 	bl	800cf68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	f003 0307 	and.w	r3, r3, #7
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00a      	beq.n	800e57c <pvPortMalloc+0x174>
	__asm volatile
 800e566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	60fb      	str	r3, [r7, #12]
}
 800e578:	bf00      	nop
 800e57a:	e7fe      	b.n	800e57a <pvPortMalloc+0x172>
	return pvReturn;
 800e57c:	69fb      	ldr	r3, [r7, #28]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3728      	adds	r7, #40	; 0x28
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	200071f4 	.word	0x200071f4
 800e58c:	20007208 	.word	0x20007208
 800e590:	200071f8 	.word	0x200071f8
 800e594:	200071ec 	.word	0x200071ec
 800e598:	200071fc 	.word	0x200071fc
 800e59c:	20007200 	.word	0x20007200

0800e5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d04d      	beq.n	800e64e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5b2:	2308      	movs	r3, #8
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	4b24      	ldr	r3, [pc, #144]	; (800e658 <vPortFree+0xb8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <vPortFree+0x44>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	60fb      	str	r3, [r7, #12]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00a      	beq.n	800e602 <vPortFree+0x62>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	60bb      	str	r3, [r7, #8]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	4b14      	ldr	r3, [pc, #80]	; (800e658 <vPortFree+0xb8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4013      	ands	r3, r2
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01e      	beq.n	800e64e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11a      	bne.n	800e64e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	4b0e      	ldr	r3, [pc, #56]	; (800e658 <vPortFree+0xb8>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	43db      	mvns	r3, r3
 800e622:	401a      	ands	r2, r3
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e628:	f7fe fc90 	bl	800cf4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <vPortFree+0xbc>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4413      	add	r3, r2
 800e636:	4a09      	ldr	r2, [pc, #36]	; (800e65c <vPortFree+0xbc>)
 800e638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e63a:	6938      	ldr	r0, [r7, #16]
 800e63c:	f000 f874 	bl	800e728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e640:	4b07      	ldr	r3, [pc, #28]	; (800e660 <vPortFree+0xc0>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	4a06      	ldr	r2, [pc, #24]	; (800e660 <vPortFree+0xc0>)
 800e648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e64a:	f7fe fc8d 	bl	800cf68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e64e:	bf00      	nop
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20007208 	.word	0x20007208
 800e65c:	200071f8 	.word	0x200071f8
 800e660:	20007204 	.word	0x20007204

0800e664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e66a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e66e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e670:	4b27      	ldr	r3, [pc, #156]	; (800e710 <prvHeapInit+0xac>)
 800e672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f003 0307 	and.w	r3, r3, #7
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00c      	beq.n	800e698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3307      	adds	r3, #7
 800e682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f023 0307 	bic.w	r3, r3, #7
 800e68a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	4a1f      	ldr	r2, [pc, #124]	; (800e710 <prvHeapInit+0xac>)
 800e694:	4413      	add	r3, r2
 800e696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e69c:	4a1d      	ldr	r2, [pc, #116]	; (800e714 <prvHeapInit+0xb0>)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6a2:	4b1c      	ldr	r3, [pc, #112]	; (800e714 <prvHeapInit+0xb0>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	1a9b      	subs	r3, r3, r2
 800e6b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f023 0307 	bic.w	r3, r3, #7
 800e6be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	4a15      	ldr	r2, [pc, #84]	; (800e718 <prvHeapInit+0xb4>)
 800e6c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6c6:	4b14      	ldr	r3, [pc, #80]	; (800e718 <prvHeapInit+0xb4>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6ce:	4b12      	ldr	r3, [pc, #72]	; (800e718 <prvHeapInit+0xb4>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	1ad2      	subs	r2, r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6e4:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <prvHeapInit+0xb4>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <prvHeapInit+0xb8>)
 800e6f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	4a09      	ldr	r2, [pc, #36]	; (800e720 <prvHeapInit+0xbc>)
 800e6fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <prvHeapInit+0xc0>)
 800e6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e702:	601a      	str	r2, [r3, #0]
}
 800e704:	bf00      	nop
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	200035ec 	.word	0x200035ec
 800e714:	200071ec 	.word	0x200071ec
 800e718:	200071f4 	.word	0x200071f4
 800e71c:	200071fc 	.word	0x200071fc
 800e720:	200071f8 	.word	0x200071f8
 800e724:	20007208 	.word	0x20007208

0800e728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e730:	4b28      	ldr	r3, [pc, #160]	; (800e7d4 <prvInsertBlockIntoFreeList+0xac>)
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e002      	b.n	800e73c <prvInsertBlockIntoFreeList+0x14>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d8f7      	bhi.n	800e736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	4413      	add	r3, r2
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	429a      	cmp	r2, r3
 800e756:	d108      	bne.n	800e76a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	441a      	add	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	441a      	add	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d118      	bne.n	800e7b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d00d      	beq.n	800e7a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	441a      	add	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	e008      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7a6:	4b0c      	ldr	r3, [pc, #48]	; (800e7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	e003      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d002      	beq.n	800e7c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	200071ec 	.word	0x200071ec
 800e7d8:	200071f4 	.word	0x200071f4

0800e7dc <__errno>:
 800e7dc:	4b01      	ldr	r3, [pc, #4]	; (800e7e4 <__errno+0x8>)
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20000360 	.word	0x20000360

0800e7e8 <__libc_init_array>:
 800e7e8:	b570      	push	{r4, r5, r6, lr}
 800e7ea:	4d0d      	ldr	r5, [pc, #52]	; (800e820 <__libc_init_array+0x38>)
 800e7ec:	4c0d      	ldr	r4, [pc, #52]	; (800e824 <__libc_init_array+0x3c>)
 800e7ee:	1b64      	subs	r4, r4, r5
 800e7f0:	10a4      	asrs	r4, r4, #2
 800e7f2:	2600      	movs	r6, #0
 800e7f4:	42a6      	cmp	r6, r4
 800e7f6:	d109      	bne.n	800e80c <__libc_init_array+0x24>
 800e7f8:	4d0b      	ldr	r5, [pc, #44]	; (800e828 <__libc_init_array+0x40>)
 800e7fa:	4c0c      	ldr	r4, [pc, #48]	; (800e82c <__libc_init_array+0x44>)
 800e7fc:	f000 fca2 	bl	800f144 <_init>
 800e800:	1b64      	subs	r4, r4, r5
 800e802:	10a4      	asrs	r4, r4, #2
 800e804:	2600      	movs	r6, #0
 800e806:	42a6      	cmp	r6, r4
 800e808:	d105      	bne.n	800e816 <__libc_init_array+0x2e>
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e810:	4798      	blx	r3
 800e812:	3601      	adds	r6, #1
 800e814:	e7ee      	b.n	800e7f4 <__libc_init_array+0xc>
 800e816:	f855 3b04 	ldr.w	r3, [r5], #4
 800e81a:	4798      	blx	r3
 800e81c:	3601      	adds	r6, #1
 800e81e:	e7f2      	b.n	800e806 <__libc_init_array+0x1e>
 800e820:	0800f2f0 	.word	0x0800f2f0
 800e824:	0800f2f0 	.word	0x0800f2f0
 800e828:	0800f2f0 	.word	0x0800f2f0
 800e82c:	0800f2f4 	.word	0x0800f2f4

0800e830 <memcpy>:
 800e830:	440a      	add	r2, r1
 800e832:	4291      	cmp	r1, r2
 800e834:	f100 33ff 	add.w	r3, r0, #4294967295
 800e838:	d100      	bne.n	800e83c <memcpy+0xc>
 800e83a:	4770      	bx	lr
 800e83c:	b510      	push	{r4, lr}
 800e83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e846:	4291      	cmp	r1, r2
 800e848:	d1f9      	bne.n	800e83e <memcpy+0xe>
 800e84a:	bd10      	pop	{r4, pc}

0800e84c <memset>:
 800e84c:	4402      	add	r2, r0
 800e84e:	4603      	mov	r3, r0
 800e850:	4293      	cmp	r3, r2
 800e852:	d100      	bne.n	800e856 <memset+0xa>
 800e854:	4770      	bx	lr
 800e856:	f803 1b01 	strb.w	r1, [r3], #1
 800e85a:	e7f9      	b.n	800e850 <memset+0x4>

0800e85c <sniprintf>:
 800e85c:	b40c      	push	{r2, r3}
 800e85e:	b530      	push	{r4, r5, lr}
 800e860:	4b17      	ldr	r3, [pc, #92]	; (800e8c0 <sniprintf+0x64>)
 800e862:	1e0c      	subs	r4, r1, #0
 800e864:	681d      	ldr	r5, [r3, #0]
 800e866:	b09d      	sub	sp, #116	; 0x74
 800e868:	da08      	bge.n	800e87c <sniprintf+0x20>
 800e86a:	238b      	movs	r3, #139	; 0x8b
 800e86c:	602b      	str	r3, [r5, #0]
 800e86e:	f04f 30ff 	mov.w	r0, #4294967295
 800e872:	b01d      	add	sp, #116	; 0x74
 800e874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e878:	b002      	add	sp, #8
 800e87a:	4770      	bx	lr
 800e87c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e880:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e884:	bf14      	ite	ne
 800e886:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e88a:	4623      	moveq	r3, r4
 800e88c:	9304      	str	r3, [sp, #16]
 800e88e:	9307      	str	r3, [sp, #28]
 800e890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e894:	9002      	str	r0, [sp, #8]
 800e896:	9006      	str	r0, [sp, #24]
 800e898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e89c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e89e:	ab21      	add	r3, sp, #132	; 0x84
 800e8a0:	a902      	add	r1, sp, #8
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	f000 f869 	bl	800e97c <_svfiprintf_r>
 800e8aa:	1c43      	adds	r3, r0, #1
 800e8ac:	bfbc      	itt	lt
 800e8ae:	238b      	movlt	r3, #139	; 0x8b
 800e8b0:	602b      	strlt	r3, [r5, #0]
 800e8b2:	2c00      	cmp	r4, #0
 800e8b4:	d0dd      	beq.n	800e872 <sniprintf+0x16>
 800e8b6:	9b02      	ldr	r3, [sp, #8]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	701a      	strb	r2, [r3, #0]
 800e8bc:	e7d9      	b.n	800e872 <sniprintf+0x16>
 800e8be:	bf00      	nop
 800e8c0:	20000360 	.word	0x20000360

0800e8c4 <__ssputs_r>:
 800e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	688e      	ldr	r6, [r1, #8]
 800e8ca:	429e      	cmp	r6, r3
 800e8cc:	4682      	mov	sl, r0
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	4690      	mov	r8, r2
 800e8d2:	461f      	mov	r7, r3
 800e8d4:	d838      	bhi.n	800e948 <__ssputs_r+0x84>
 800e8d6:	898a      	ldrh	r2, [r1, #12]
 800e8d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8dc:	d032      	beq.n	800e944 <__ssputs_r+0x80>
 800e8de:	6825      	ldr	r5, [r4, #0]
 800e8e0:	6909      	ldr	r1, [r1, #16]
 800e8e2:	eba5 0901 	sub.w	r9, r5, r1
 800e8e6:	6965      	ldr	r5, [r4, #20]
 800e8e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	444b      	add	r3, r9
 800e8f4:	106d      	asrs	r5, r5, #1
 800e8f6:	429d      	cmp	r5, r3
 800e8f8:	bf38      	it	cc
 800e8fa:	461d      	movcc	r5, r3
 800e8fc:	0553      	lsls	r3, r2, #21
 800e8fe:	d531      	bpl.n	800e964 <__ssputs_r+0xa0>
 800e900:	4629      	mov	r1, r5
 800e902:	f000 fb55 	bl	800efb0 <_malloc_r>
 800e906:	4606      	mov	r6, r0
 800e908:	b950      	cbnz	r0, 800e920 <__ssputs_r+0x5c>
 800e90a:	230c      	movs	r3, #12
 800e90c:	f8ca 3000 	str.w	r3, [sl]
 800e910:	89a3      	ldrh	r3, [r4, #12]
 800e912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e920:	6921      	ldr	r1, [r4, #16]
 800e922:	464a      	mov	r2, r9
 800e924:	f7ff ff84 	bl	800e830 <memcpy>
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e932:	81a3      	strh	r3, [r4, #12]
 800e934:	6126      	str	r6, [r4, #16]
 800e936:	6165      	str	r5, [r4, #20]
 800e938:	444e      	add	r6, r9
 800e93a:	eba5 0509 	sub.w	r5, r5, r9
 800e93e:	6026      	str	r6, [r4, #0]
 800e940:	60a5      	str	r5, [r4, #8]
 800e942:	463e      	mov	r6, r7
 800e944:	42be      	cmp	r6, r7
 800e946:	d900      	bls.n	800e94a <__ssputs_r+0x86>
 800e948:	463e      	mov	r6, r7
 800e94a:	6820      	ldr	r0, [r4, #0]
 800e94c:	4632      	mov	r2, r6
 800e94e:	4641      	mov	r1, r8
 800e950:	f000 faa8 	bl	800eea4 <memmove>
 800e954:	68a3      	ldr	r3, [r4, #8]
 800e956:	1b9b      	subs	r3, r3, r6
 800e958:	60a3      	str	r3, [r4, #8]
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	4433      	add	r3, r6
 800e95e:	6023      	str	r3, [r4, #0]
 800e960:	2000      	movs	r0, #0
 800e962:	e7db      	b.n	800e91c <__ssputs_r+0x58>
 800e964:	462a      	mov	r2, r5
 800e966:	f000 fb97 	bl	800f098 <_realloc_r>
 800e96a:	4606      	mov	r6, r0
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d1e1      	bne.n	800e934 <__ssputs_r+0x70>
 800e970:	6921      	ldr	r1, [r4, #16]
 800e972:	4650      	mov	r0, sl
 800e974:	f000 fab0 	bl	800eed8 <_free_r>
 800e978:	e7c7      	b.n	800e90a <__ssputs_r+0x46>
	...

0800e97c <_svfiprintf_r>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	4698      	mov	r8, r3
 800e982:	898b      	ldrh	r3, [r1, #12]
 800e984:	061b      	lsls	r3, r3, #24
 800e986:	b09d      	sub	sp, #116	; 0x74
 800e988:	4607      	mov	r7, r0
 800e98a:	460d      	mov	r5, r1
 800e98c:	4614      	mov	r4, r2
 800e98e:	d50e      	bpl.n	800e9ae <_svfiprintf_r+0x32>
 800e990:	690b      	ldr	r3, [r1, #16]
 800e992:	b963      	cbnz	r3, 800e9ae <_svfiprintf_r+0x32>
 800e994:	2140      	movs	r1, #64	; 0x40
 800e996:	f000 fb0b 	bl	800efb0 <_malloc_r>
 800e99a:	6028      	str	r0, [r5, #0]
 800e99c:	6128      	str	r0, [r5, #16]
 800e99e:	b920      	cbnz	r0, 800e9aa <_svfiprintf_r+0x2e>
 800e9a0:	230c      	movs	r3, #12
 800e9a2:	603b      	str	r3, [r7, #0]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a8:	e0d1      	b.n	800eb4e <_svfiprintf_r+0x1d2>
 800e9aa:	2340      	movs	r3, #64	; 0x40
 800e9ac:	616b      	str	r3, [r5, #20]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b2:	2320      	movs	r3, #32
 800e9b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9bc:	2330      	movs	r3, #48	; 0x30
 800e9be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb68 <_svfiprintf_r+0x1ec>
 800e9c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9c6:	f04f 0901 	mov.w	r9, #1
 800e9ca:	4623      	mov	r3, r4
 800e9cc:	469a      	mov	sl, r3
 800e9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d2:	b10a      	cbz	r2, 800e9d8 <_svfiprintf_r+0x5c>
 800e9d4:	2a25      	cmp	r2, #37	; 0x25
 800e9d6:	d1f9      	bne.n	800e9cc <_svfiprintf_r+0x50>
 800e9d8:	ebba 0b04 	subs.w	fp, sl, r4
 800e9dc:	d00b      	beq.n	800e9f6 <_svfiprintf_r+0x7a>
 800e9de:	465b      	mov	r3, fp
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	f7ff ff6d 	bl	800e8c4 <__ssputs_r>
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	f000 80aa 	beq.w	800eb44 <_svfiprintf_r+0x1c8>
 800e9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9f2:	445a      	add	r2, fp
 800e9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 80a2 	beq.w	800eb44 <_svfiprintf_r+0x1c8>
 800ea00:	2300      	movs	r3, #0
 800ea02:	f04f 32ff 	mov.w	r2, #4294967295
 800ea06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea0a:	f10a 0a01 	add.w	sl, sl, #1
 800ea0e:	9304      	str	r3, [sp, #16]
 800ea10:	9307      	str	r3, [sp, #28]
 800ea12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea16:	931a      	str	r3, [sp, #104]	; 0x68
 800ea18:	4654      	mov	r4, sl
 800ea1a:	2205      	movs	r2, #5
 800ea1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea20:	4851      	ldr	r0, [pc, #324]	; (800eb68 <_svfiprintf_r+0x1ec>)
 800ea22:	f7f1 fbdd 	bl	80001e0 <memchr>
 800ea26:	9a04      	ldr	r2, [sp, #16]
 800ea28:	b9d8      	cbnz	r0, 800ea62 <_svfiprintf_r+0xe6>
 800ea2a:	06d0      	lsls	r0, r2, #27
 800ea2c:	bf44      	itt	mi
 800ea2e:	2320      	movmi	r3, #32
 800ea30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea34:	0711      	lsls	r1, r2, #28
 800ea36:	bf44      	itt	mi
 800ea38:	232b      	movmi	r3, #43	; 0x2b
 800ea3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ea42:	2b2a      	cmp	r3, #42	; 0x2a
 800ea44:	d015      	beq.n	800ea72 <_svfiprintf_r+0xf6>
 800ea46:	9a07      	ldr	r2, [sp, #28]
 800ea48:	4654      	mov	r4, sl
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	f04f 0c0a 	mov.w	ip, #10
 800ea50:	4621      	mov	r1, r4
 800ea52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea56:	3b30      	subs	r3, #48	; 0x30
 800ea58:	2b09      	cmp	r3, #9
 800ea5a:	d94e      	bls.n	800eafa <_svfiprintf_r+0x17e>
 800ea5c:	b1b0      	cbz	r0, 800ea8c <_svfiprintf_r+0x110>
 800ea5e:	9207      	str	r2, [sp, #28]
 800ea60:	e014      	b.n	800ea8c <_svfiprintf_r+0x110>
 800ea62:	eba0 0308 	sub.w	r3, r0, r8
 800ea66:	fa09 f303 	lsl.w	r3, r9, r3
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	9304      	str	r3, [sp, #16]
 800ea6e:	46a2      	mov	sl, r4
 800ea70:	e7d2      	b.n	800ea18 <_svfiprintf_r+0x9c>
 800ea72:	9b03      	ldr	r3, [sp, #12]
 800ea74:	1d19      	adds	r1, r3, #4
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	9103      	str	r1, [sp, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	bfbb      	ittet	lt
 800ea7e:	425b      	neglt	r3, r3
 800ea80:	f042 0202 	orrlt.w	r2, r2, #2
 800ea84:	9307      	strge	r3, [sp, #28]
 800ea86:	9307      	strlt	r3, [sp, #28]
 800ea88:	bfb8      	it	lt
 800ea8a:	9204      	strlt	r2, [sp, #16]
 800ea8c:	7823      	ldrb	r3, [r4, #0]
 800ea8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ea90:	d10c      	bne.n	800eaac <_svfiprintf_r+0x130>
 800ea92:	7863      	ldrb	r3, [r4, #1]
 800ea94:	2b2a      	cmp	r3, #42	; 0x2a
 800ea96:	d135      	bne.n	800eb04 <_svfiprintf_r+0x188>
 800ea98:	9b03      	ldr	r3, [sp, #12]
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	9203      	str	r2, [sp, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	bfb8      	it	lt
 800eaa4:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaa8:	3402      	adds	r4, #2
 800eaaa:	9305      	str	r3, [sp, #20]
 800eaac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb78 <_svfiprintf_r+0x1fc>
 800eab0:	7821      	ldrb	r1, [r4, #0]
 800eab2:	2203      	movs	r2, #3
 800eab4:	4650      	mov	r0, sl
 800eab6:	f7f1 fb93 	bl	80001e0 <memchr>
 800eaba:	b140      	cbz	r0, 800eace <_svfiprintf_r+0x152>
 800eabc:	2340      	movs	r3, #64	; 0x40
 800eabe:	eba0 000a 	sub.w	r0, r0, sl
 800eac2:	fa03 f000 	lsl.w	r0, r3, r0
 800eac6:	9b04      	ldr	r3, [sp, #16]
 800eac8:	4303      	orrs	r3, r0
 800eaca:	3401      	adds	r4, #1
 800eacc:	9304      	str	r3, [sp, #16]
 800eace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead2:	4826      	ldr	r0, [pc, #152]	; (800eb6c <_svfiprintf_r+0x1f0>)
 800ead4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ead8:	2206      	movs	r2, #6
 800eada:	f7f1 fb81 	bl	80001e0 <memchr>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d038      	beq.n	800eb54 <_svfiprintf_r+0x1d8>
 800eae2:	4b23      	ldr	r3, [pc, #140]	; (800eb70 <_svfiprintf_r+0x1f4>)
 800eae4:	bb1b      	cbnz	r3, 800eb2e <_svfiprintf_r+0x1b2>
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	3307      	adds	r3, #7
 800eaea:	f023 0307 	bic.w	r3, r3, #7
 800eaee:	3308      	adds	r3, #8
 800eaf0:	9303      	str	r3, [sp, #12]
 800eaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf4:	4433      	add	r3, r6
 800eaf6:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf8:	e767      	b.n	800e9ca <_svfiprintf_r+0x4e>
 800eafa:	fb0c 3202 	mla	r2, ip, r2, r3
 800eafe:	460c      	mov	r4, r1
 800eb00:	2001      	movs	r0, #1
 800eb02:	e7a5      	b.n	800ea50 <_svfiprintf_r+0xd4>
 800eb04:	2300      	movs	r3, #0
 800eb06:	3401      	adds	r4, #1
 800eb08:	9305      	str	r3, [sp, #20]
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	f04f 0c0a 	mov.w	ip, #10
 800eb10:	4620      	mov	r0, r4
 800eb12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb16:	3a30      	subs	r2, #48	; 0x30
 800eb18:	2a09      	cmp	r2, #9
 800eb1a:	d903      	bls.n	800eb24 <_svfiprintf_r+0x1a8>
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d0c5      	beq.n	800eaac <_svfiprintf_r+0x130>
 800eb20:	9105      	str	r1, [sp, #20]
 800eb22:	e7c3      	b.n	800eaac <_svfiprintf_r+0x130>
 800eb24:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb28:	4604      	mov	r4, r0
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e7f0      	b.n	800eb10 <_svfiprintf_r+0x194>
 800eb2e:	ab03      	add	r3, sp, #12
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	462a      	mov	r2, r5
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <_svfiprintf_r+0x1f8>)
 800eb36:	a904      	add	r1, sp, #16
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f3af 8000 	nop.w
 800eb3e:	1c42      	adds	r2, r0, #1
 800eb40:	4606      	mov	r6, r0
 800eb42:	d1d6      	bne.n	800eaf2 <_svfiprintf_r+0x176>
 800eb44:	89ab      	ldrh	r3, [r5, #12]
 800eb46:	065b      	lsls	r3, r3, #25
 800eb48:	f53f af2c 	bmi.w	800e9a4 <_svfiprintf_r+0x28>
 800eb4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb4e:	b01d      	add	sp, #116	; 0x74
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	ab03      	add	r3, sp, #12
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	462a      	mov	r2, r5
 800eb5a:	4b06      	ldr	r3, [pc, #24]	; (800eb74 <_svfiprintf_r+0x1f8>)
 800eb5c:	a904      	add	r1, sp, #16
 800eb5e:	4638      	mov	r0, r7
 800eb60:	f000 f87a 	bl	800ec58 <_printf_i>
 800eb64:	e7eb      	b.n	800eb3e <_svfiprintf_r+0x1c2>
 800eb66:	bf00      	nop
 800eb68:	0800f2b4 	.word	0x0800f2b4
 800eb6c:	0800f2be 	.word	0x0800f2be
 800eb70:	00000000 	.word	0x00000000
 800eb74:	0800e8c5 	.word	0x0800e8c5
 800eb78:	0800f2ba 	.word	0x0800f2ba

0800eb7c <_printf_common>:
 800eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	4616      	mov	r6, r2
 800eb82:	4699      	mov	r9, r3
 800eb84:	688a      	ldr	r2, [r1, #8]
 800eb86:	690b      	ldr	r3, [r1, #16]
 800eb88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	bfb8      	it	lt
 800eb90:	4613      	movlt	r3, r2
 800eb92:	6033      	str	r3, [r6, #0]
 800eb94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb98:	4607      	mov	r7, r0
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	b10a      	cbz	r2, 800eba2 <_printf_common+0x26>
 800eb9e:	3301      	adds	r3, #1
 800eba0:	6033      	str	r3, [r6, #0]
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	0699      	lsls	r1, r3, #26
 800eba6:	bf42      	ittt	mi
 800eba8:	6833      	ldrmi	r3, [r6, #0]
 800ebaa:	3302      	addmi	r3, #2
 800ebac:	6033      	strmi	r3, [r6, #0]
 800ebae:	6825      	ldr	r5, [r4, #0]
 800ebb0:	f015 0506 	ands.w	r5, r5, #6
 800ebb4:	d106      	bne.n	800ebc4 <_printf_common+0x48>
 800ebb6:	f104 0a19 	add.w	sl, r4, #25
 800ebba:	68e3      	ldr	r3, [r4, #12]
 800ebbc:	6832      	ldr	r2, [r6, #0]
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	dc26      	bgt.n	800ec12 <_printf_common+0x96>
 800ebc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebc8:	1e13      	subs	r3, r2, #0
 800ebca:	6822      	ldr	r2, [r4, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	2301      	movne	r3, #1
 800ebd0:	0692      	lsls	r2, r2, #26
 800ebd2:	d42b      	bmi.n	800ec2c <_printf_common+0xb0>
 800ebd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebd8:	4649      	mov	r1, r9
 800ebda:	4638      	mov	r0, r7
 800ebdc:	47c0      	blx	r8
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d01e      	beq.n	800ec20 <_printf_common+0xa4>
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	68e5      	ldr	r5, [r4, #12]
 800ebe6:	6832      	ldr	r2, [r6, #0]
 800ebe8:	f003 0306 	and.w	r3, r3, #6
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	bf08      	it	eq
 800ebf0:	1aad      	subeq	r5, r5, r2
 800ebf2:	68a3      	ldr	r3, [r4, #8]
 800ebf4:	6922      	ldr	r2, [r4, #16]
 800ebf6:	bf0c      	ite	eq
 800ebf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebfc:	2500      	movne	r5, #0
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	bfc4      	itt	gt
 800ec02:	1a9b      	subgt	r3, r3, r2
 800ec04:	18ed      	addgt	r5, r5, r3
 800ec06:	2600      	movs	r6, #0
 800ec08:	341a      	adds	r4, #26
 800ec0a:	42b5      	cmp	r5, r6
 800ec0c:	d11a      	bne.n	800ec44 <_printf_common+0xc8>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e008      	b.n	800ec24 <_printf_common+0xa8>
 800ec12:	2301      	movs	r3, #1
 800ec14:	4652      	mov	r2, sl
 800ec16:	4649      	mov	r1, r9
 800ec18:	4638      	mov	r0, r7
 800ec1a:	47c0      	blx	r8
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d103      	bne.n	800ec28 <_printf_common+0xac>
 800ec20:	f04f 30ff 	mov.w	r0, #4294967295
 800ec24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec28:	3501      	adds	r5, #1
 800ec2a:	e7c6      	b.n	800ebba <_printf_common+0x3e>
 800ec2c:	18e1      	adds	r1, r4, r3
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	2030      	movs	r0, #48	; 0x30
 800ec32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec36:	4422      	add	r2, r4
 800ec38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec40:	3302      	adds	r3, #2
 800ec42:	e7c7      	b.n	800ebd4 <_printf_common+0x58>
 800ec44:	2301      	movs	r3, #1
 800ec46:	4622      	mov	r2, r4
 800ec48:	4649      	mov	r1, r9
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	47c0      	blx	r8
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d0e6      	beq.n	800ec20 <_printf_common+0xa4>
 800ec52:	3601      	adds	r6, #1
 800ec54:	e7d9      	b.n	800ec0a <_printf_common+0x8e>
	...

0800ec58 <_printf_i>:
 800ec58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	7e0f      	ldrb	r7, [r1, #24]
 800ec5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec60:	2f78      	cmp	r7, #120	; 0x78
 800ec62:	4691      	mov	r9, r2
 800ec64:	4680      	mov	r8, r0
 800ec66:	460c      	mov	r4, r1
 800ec68:	469a      	mov	sl, r3
 800ec6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec6e:	d807      	bhi.n	800ec80 <_printf_i+0x28>
 800ec70:	2f62      	cmp	r7, #98	; 0x62
 800ec72:	d80a      	bhi.n	800ec8a <_printf_i+0x32>
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	f000 80d8 	beq.w	800ee2a <_printf_i+0x1d2>
 800ec7a:	2f58      	cmp	r7, #88	; 0x58
 800ec7c:	f000 80a3 	beq.w	800edc6 <_printf_i+0x16e>
 800ec80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec88:	e03a      	b.n	800ed00 <_printf_i+0xa8>
 800ec8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec8e:	2b15      	cmp	r3, #21
 800ec90:	d8f6      	bhi.n	800ec80 <_printf_i+0x28>
 800ec92:	a101      	add	r1, pc, #4	; (adr r1, 800ec98 <_printf_i+0x40>)
 800ec94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec98:	0800ecf1 	.word	0x0800ecf1
 800ec9c:	0800ed05 	.word	0x0800ed05
 800eca0:	0800ec81 	.word	0x0800ec81
 800eca4:	0800ec81 	.word	0x0800ec81
 800eca8:	0800ec81 	.word	0x0800ec81
 800ecac:	0800ec81 	.word	0x0800ec81
 800ecb0:	0800ed05 	.word	0x0800ed05
 800ecb4:	0800ec81 	.word	0x0800ec81
 800ecb8:	0800ec81 	.word	0x0800ec81
 800ecbc:	0800ec81 	.word	0x0800ec81
 800ecc0:	0800ec81 	.word	0x0800ec81
 800ecc4:	0800ee11 	.word	0x0800ee11
 800ecc8:	0800ed35 	.word	0x0800ed35
 800eccc:	0800edf3 	.word	0x0800edf3
 800ecd0:	0800ec81 	.word	0x0800ec81
 800ecd4:	0800ec81 	.word	0x0800ec81
 800ecd8:	0800ee33 	.word	0x0800ee33
 800ecdc:	0800ec81 	.word	0x0800ec81
 800ece0:	0800ed35 	.word	0x0800ed35
 800ece4:	0800ec81 	.word	0x0800ec81
 800ece8:	0800ec81 	.word	0x0800ec81
 800ecec:	0800edfb 	.word	0x0800edfb
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	1d1a      	adds	r2, r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	602a      	str	r2, [r5, #0]
 800ecf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed00:	2301      	movs	r3, #1
 800ed02:	e0a3      	b.n	800ee4c <_printf_i+0x1f4>
 800ed04:	6820      	ldr	r0, [r4, #0]
 800ed06:	6829      	ldr	r1, [r5, #0]
 800ed08:	0606      	lsls	r6, r0, #24
 800ed0a:	f101 0304 	add.w	r3, r1, #4
 800ed0e:	d50a      	bpl.n	800ed26 <_printf_i+0xce>
 800ed10:	680e      	ldr	r6, [r1, #0]
 800ed12:	602b      	str	r3, [r5, #0]
 800ed14:	2e00      	cmp	r6, #0
 800ed16:	da03      	bge.n	800ed20 <_printf_i+0xc8>
 800ed18:	232d      	movs	r3, #45	; 0x2d
 800ed1a:	4276      	negs	r6, r6
 800ed1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed20:	485e      	ldr	r0, [pc, #376]	; (800ee9c <_printf_i+0x244>)
 800ed22:	230a      	movs	r3, #10
 800ed24:	e019      	b.n	800ed5a <_printf_i+0x102>
 800ed26:	680e      	ldr	r6, [r1, #0]
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed2e:	bf18      	it	ne
 800ed30:	b236      	sxthne	r6, r6
 800ed32:	e7ef      	b.n	800ed14 <_printf_i+0xbc>
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	6820      	ldr	r0, [r4, #0]
 800ed38:	1d19      	adds	r1, r3, #4
 800ed3a:	6029      	str	r1, [r5, #0]
 800ed3c:	0601      	lsls	r1, r0, #24
 800ed3e:	d501      	bpl.n	800ed44 <_printf_i+0xec>
 800ed40:	681e      	ldr	r6, [r3, #0]
 800ed42:	e002      	b.n	800ed4a <_printf_i+0xf2>
 800ed44:	0646      	lsls	r6, r0, #25
 800ed46:	d5fb      	bpl.n	800ed40 <_printf_i+0xe8>
 800ed48:	881e      	ldrh	r6, [r3, #0]
 800ed4a:	4854      	ldr	r0, [pc, #336]	; (800ee9c <_printf_i+0x244>)
 800ed4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed4e:	bf0c      	ite	eq
 800ed50:	2308      	moveq	r3, #8
 800ed52:	230a      	movne	r3, #10
 800ed54:	2100      	movs	r1, #0
 800ed56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed5a:	6865      	ldr	r5, [r4, #4]
 800ed5c:	60a5      	str	r5, [r4, #8]
 800ed5e:	2d00      	cmp	r5, #0
 800ed60:	bfa2      	ittt	ge
 800ed62:	6821      	ldrge	r1, [r4, #0]
 800ed64:	f021 0104 	bicge.w	r1, r1, #4
 800ed68:	6021      	strge	r1, [r4, #0]
 800ed6a:	b90e      	cbnz	r6, 800ed70 <_printf_i+0x118>
 800ed6c:	2d00      	cmp	r5, #0
 800ed6e:	d04d      	beq.n	800ee0c <_printf_i+0x1b4>
 800ed70:	4615      	mov	r5, r2
 800ed72:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed76:	fb03 6711 	mls	r7, r3, r1, r6
 800ed7a:	5dc7      	ldrb	r7, [r0, r7]
 800ed7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed80:	4637      	mov	r7, r6
 800ed82:	42bb      	cmp	r3, r7
 800ed84:	460e      	mov	r6, r1
 800ed86:	d9f4      	bls.n	800ed72 <_printf_i+0x11a>
 800ed88:	2b08      	cmp	r3, #8
 800ed8a:	d10b      	bne.n	800eda4 <_printf_i+0x14c>
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	07de      	lsls	r6, r3, #31
 800ed90:	d508      	bpl.n	800eda4 <_printf_i+0x14c>
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	6861      	ldr	r1, [r4, #4]
 800ed96:	4299      	cmp	r1, r3
 800ed98:	bfde      	ittt	le
 800ed9a:	2330      	movle	r3, #48	; 0x30
 800ed9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eda0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eda4:	1b52      	subs	r2, r2, r5
 800eda6:	6122      	str	r2, [r4, #16]
 800eda8:	f8cd a000 	str.w	sl, [sp]
 800edac:	464b      	mov	r3, r9
 800edae:	aa03      	add	r2, sp, #12
 800edb0:	4621      	mov	r1, r4
 800edb2:	4640      	mov	r0, r8
 800edb4:	f7ff fee2 	bl	800eb7c <_printf_common>
 800edb8:	3001      	adds	r0, #1
 800edba:	d14c      	bne.n	800ee56 <_printf_i+0x1fe>
 800edbc:	f04f 30ff 	mov.w	r0, #4294967295
 800edc0:	b004      	add	sp, #16
 800edc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc6:	4835      	ldr	r0, [pc, #212]	; (800ee9c <_printf_i+0x244>)
 800edc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800edcc:	6829      	ldr	r1, [r5, #0]
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800edd4:	6029      	str	r1, [r5, #0]
 800edd6:	061d      	lsls	r5, r3, #24
 800edd8:	d514      	bpl.n	800ee04 <_printf_i+0x1ac>
 800edda:	07df      	lsls	r7, r3, #31
 800eddc:	bf44      	itt	mi
 800edde:	f043 0320 	orrmi.w	r3, r3, #32
 800ede2:	6023      	strmi	r3, [r4, #0]
 800ede4:	b91e      	cbnz	r6, 800edee <_printf_i+0x196>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	f023 0320 	bic.w	r3, r3, #32
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	2310      	movs	r3, #16
 800edf0:	e7b0      	b.n	800ed54 <_printf_i+0xfc>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	f043 0320 	orr.w	r3, r3, #32
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	2378      	movs	r3, #120	; 0x78
 800edfc:	4828      	ldr	r0, [pc, #160]	; (800eea0 <_printf_i+0x248>)
 800edfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee02:	e7e3      	b.n	800edcc <_printf_i+0x174>
 800ee04:	0659      	lsls	r1, r3, #25
 800ee06:	bf48      	it	mi
 800ee08:	b2b6      	uxthmi	r6, r6
 800ee0a:	e7e6      	b.n	800edda <_printf_i+0x182>
 800ee0c:	4615      	mov	r5, r2
 800ee0e:	e7bb      	b.n	800ed88 <_printf_i+0x130>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	6826      	ldr	r6, [r4, #0]
 800ee14:	6961      	ldr	r1, [r4, #20]
 800ee16:	1d18      	adds	r0, r3, #4
 800ee18:	6028      	str	r0, [r5, #0]
 800ee1a:	0635      	lsls	r5, r6, #24
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	d501      	bpl.n	800ee24 <_printf_i+0x1cc>
 800ee20:	6019      	str	r1, [r3, #0]
 800ee22:	e002      	b.n	800ee2a <_printf_i+0x1d2>
 800ee24:	0670      	lsls	r0, r6, #25
 800ee26:	d5fb      	bpl.n	800ee20 <_printf_i+0x1c8>
 800ee28:	8019      	strh	r1, [r3, #0]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	6123      	str	r3, [r4, #16]
 800ee2e:	4615      	mov	r5, r2
 800ee30:	e7ba      	b.n	800eda8 <_printf_i+0x150>
 800ee32:	682b      	ldr	r3, [r5, #0]
 800ee34:	1d1a      	adds	r2, r3, #4
 800ee36:	602a      	str	r2, [r5, #0]
 800ee38:	681d      	ldr	r5, [r3, #0]
 800ee3a:	6862      	ldr	r2, [r4, #4]
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4628      	mov	r0, r5
 800ee40:	f7f1 f9ce 	bl	80001e0 <memchr>
 800ee44:	b108      	cbz	r0, 800ee4a <_printf_i+0x1f2>
 800ee46:	1b40      	subs	r0, r0, r5
 800ee48:	6060      	str	r0, [r4, #4]
 800ee4a:	6863      	ldr	r3, [r4, #4]
 800ee4c:	6123      	str	r3, [r4, #16]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee54:	e7a8      	b.n	800eda8 <_printf_i+0x150>
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	462a      	mov	r2, r5
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	47d0      	blx	sl
 800ee60:	3001      	adds	r0, #1
 800ee62:	d0ab      	beq.n	800edbc <_printf_i+0x164>
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	079b      	lsls	r3, r3, #30
 800ee68:	d413      	bmi.n	800ee92 <_printf_i+0x23a>
 800ee6a:	68e0      	ldr	r0, [r4, #12]
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	4298      	cmp	r0, r3
 800ee70:	bfb8      	it	lt
 800ee72:	4618      	movlt	r0, r3
 800ee74:	e7a4      	b.n	800edc0 <_printf_i+0x168>
 800ee76:	2301      	movs	r3, #1
 800ee78:	4632      	mov	r2, r6
 800ee7a:	4649      	mov	r1, r9
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	47d0      	blx	sl
 800ee80:	3001      	adds	r0, #1
 800ee82:	d09b      	beq.n	800edbc <_printf_i+0x164>
 800ee84:	3501      	adds	r5, #1
 800ee86:	68e3      	ldr	r3, [r4, #12]
 800ee88:	9903      	ldr	r1, [sp, #12]
 800ee8a:	1a5b      	subs	r3, r3, r1
 800ee8c:	42ab      	cmp	r3, r5
 800ee8e:	dcf2      	bgt.n	800ee76 <_printf_i+0x21e>
 800ee90:	e7eb      	b.n	800ee6a <_printf_i+0x212>
 800ee92:	2500      	movs	r5, #0
 800ee94:	f104 0619 	add.w	r6, r4, #25
 800ee98:	e7f5      	b.n	800ee86 <_printf_i+0x22e>
 800ee9a:	bf00      	nop
 800ee9c:	0800f2c5 	.word	0x0800f2c5
 800eea0:	0800f2d6 	.word	0x0800f2d6

0800eea4 <memmove>:
 800eea4:	4288      	cmp	r0, r1
 800eea6:	b510      	push	{r4, lr}
 800eea8:	eb01 0402 	add.w	r4, r1, r2
 800eeac:	d902      	bls.n	800eeb4 <memmove+0x10>
 800eeae:	4284      	cmp	r4, r0
 800eeb0:	4623      	mov	r3, r4
 800eeb2:	d807      	bhi.n	800eec4 <memmove+0x20>
 800eeb4:	1e43      	subs	r3, r0, #1
 800eeb6:	42a1      	cmp	r1, r4
 800eeb8:	d008      	beq.n	800eecc <memmove+0x28>
 800eeba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eec2:	e7f8      	b.n	800eeb6 <memmove+0x12>
 800eec4:	4402      	add	r2, r0
 800eec6:	4601      	mov	r1, r0
 800eec8:	428a      	cmp	r2, r1
 800eeca:	d100      	bne.n	800eece <memmove+0x2a>
 800eecc:	bd10      	pop	{r4, pc}
 800eece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eed6:	e7f7      	b.n	800eec8 <memmove+0x24>

0800eed8 <_free_r>:
 800eed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeda:	2900      	cmp	r1, #0
 800eedc:	d044      	beq.n	800ef68 <_free_r+0x90>
 800eede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eee2:	9001      	str	r0, [sp, #4]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f1a1 0404 	sub.w	r4, r1, #4
 800eeea:	bfb8      	it	lt
 800eeec:	18e4      	addlt	r4, r4, r3
 800eeee:	f000 f913 	bl	800f118 <__malloc_lock>
 800eef2:	4a1e      	ldr	r2, [pc, #120]	; (800ef6c <_free_r+0x94>)
 800eef4:	9801      	ldr	r0, [sp, #4]
 800eef6:	6813      	ldr	r3, [r2, #0]
 800eef8:	b933      	cbnz	r3, 800ef08 <_free_r+0x30>
 800eefa:	6063      	str	r3, [r4, #4]
 800eefc:	6014      	str	r4, [r2, #0]
 800eefe:	b003      	add	sp, #12
 800ef00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef04:	f000 b90e 	b.w	800f124 <__malloc_unlock>
 800ef08:	42a3      	cmp	r3, r4
 800ef0a:	d908      	bls.n	800ef1e <_free_r+0x46>
 800ef0c:	6825      	ldr	r5, [r4, #0]
 800ef0e:	1961      	adds	r1, r4, r5
 800ef10:	428b      	cmp	r3, r1
 800ef12:	bf01      	itttt	eq
 800ef14:	6819      	ldreq	r1, [r3, #0]
 800ef16:	685b      	ldreq	r3, [r3, #4]
 800ef18:	1949      	addeq	r1, r1, r5
 800ef1a:	6021      	streq	r1, [r4, #0]
 800ef1c:	e7ed      	b.n	800eefa <_free_r+0x22>
 800ef1e:	461a      	mov	r2, r3
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	b10b      	cbz	r3, 800ef28 <_free_r+0x50>
 800ef24:	42a3      	cmp	r3, r4
 800ef26:	d9fa      	bls.n	800ef1e <_free_r+0x46>
 800ef28:	6811      	ldr	r1, [r2, #0]
 800ef2a:	1855      	adds	r5, r2, r1
 800ef2c:	42a5      	cmp	r5, r4
 800ef2e:	d10b      	bne.n	800ef48 <_free_r+0x70>
 800ef30:	6824      	ldr	r4, [r4, #0]
 800ef32:	4421      	add	r1, r4
 800ef34:	1854      	adds	r4, r2, r1
 800ef36:	42a3      	cmp	r3, r4
 800ef38:	6011      	str	r1, [r2, #0]
 800ef3a:	d1e0      	bne.n	800eefe <_free_r+0x26>
 800ef3c:	681c      	ldr	r4, [r3, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	6053      	str	r3, [r2, #4]
 800ef42:	4421      	add	r1, r4
 800ef44:	6011      	str	r1, [r2, #0]
 800ef46:	e7da      	b.n	800eefe <_free_r+0x26>
 800ef48:	d902      	bls.n	800ef50 <_free_r+0x78>
 800ef4a:	230c      	movs	r3, #12
 800ef4c:	6003      	str	r3, [r0, #0]
 800ef4e:	e7d6      	b.n	800eefe <_free_r+0x26>
 800ef50:	6825      	ldr	r5, [r4, #0]
 800ef52:	1961      	adds	r1, r4, r5
 800ef54:	428b      	cmp	r3, r1
 800ef56:	bf04      	itt	eq
 800ef58:	6819      	ldreq	r1, [r3, #0]
 800ef5a:	685b      	ldreq	r3, [r3, #4]
 800ef5c:	6063      	str	r3, [r4, #4]
 800ef5e:	bf04      	itt	eq
 800ef60:	1949      	addeq	r1, r1, r5
 800ef62:	6021      	streq	r1, [r4, #0]
 800ef64:	6054      	str	r4, [r2, #4]
 800ef66:	e7ca      	b.n	800eefe <_free_r+0x26>
 800ef68:	b003      	add	sp, #12
 800ef6a:	bd30      	pop	{r4, r5, pc}
 800ef6c:	2000720c 	.word	0x2000720c

0800ef70 <sbrk_aligned>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	4e0e      	ldr	r6, [pc, #56]	; (800efac <sbrk_aligned+0x3c>)
 800ef74:	460c      	mov	r4, r1
 800ef76:	6831      	ldr	r1, [r6, #0]
 800ef78:	4605      	mov	r5, r0
 800ef7a:	b911      	cbnz	r1, 800ef82 <sbrk_aligned+0x12>
 800ef7c:	f000 f8bc 	bl	800f0f8 <_sbrk_r>
 800ef80:	6030      	str	r0, [r6, #0]
 800ef82:	4621      	mov	r1, r4
 800ef84:	4628      	mov	r0, r5
 800ef86:	f000 f8b7 	bl	800f0f8 <_sbrk_r>
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	d00a      	beq.n	800efa4 <sbrk_aligned+0x34>
 800ef8e:	1cc4      	adds	r4, r0, #3
 800ef90:	f024 0403 	bic.w	r4, r4, #3
 800ef94:	42a0      	cmp	r0, r4
 800ef96:	d007      	beq.n	800efa8 <sbrk_aligned+0x38>
 800ef98:	1a21      	subs	r1, r4, r0
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f000 f8ac 	bl	800f0f8 <_sbrk_r>
 800efa0:	3001      	adds	r0, #1
 800efa2:	d101      	bne.n	800efa8 <sbrk_aligned+0x38>
 800efa4:	f04f 34ff 	mov.w	r4, #4294967295
 800efa8:	4620      	mov	r0, r4
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	20007210 	.word	0x20007210

0800efb0 <_malloc_r>:
 800efb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb4:	1ccd      	adds	r5, r1, #3
 800efb6:	f025 0503 	bic.w	r5, r5, #3
 800efba:	3508      	adds	r5, #8
 800efbc:	2d0c      	cmp	r5, #12
 800efbe:	bf38      	it	cc
 800efc0:	250c      	movcc	r5, #12
 800efc2:	2d00      	cmp	r5, #0
 800efc4:	4607      	mov	r7, r0
 800efc6:	db01      	blt.n	800efcc <_malloc_r+0x1c>
 800efc8:	42a9      	cmp	r1, r5
 800efca:	d905      	bls.n	800efd8 <_malloc_r+0x28>
 800efcc:	230c      	movs	r3, #12
 800efce:	603b      	str	r3, [r7, #0]
 800efd0:	2600      	movs	r6, #0
 800efd2:	4630      	mov	r0, r6
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	4e2e      	ldr	r6, [pc, #184]	; (800f094 <_malloc_r+0xe4>)
 800efda:	f000 f89d 	bl	800f118 <__malloc_lock>
 800efde:	6833      	ldr	r3, [r6, #0]
 800efe0:	461c      	mov	r4, r3
 800efe2:	bb34      	cbnz	r4, 800f032 <_malloc_r+0x82>
 800efe4:	4629      	mov	r1, r5
 800efe6:	4638      	mov	r0, r7
 800efe8:	f7ff ffc2 	bl	800ef70 <sbrk_aligned>
 800efec:	1c43      	adds	r3, r0, #1
 800efee:	4604      	mov	r4, r0
 800eff0:	d14d      	bne.n	800f08e <_malloc_r+0xde>
 800eff2:	6834      	ldr	r4, [r6, #0]
 800eff4:	4626      	mov	r6, r4
 800eff6:	2e00      	cmp	r6, #0
 800eff8:	d140      	bne.n	800f07c <_malloc_r+0xcc>
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	4631      	mov	r1, r6
 800effe:	4638      	mov	r0, r7
 800f000:	eb04 0803 	add.w	r8, r4, r3
 800f004:	f000 f878 	bl	800f0f8 <_sbrk_r>
 800f008:	4580      	cmp	r8, r0
 800f00a:	d13a      	bne.n	800f082 <_malloc_r+0xd2>
 800f00c:	6821      	ldr	r1, [r4, #0]
 800f00e:	3503      	adds	r5, #3
 800f010:	1a6d      	subs	r5, r5, r1
 800f012:	f025 0503 	bic.w	r5, r5, #3
 800f016:	3508      	adds	r5, #8
 800f018:	2d0c      	cmp	r5, #12
 800f01a:	bf38      	it	cc
 800f01c:	250c      	movcc	r5, #12
 800f01e:	4629      	mov	r1, r5
 800f020:	4638      	mov	r0, r7
 800f022:	f7ff ffa5 	bl	800ef70 <sbrk_aligned>
 800f026:	3001      	adds	r0, #1
 800f028:	d02b      	beq.n	800f082 <_malloc_r+0xd2>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	442b      	add	r3, r5
 800f02e:	6023      	str	r3, [r4, #0]
 800f030:	e00e      	b.n	800f050 <_malloc_r+0xa0>
 800f032:	6822      	ldr	r2, [r4, #0]
 800f034:	1b52      	subs	r2, r2, r5
 800f036:	d41e      	bmi.n	800f076 <_malloc_r+0xc6>
 800f038:	2a0b      	cmp	r2, #11
 800f03a:	d916      	bls.n	800f06a <_malloc_r+0xba>
 800f03c:	1961      	adds	r1, r4, r5
 800f03e:	42a3      	cmp	r3, r4
 800f040:	6025      	str	r5, [r4, #0]
 800f042:	bf18      	it	ne
 800f044:	6059      	strne	r1, [r3, #4]
 800f046:	6863      	ldr	r3, [r4, #4]
 800f048:	bf08      	it	eq
 800f04a:	6031      	streq	r1, [r6, #0]
 800f04c:	5162      	str	r2, [r4, r5]
 800f04e:	604b      	str	r3, [r1, #4]
 800f050:	4638      	mov	r0, r7
 800f052:	f104 060b 	add.w	r6, r4, #11
 800f056:	f000 f865 	bl	800f124 <__malloc_unlock>
 800f05a:	f026 0607 	bic.w	r6, r6, #7
 800f05e:	1d23      	adds	r3, r4, #4
 800f060:	1af2      	subs	r2, r6, r3
 800f062:	d0b6      	beq.n	800efd2 <_malloc_r+0x22>
 800f064:	1b9b      	subs	r3, r3, r6
 800f066:	50a3      	str	r3, [r4, r2]
 800f068:	e7b3      	b.n	800efd2 <_malloc_r+0x22>
 800f06a:	6862      	ldr	r2, [r4, #4]
 800f06c:	42a3      	cmp	r3, r4
 800f06e:	bf0c      	ite	eq
 800f070:	6032      	streq	r2, [r6, #0]
 800f072:	605a      	strne	r2, [r3, #4]
 800f074:	e7ec      	b.n	800f050 <_malloc_r+0xa0>
 800f076:	4623      	mov	r3, r4
 800f078:	6864      	ldr	r4, [r4, #4]
 800f07a:	e7b2      	b.n	800efe2 <_malloc_r+0x32>
 800f07c:	4634      	mov	r4, r6
 800f07e:	6876      	ldr	r6, [r6, #4]
 800f080:	e7b9      	b.n	800eff6 <_malloc_r+0x46>
 800f082:	230c      	movs	r3, #12
 800f084:	603b      	str	r3, [r7, #0]
 800f086:	4638      	mov	r0, r7
 800f088:	f000 f84c 	bl	800f124 <__malloc_unlock>
 800f08c:	e7a1      	b.n	800efd2 <_malloc_r+0x22>
 800f08e:	6025      	str	r5, [r4, #0]
 800f090:	e7de      	b.n	800f050 <_malloc_r+0xa0>
 800f092:	bf00      	nop
 800f094:	2000720c 	.word	0x2000720c

0800f098 <_realloc_r>:
 800f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09c:	4680      	mov	r8, r0
 800f09e:	4614      	mov	r4, r2
 800f0a0:	460e      	mov	r6, r1
 800f0a2:	b921      	cbnz	r1, 800f0ae <_realloc_r+0x16>
 800f0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	f7ff bf81 	b.w	800efb0 <_malloc_r>
 800f0ae:	b92a      	cbnz	r2, 800f0bc <_realloc_r+0x24>
 800f0b0:	f7ff ff12 	bl	800eed8 <_free_r>
 800f0b4:	4625      	mov	r5, r4
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0bc:	f000 f838 	bl	800f130 <_malloc_usable_size_r>
 800f0c0:	4284      	cmp	r4, r0
 800f0c2:	4607      	mov	r7, r0
 800f0c4:	d802      	bhi.n	800f0cc <_realloc_r+0x34>
 800f0c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0ca:	d812      	bhi.n	800f0f2 <_realloc_r+0x5a>
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	f7ff ff6e 	bl	800efb0 <_malloc_r>
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d0ed      	beq.n	800f0b6 <_realloc_r+0x1e>
 800f0da:	42bc      	cmp	r4, r7
 800f0dc:	4622      	mov	r2, r4
 800f0de:	4631      	mov	r1, r6
 800f0e0:	bf28      	it	cs
 800f0e2:	463a      	movcs	r2, r7
 800f0e4:	f7ff fba4 	bl	800e830 <memcpy>
 800f0e8:	4631      	mov	r1, r6
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	f7ff fef4 	bl	800eed8 <_free_r>
 800f0f0:	e7e1      	b.n	800f0b6 <_realloc_r+0x1e>
 800f0f2:	4635      	mov	r5, r6
 800f0f4:	e7df      	b.n	800f0b6 <_realloc_r+0x1e>
	...

0800f0f8 <_sbrk_r>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	4d06      	ldr	r5, [pc, #24]	; (800f114 <_sbrk_r+0x1c>)
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4604      	mov	r4, r0
 800f100:	4608      	mov	r0, r1
 800f102:	602b      	str	r3, [r5, #0]
 800f104:	f7f2 f966 	bl	80013d4 <_sbrk>
 800f108:	1c43      	adds	r3, r0, #1
 800f10a:	d102      	bne.n	800f112 <_sbrk_r+0x1a>
 800f10c:	682b      	ldr	r3, [r5, #0]
 800f10e:	b103      	cbz	r3, 800f112 <_sbrk_r+0x1a>
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	bd38      	pop	{r3, r4, r5, pc}
 800f114:	20007214 	.word	0x20007214

0800f118 <__malloc_lock>:
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__malloc_lock+0x8>)
 800f11a:	f000 b811 	b.w	800f140 <__retarget_lock_acquire_recursive>
 800f11e:	bf00      	nop
 800f120:	20007218 	.word	0x20007218

0800f124 <__malloc_unlock>:
 800f124:	4801      	ldr	r0, [pc, #4]	; (800f12c <__malloc_unlock+0x8>)
 800f126:	f000 b80c 	b.w	800f142 <__retarget_lock_release_recursive>
 800f12a:	bf00      	nop
 800f12c:	20007218 	.word	0x20007218

0800f130 <_malloc_usable_size_r>:
 800f130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f134:	1f18      	subs	r0, r3, #4
 800f136:	2b00      	cmp	r3, #0
 800f138:	bfbc      	itt	lt
 800f13a:	580b      	ldrlt	r3, [r1, r0]
 800f13c:	18c0      	addlt	r0, r0, r3
 800f13e:	4770      	bx	lr

0800f140 <__retarget_lock_acquire_recursive>:
 800f140:	4770      	bx	lr

0800f142 <__retarget_lock_release_recursive>:
 800f142:	4770      	bx	lr

0800f144 <_init>:
 800f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f146:	bf00      	nop
 800f148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14a:	bc08      	pop	{r3}
 800f14c:	469e      	mov	lr, r3
 800f14e:	4770      	bx	lr

0800f150 <_fini>:
 800f150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f152:	bf00      	nop
 800f154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f156:	bc08      	pop	{r3}
 800f158:	469e      	mov	lr, r3
 800f15a:	4770      	bx	lr
